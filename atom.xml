<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>StrongWong</title>
  
  <subtitle>Embedded Software Engineer. Blogging about tech and life.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.strongwong.top/"/>
  <updated>2019-08-30T16:42:31.056Z</updated>
  <id>https://blog.strongwong.top/</id>
  
  <author>
    <name>strongwong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>拆解一个很有意思的开关</title>
    <link href="https://blog.strongwong.top//posts/%E6%8B%86%E8%A7%A3%E4%B8%80%E4%B8%AA%E5%BE%88%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%BC%80%E5%85%B3.html"/>
    <id>https://blog.strongwong.top//posts/拆解一个很有意思的开关.html</id>
    <published>2019-08-30T12:54:54.000Z</published>
    <updated>2019-08-30T16:42:31.056Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2019/08/30/mjONAf.jpg" alt="linptech-sw"></p><p>最近公司买了一个很有意思的开关，说是叫无源无线开关。无线嘛，就是没有电线连接，是无线的，好像是 433 无线模块通讯的。所谓无源就是没有电池或者其他直接的电源供电了，是一个自发电的开关。就是上图这个东东，我很是好奇，很想知道他这个自发电的开关内部是个什么样子，那我们拆开看看吧~ 嘿嘿~~</p><a id="more"></a><p>趁着下班了，大家都不在，我一个人开始在公司开拆！</p><p><img src="https://s2.ax1x.com/2019/08/30/mjXWZt.jpg" alt="外壳"></p><p>这个无源无线开关和其他普通开关从外观上来看都差不多。它的塑料外壳和普通开关一样，轻轻撬开即可。打开外壳我们可以看到一根铜线，这应该就是用于无线通讯的天线了。卸下按键壳，下面就是整个开关的主体模块了。开关的主体很牢固的卡在底座上，只能硬撬下来了。</p><p><img src="https://s2.ax1x.com/2019/08/30/mjzJFx.jpg" alt="开关主体"></p><p>开关主体拿下来还是可以正常使用的，当我把主板上的壳子拆下来后，开关就不可以自发电了。主板的正面有 5 个电容按键，具体功能不得而知，可能是备用、兼容或者是为调试预留的？</p><p>拿下电容按键，看到主板背面线圈的一瞬间，相信中学物理还可以的朋友应该都能反应过来，这个开关的自发电原理应该就是咱们学过的电磁感应原理啊！通过线圈切割磁感线然后产生电能供应给其他电路使用。我迫不及待地卸下主板，想一探究竟，看看是不是我想的这样。但是主板和底座之间有一些机械机构互相钳制，费了好大力气才将主板卸下。</p><p><img src="https://s2.ax1x.com/2019/08/30/mvCbVJ.jpg" alt="磁铁簧片结构"><br><img src="https://s2.ax1x.com/2019/08/30/mvCqa9.jpg" alt="主体拆解图"></p><p>卸下主板后，我们看到底座上确实有一个由三个铆钉固定的磁铁。哈哈，果然是这样。在主体的壳子上有一个弹簧，怼着底座上的拨动机构，在开关按下的时候，拨动机构带动簧片拨动磁铁，磁铁的移动在线圈那端是有限位的，磁铁在一瞬间移动就相当于线圈切割了一次磁感线，从而产生电能给到其他负载。</p><blockquote><ul><li>拨杆机构细节图，挺有意思的一个结构。<br><img src="https://s2.ax1x.com/2019/08/30/mvCL5R.jpg" alt="拨杆机构"></li></ul></blockquote><p>然后来详细看一下主板：</p><p><img src="https://s2.ax1x.com/2019/08/30/mvCXP1.jpg" alt="MainBoard"></p><p>在主板上主要有一颗 TI 的 <a href="http://www.ti.com.cn/product/cn/CC115L" target="_blank" rel="noopener"><code>CC115L</code></a> 超值射频发射芯片、一颗 ST 的 <a href="https://www.st.com/content/st_com/en/products/microcontrollers-microprocessors/stm8-8-bit-mcus/stm8s-series/stm8s-value-line/stm8s003f3.html" target="_blank" rel="noopener"><code>stm8s003f3p6</code></a> 8 位单片机、一个线圈以及电能采集储能电路。 <code>stm8s003</code>+<code>CC115L/CC113L</code> 的搭配在无线智能家居等场景好像应用很多。具体的芯片资料大家直接看厂商的 datasheet 吧，这里就不多做介绍了。</p><p>我仔细研究一下这个磁感线圈电能采集存储电路，主要有 5 个肖特基二极管，一个稳压二极管，一个 PMOS和一个 NMOS 丝印分别是 <code>1GM 、2GM</code> ，以及一个丝印为 <code>A18F</code>的未知芯片，没有找到直接对应的芯片型号，但根据电感来判断应该是一个 DC-DC 转换器，至于应该是降压还是升压就不太清楚了，因为拆开后就没有办法拨动开关产生电能，来测试对应点的电位了。我个人觉得这个线圈应该生产不了多大的电压，所以这里可能是一个升压的。通过按压，电磁线圈产生电能后，通过前级的电路采集后，到电感这里短暂存储，供控制器和射频芯片短暂地工作几十毫秒把控制信号发射出去，这样就可以控制接收端的各种设备了。简单理解了这部分的电路后，我简单绘制了一下这部分的原理图，不一定完全正确，但大体上应该是对的。有兴趣的朋友可以帮我看看，如果有什么错误的地方欢迎给我留言指正。</p><p><img src="https://s2.ax1x.com/2019/08/30/mvPfdH.png" alt="能量采集电路"></p><p>好了！这一次的拆解就到这里啦~，我要赶快装回去了，不能让大家发现！（逃~~）</p><p>简单总结一下吧！</p><blockquote><ul><li>这个无源无线开关还是很 nice 的，不用布线，不用电池，自发电，节能环保！发电线圈的设计也不失为一种新的低功耗方案，在一些更小体积的应用场景可能不太合适吧。</li><li>神奇的事情背后都有基本的科学知识，中学的物理知识就这样实际运用在我们的日常生活中啦！</li><li>还有拆东西是一件很爽的事情！哈哈哈！</li></ul></blockquote><p>Have fun~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/08/30/mjONAf.jpg&quot; alt=&quot;linptech-sw&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近公司买了一个很有意思的开关，说是叫无源无线开关。无线嘛，就是没有电线连接，是无线的，好像是 433 无线模块通讯的。所谓无源就是没有电池或者其他直接的电源供电了，是一个自发电的开关。就是上图这个东东，我很是好奇，很想知道他这个自发电的开关内部是个什么样子，那我们拆开看看吧~ 嘿嘿~~&lt;/p&gt;
    
    </summary>
    
      <category term="拆机" scheme="https://blog.strongwong.top/categories/%E6%8B%86%E6%9C%BA/"/>
    
    
      <category term="拆解" scheme="https://blog.strongwong.top/tags/%E6%8B%86%E8%A7%A3/"/>
    
      <category term="无线" scheme="https://blog.strongwong.top/tags/%E6%97%A0%E7%BA%BF/"/>
    
      <category term="自发电开关" scheme="https://blog.strongwong.top/tags/%E8%87%AA%E5%8F%91%E7%94%B5%E5%BC%80%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>拆解某宝上热销的一款蓝牙耳机</title>
    <link href="https://blog.strongwong.top//posts/%E6%8B%86%E8%A7%A3%E6%9F%90%E5%AE%9D%E4%B8%8A%E7%83%AD%E9%94%80%E7%9A%84%E4%B8%80%E6%AC%BE%E8%93%9D%E7%89%99%E8%80%B3%E6%9C%BA.html"/>
    <id>https://blog.strongwong.top//posts/拆解某宝上热销的一款蓝牙耳机.html</id>
    <published>2019-08-28T13:52:27.000Z</published>
    <updated>2019-08-29T05:15:05.528Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2019/08/28/mHGnqP.png" alt="mHGnqP.png"></p><p>前些天在某宝上购买了一个蓝牙耳机，想着跑步的时候可以听听音乐。我对耳机的要求也不高，听个响就行。于是，就下单了这个在某宝上热销的(10w+)超便宜的蓝牙耳机，只要 <code>￥19.9</code> 还包邮！</p><p>用了几天，这个耳机对于只是听个响的我来说绝对 ok！也是对的起它这个价位了。但是没用几天，因为我的疏忽，没有将耳机从口袋拿出来，所以就跟着衣服一起在洗衣机里搅了 40 分钟……</p><a id="more"></a><p>当我将它拿出来，晾干后，还能开机，正常连接手机。哈哈哈，没坏！我大喜过望，于是我赶忙播放音乐试试，结果发现就在连接上的一瞬间会有音乐。哎！乐极生悲了。它还是坏了，那就在扔掉之前看看它里面都有些什么吧…….</p><p>我想按键控制区貌似比较好拆一些，先拆这个吧。结果，没办法还是不好拆，那就暴力点吧！</p><p><img src="https://s2.ax1x.com/2019/08/28/mHUruj.jpg" alt="mHUruj.jpg"></p><p>拆开后我们可以看到，蓝牙耳机的主要器件都分布在主板的正面。包括 一颗蓝牙 SoC 芯片，一个麦克风，三个贴了防水的按键，两个 LED 灯，一颗 26MHz 有源晶振以及 PCB 板载天线和一些阻容元器件。从主板正面看到有电感，因此可以推断芯片内部应该是集成了 BUCK 的，以降低芯片内部工作电压，降低功耗，从而提高待机时间，达到长时间使用的目的。</p><p><img src="https://s2.ax1x.com/2019/08/28/mHs0nU.jpg" alt="mHs0nU.jpg"></p><p>关于这个耳机的蓝牙主控芯片，貌似是支持蓝牙 5.0 的，但是我的手机不是所以也就不得而知了。我想根据这个丝印信息，找到关于这颗 SoC 芯片的一些信息，但是在网上我是怎么也没有找到对应的生产公司。这颗 SoC 上丝印的信息是 <code>DCFB14D7B</code>，找了半天好像也就这个公司的 logo 和芯片上的比较符合，一个叫<a href="http://www.abell.net.cn/" target="_blank" rel="noopener"><strong>欧标</strong></a>的公司。神奇的是这个公司貌似是做对讲机、中继台等无线通讯整机产品的公司。在官网上没有找到任何一个地方提到过他们有设计过蓝牙 SoC，但是由于他们也是做无线通讯相关产品的公司，所以我觉得很大概率上是这个公司的芯片。</p><p><img src="https://s2.ax1x.com/2019/08/28/mHfAJg.jpg" alt="mHfAJg.jpg"><br><img src="https://s2.ax1x.com/2019/08/28/mH5myd.jpg" alt="mH5myd.jpg"></p><p>我在搜索的过程中，还发现了一位智利的老哥拆解过一个，在全球速卖通上购买的 TWS 蓝牙耳机，也是使用的这颗蓝牙芯片（<a href="http://blog.victroniko.cl/blog/post/teardown-bluetooth-tws-t012-es" target="_blank" rel="noopener">他的拆解</a>）。照这样看，我觉得这个公司的蓝牙芯片应该是占据了中低端蓝牙耳机的大部分份额，神奇的是竟然还不为人所熟知！哦，对了这也是一个深圳南山区的公司，深圳南山区卧虎藏龙啊！哈哈哈！</p><p>主板的背面到没有什么东西了，主要就是一个 Micro USB 充电口，三个测试点以及连接两个听筒和电池的连接线。整个板的大小也就 <code>42mm * 5mm</code> ，集成度还是很高的。从 PCB 的生产日期（<code>20190612</code>）看，这批耳机貌似还是比较新的。</p><p><img src="https://s2.ax1x.com/2019/08/28/mHdq1O.jpg" alt="mHdq1O.jpg"></p><p>然后我们拆开电池仓看看，这是一块标称 <code>3.7v/200mAH</code> 的锂电池，接了两根从 PCB 拉过来的电源线。在电池的电源端我们还看到一块很小的 PCB，上面有两颗芯片。一颗是 <code>DW01A</code>，这是一颗锂电池保护 IC。主要是为了防止因为过充、过放、大电流等因素导致锂电池寿命缩短或者损坏的锂电池专用 IC。另外一颗是 <code>8205</code>，这是一颗双 MOS 开关芯片，主要是用来配合 DW01A 来共同构成锂电池保护电路。一路 MOS 用来控制防止过充，另一路 MOS 用来控制防止过放。</p><p><img src="https://s2.ax1x.com/2019/08/29/mHTPwn.jpg" alt="mHTPwn.jpg"><br><img src="https://s2.ax1x.com/2019/08/29/mHTCes.jpg" alt="mHTCes.jpg"></p><p>好了，到这里我们的拆解就基本完成了~ </p><p>总结一下：</p><blockquote><ul><li>这个耳机虽然便宜，但是做工基本 Ok，对得起它这个价位了。</li><li>耳机内部虽然简单，但也是五章俱全了，该有的都有。</li><li>一个神奇的蓝牙芯片公司，做了低功耗设计，工作和待机时间都还可以。</li></ul></blockquote><p>Have fun ~</p><hr><p>后记：有朋友给我指正了，这颗 AB 芯片是中科蓝讯这个公司的，在此说明一下。但是我还是没有找到关于这颗芯片更详细的资料了，Datasheet 也没有，那就这样吧！哦，对了这依然是一家深圳南山的公司，哈哈哈！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/08/28/mHGnqP.png&quot; alt=&quot;mHGnqP.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;前些天在某宝上购买了一个蓝牙耳机，想着跑步的时候可以听听音乐。我对耳机的要求也不高，听个响就行。于是，就下单了这个在某宝上热销的(10w+)超便宜的蓝牙耳机，只要 &lt;code&gt;￥19.9&lt;/code&gt; 还包邮！&lt;/p&gt;
&lt;p&gt;用了几天，这个耳机对于只是听个响的我来说绝对 ok！也是对的起它这个价位了。但是没用几天，因为我的疏忽，没有将耳机从口袋拿出来，所以就跟着衣服一起在洗衣机里搅了 40 分钟……&lt;/p&gt;
    
    </summary>
    
      <category term="拆机" scheme="https://blog.strongwong.top/categories/%E6%8B%86%E6%9C%BA/"/>
    
    
      <category term="拆解" scheme="https://blog.strongwong.top/tags/%E6%8B%86%E8%A7%A3/"/>
    
      <category term="蓝牙" scheme="https://blog.strongwong.top/tags/%E8%93%9D%E7%89%99/"/>
    
      <category term="耳机" scheme="https://blog.strongwong.top/tags/%E8%80%B3%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Windows10 环境下搭建 RISC-V 调试环境</title>
    <link href="https://blog.strongwong.top//posts/Windows10-%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BA-RISC-V-%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83.html"/>
    <id>https://blog.strongwong.top//posts/Windows10-环境下搭建-RISC-V-调试环境.html</id>
    <published>2019-03-11T02:32:02.000Z</published>
    <updated>2019-03-11T06:22:24.810Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><h3 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h3><ul><li>IDE: <a href="https://github.com/gnu-mcu-eclipse/org.eclipse.epp.packages/releases" target="_blank" rel="noopener">GNU MCU Eclipse IDE for C/C++ Developers</a></li><li>IDE 插件: <a href="https://github.com/gnu-mcu-eclipse/eclipse-plugins/releases" target="_blank" rel="noopener">GNU MCU Eclipse plug-ins</a></li><li>GCC/GDB 工具: <a href="https://github.com/gnu-mcu-eclipse/riscv-none-gcc/releases" target="_blank" rel="noopener">GNU MCU Eclipse RISC-V Embedded GCC</a></li><li>调试工具: <a href="https://github.com/gnu-mcu-eclipse/openocd/releases" target="_blank" rel="noopener">GNU MCU Eclipse OpenOCD</a></li><li>make 工具: <a href="https://github.com/gnu-mcu-eclipse/windows-build-tools/releases" target="_blank" rel="noopener">GNU MCU Eclipse Windows Build Tools</a></li><li>Zadig 工具: <a href="https://zadig.akeo.ie/" target="_blank" rel="noopener">Zadig</a></li></ul><h3 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h3><ul><li>目标 RISC-V 芯片</li><li>调试器： J-Link，FT2232 或其他含有标准 JTAG 接口的调试器</li></ul><a id="more"></a><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>以下内容来自 ChenRQ 同学！</p><p>启动 IDE: GNU MCU Eclipse IDE for C/C++ Developers，Eclipse 基于 Java 开发，运行时需要 Java 的运行环境(JRE)，如没有请自行安装。</p><h2 id="新建一个工程"><a href="#新建一个工程" class="headerlink" title="新建一个工程"></a>新建一个工程</h2><p><img src="https://i.loli.net/2019/02/26/5c7540a7474bf.png" alt="新建工程"></p><p>工程类型选择 Hello World RISC-V C Project，工具链选择 RISC-V Cross GCC 如下所示</p><p><img src="https://i.loli.net/2019/02/26/5c754155033e4.png" alt="项目类型设置"></p><p>使用默认配置 next 至 GNU 工具链选择， 文件路径应指向为您的 RISC-V Embedded GCC 目录下的 bin 文件夹，如下图所示</p><p><img src="https://i.loli.net/2019/02/26/5c7542f86b719.png" alt="工具链路径设置"></p><p>完成后点击 Finish 由此完成工程项目的创建。创建完成后，我们可以看到还有一个报错， 如下图所示</p><p><img src="https://i.loli.net/2019/02/26/5c7543a17226b.png" alt="工程创建完成界面"></p><p>因此我们还需要继续对项目进行配置。</p><h2 id="工程相关配置"><a href="#工程相关配置" class="headerlink" title="工程相关配置"></a>工程相关配置</h2><p>对工程右键选择 “properties”，在 MCU 选栏中配置 Build Tools Path，该路径应指向您的 Build Tools 目录下的 bin 文件夹，如下图所示</p><p><img src="https://i.loli.net/2019/02/26/5c7544fd07eb8.png" alt="Build Tools 路径配置"></p><p>继续配置 OpenOCD Path，路径为 OpenOCD 目录下的 bin 文件夹，如下图所示，并点击apply</p><p><img src="https://i.loli.net/2019/02/26/5c75487c1f6cf.png" alt="OpenOCD 路径配置"></p><p>再配置 RISC-V Toolchain Path（若新建项目时已配置过工具链路径，可以跳过此步骤），配置路径与工程建立时选择的工具链路径相同。</p><h2 id="配置编译和链接选项"><a href="#配置编译和链接选项" class="headerlink" title="配置编译和链接选项"></a>配置编译和链接选项</h2><p>继续在 “properties” 窗口中，选择 C/C++ Build 中的 settings，在 Tool Settings 中 Target Processor 进行配置，由于是 RISC-V，因此架构 (architecture) 选择 RV32I 并勾选乘法指令拓展(RVM)，原子指令拓展(RVA)及压缩指令拓展(RVC)，ABI 调用选择 ILP32(表明为 32 位架构无浮点型，PS: ilp32f 和 ilp32d 则分别表示单精度浮点和双精度浮点)，Code Model 选择 Medium Low，勾选整数除法指令(-mdiv)，如下图所示，并点击 apply</p><p><img src="https://i.loli.net/2019/02/26/5c7548ff7b8fb.png" alt="Target Processor 配置"></p><p>继续配置 Optimization，Level 选择 -O2，如下图所示，并点击 apply</p><p><img src="https://i.loli.net/2019/02/26/5c7549557f2eb.png" alt="Optimization 配置"></p><p>继续配置 Debugging，Level 选择 -g，如下图所示，并点击 apply</p><p><img src="https://i.loli.net/2019/02/26/5c7549be00c12.png" alt="Debugging 配置"></p><p>在 Tool Settings 中选择 GNU RISC-V Cross C Linker 的 General，点击右上角+号，弹窗中选择 Workspace 选择路径您芯片对应的 lds 文件，用于对地址区间进行约束，如下图所示</p><p><img src="https://i.loli.net/2019/02/26/5c754a785cc2d.png" alt="链接脚本配置"></p><p>勾选对应选项后，点击 apply,如下图所示</p><p><img src="https://i.loli.net/2019/02/26/5c754ad5a9b74.png" alt="链接选项配置"></p><p>在 Tool Settings 中选择 GNU RISC-V Cross C Linker 的 Miscellaneous 进行勾选，如下图所示，并点击 apply</p><p><img src="https://i.loli.net/2019/02/26/5c754b533251d.png" alt="链接杂项配置"></p><p>添加您的工程汇编类型的头文件路径，方法如下图所示</p><p><img src="https://i.loli.net/2019/02/26/5c754c158df6a.png" alt="添加工程汇编头文件目录"></p><p>添加您的工程 C/C++ 类型的头文件路径，方法如下图所示</p><p><img src="https://i.loli.net/2019/02/26/5c754c158df6a.png" alt=" 添加工程 C/C++ 头文件目录"></p><p>待续… </p><p>后续测试进行中…</p><p>转载自 Kismet 的 Blog:<br><a href="https://blog.asicfans.com/2019/01/25/windows10-%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BA-risc-v-%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/" target="_blank" rel="noopener">https://blog.asicfans.com/2019/01/25/windows10-%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BA-risc-v-%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境要求&quot;&gt;&lt;a href=&quot;#环境要求&quot; class=&quot;headerlink&quot; title=&quot;环境要求&quot;&gt;&lt;/a&gt;环境要求&lt;/h2&gt;&lt;h3 id=&quot;软件环境&quot;&gt;&lt;a href=&quot;#软件环境&quot; class=&quot;headerlink&quot; title=&quot;软件环境&quot;&gt;&lt;/a&gt;软件环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;IDE: &lt;a href=&quot;https://github.com/gnu-mcu-eclipse/org.eclipse.epp.packages/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GNU MCU Eclipse IDE for C/C++ Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IDE 插件: &lt;a href=&quot;https://github.com/gnu-mcu-eclipse/eclipse-plugins/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GNU MCU Eclipse plug-ins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GCC/GDB 工具: &lt;a href=&quot;https://github.com/gnu-mcu-eclipse/riscv-none-gcc/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GNU MCU Eclipse RISC-V Embedded GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;调试工具: &lt;a href=&quot;https://github.com/gnu-mcu-eclipse/openocd/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GNU MCU Eclipse OpenOCD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;make 工具: &lt;a href=&quot;https://github.com/gnu-mcu-eclipse/windows-build-tools/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GNU MCU Eclipse Windows Build Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Zadig 工具: &lt;a href=&quot;https://zadig.akeo.ie/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Zadig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;硬件要求&quot;&gt;&lt;a href=&quot;#硬件要求&quot; class=&quot;headerlink&quot; title=&quot;硬件要求&quot;&gt;&lt;/a&gt;硬件要求&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;目标 RISC-V 芯片&lt;/li&gt;
&lt;li&gt;调试器： J-Link，FT2232 或其他含有标准 JTAG 接口的调试器&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="嵌入式" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="RISC-V" scheme="https://blog.strongwong.top/tags/RISC-V/"/>
    
  </entry>
  
  <entry>
    <title>使用汇编实现 pc 和 sp 的保存及恢复操作</title>
    <link href="https://blog.strongwong.top//posts/%E4%BD%BF%E7%94%A8%E6%B1%87%E7%BC%96%E5%AE%9E%E7%8E%B0-pc-%E5%92%8C-sp-%E7%9A%84%E4%BF%9D%E5%AD%98%E5%8F%8A%E6%81%A2%E5%A4%8D%E6%93%8D%E4%BD%9C.html"/>
    <id>https://blog.strongwong.top//posts/使用汇编实现-pc-和-sp-的保存及恢复操作.html</id>
    <published>2019-01-13T11:32:27.000Z</published>
    <updated>2019-01-13T13:53:18.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 ARM Cortex 系列的芯片中本来就有一套保护现场的机制，例如当产生了一个中断时，会自动将当前寄存器的值入栈，并在 lr（r14） 寄存器中保存将要返回的 pc 值，在中断服务程序执行完成后将 pc 恢复到之前的位置。如果在执行中断服务程序的时候又发生了优先级更高的中断，也就是说发生了中断嵌套，这是将再次进行现场保护，同时 lr 值会被压栈（上一次的 pc ），新的 lr 生成。</p><p>但是在一些场景下，这样的机制就不太好用了，比如说要进入 sleep 模式 cpu 掉电了，想要恢复到掉电前的状态。这样的话就需要我们自己实现保护现场了，下面就来简单介绍一下我的实现。</p><a id="more"></a><h2 id="硬件及-IDE-环境"><a href="#硬件及-IDE-环境" class="headerlink" title="硬件及 IDE 环境"></a>硬件及 IDE 环境</h2><ul><li>硬件: Cortex-M3 FPGA 开发板</li><li>IDE: IAR 8.22.1</li></ul><p>在进行 FPGA 验证之前，还跑了 RTL 的仿真，从仿真波形的结果来看也是正确的。</p><h2 id="c-文件"><a href="#c-文件" class="headerlink" title="c 文件"></a>c 文件</h2><p>现场保护主要就是保存当前的运行状态，在从 sleep 模式唤醒后将保存的状态恢复，使 cpu 回到到 sleep 之前的状态。在我们这里最主要的是保存 pc 和 sp 的值，cpu 唤醒之后恢复 pc 和 sp 就好，所以我们需要将进入 sleep 之前的 pc 和 sp 保存即可。</p><p>在进入 sleep 模式中，虽然 cpu 掉电了，但是 SRAM 还是维持着的，所以我们可以使用一个全局变量（存储在 SRAM 中）来保存 pc 和 sp 的值。</p><p>“xxx.c” 文件中部分代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数及变量的声明和引用</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">Save_PC_SP</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">Restore_PC_SP</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> u32 pc_save</span>;</span><br><span class="line"><span class="keyword">extern</span> u32 sp_save;</span><br><span class="line"></span><br><span class="line"><span class="comment">//······</span></span><br><span class="line"><span class="comment">// 在执行 sleep 指令（WFI/WFE）之前保存 pc、sp</span></span><br><span class="line">Save_PC_SP();    <span class="comment">// 保存 pc 和 sp</span></span><br><span class="line">__WFI();         <span class="comment">// 睡眠</span></span><br><span class="line">__NOP();</span><br><span class="line">__NOP();</span><br><span class="line">__NOP();</span><br><span class="line"></span><br><span class="line"><span class="comment">//······</span></span><br></pre></td></tr></table></figure><h2 id="s-汇编文件"><a href="#s-汇编文件" class="headerlink" title="s 汇编文件"></a>s 汇编文件</h2><p>“xxx.s”文件中的部分代码：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;函数及变量的声明和引用</span></span><br><span class="line"><span class="symbol">PUBLIC</span>  Save_PC_SP</span><br><span class="line"><span class="symbol">PUBLIC</span>  Restore_PC_SP</span><br><span class="line"></span><br><span class="line"><span class="symbol">IMPORT</span>  pc_save</span><br><span class="line"><span class="symbol">IMPORT</span>  sp_save</span><br><span class="line"></span><br><span class="line"><span class="comment">;唤醒后判断的代码</span></span><br><span class="line">    <span class="meta">THUMB</span></span><br><span class="line"></span><br><span class="line">    PUBWEAK Reset_Handler</span><br><span class="line">    SECTION <span class="meta">.text</span>:<span class="meta">CODE</span>:REORDER:NOROOT(<span class="number">2</span>)</span><br><span class="line"><span class="symbol">Reset_Handler</span></span><br><span class="line">    <span class="keyword">LDR </span><span class="built_in">R0</span>, <span class="number">=0x4001f000</span></span><br><span class="line">    <span class="keyword">LDR </span><span class="built_in">R1</span>, [<span class="built_in">R0</span>]</span><br><span class="line">    <span class="keyword">CMP </span><span class="built_in">R1</span>, <span class="number">#1</span></span><br><span class="line">    <span class="keyword">BEQ </span>__iar_program_start</span><br><span class="line">    <span class="keyword">B </span>  Restore_PC_SP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">;Save pc sp 的代码</span></span><br><span class="line"></span><br><span class="line">    SECTION <span class="meta">.text</span>:<span class="meta">CODE</span>:NOROOT</span><br><span class="line"><span class="symbol">Save_PC_SP</span></span><br><span class="line">    <span class="keyword">LDR </span><span class="built_in">R0</span>, <span class="number">=0x4001f000</span></span><br><span class="line">    <span class="keyword">MOV </span><span class="built_in">R1</span>, <span class="number">#1</span></span><br><span class="line">    <span class="keyword">STR </span><span class="built_in">R1</span>, [<span class="built_in">R0</span>]</span><br><span class="line">    <span class="keyword">LDR </span><span class="built_in">R0</span>, <span class="symbol">=sp_save</span></span><br><span class="line">    <span class="keyword">LDR </span><span class="built_in">R2</span>, <span class="symbol">=pc_save</span></span><br><span class="line">    <span class="keyword">MOV </span><span class="built_in">R1</span>, <span class="built_in">R13</span></span><br><span class="line">    <span class="keyword">STR </span><span class="built_in">R1</span>, [<span class="built_in">R0</span>]</span><br><span class="line">    <span class="keyword">MOV </span><span class="built_in">R1</span>, <span class="built_in">LR</span></span><br><span class="line">    <span class="keyword">STR </span><span class="built_in">R1</span>, [<span class="built_in">R2</span>]</span><br><span class="line">    <span class="keyword">BX </span> <span class="built_in">LR</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">;Restore pc sp 的代码</span></span><br><span class="line">    </span><br><span class="line">    SECTION <span class="meta">.text</span>:<span class="meta">CODE</span>:NOROOT</span><br><span class="line"><span class="symbol">Restore_PC_SP</span></span><br><span class="line">    <span class="keyword">LDR </span><span class="built_in">R0</span>,  <span class="symbol">=sp_save</span></span><br><span class="line">    <span class="keyword">LDR </span><span class="built_in">R1</span>,  [<span class="built_in">R0</span>]</span><br><span class="line">    <span class="keyword">MOV </span><span class="built_in">R13</span>, <span class="built_in">R1</span></span><br><span class="line">    <span class="keyword">LDR </span><span class="built_in">R0</span>,  <span class="symbol">=pc_save</span></span><br><span class="line">    <span class="keyword">LDR </span><span class="built_in">R1</span>,  [<span class="built_in">R0</span>]</span><br><span class="line">    <span class="keyword">ADD </span><span class="built_in">R1</span>,  <span class="built_in">R1</span>, <span class="number">#0x8</span></span><br><span class="line">    <span class="keyword">MOV </span><span class="built_in">PC</span>,  <span class="built_in">R1</span></span><br><span class="line">    <span class="keyword">NOP</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">NOP</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">NOP</span></span><br></pre></td></tr></table></figure><p>在汇编文件中主要实现的是 save 和 restore 的操作，以及恢复过程的判断。因为我们的设计是从睡眠唤醒是从 Reset 起来的，这就导致第一次 cpu 的正常启动会和 restore 发生冲突，所以我这里选择了一个不会掉电的寄存器来作为是否进行 restore 的判断。</p><p>还有就是加 NOP 指令是因为 Cortex-M3 是三级流水线，为了防止 cpu 因为 pc 的预取而发生错误。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在 ARM Cortex 系列的芯片中本来就有一套保护现场的机制，例如当产生了一个中断时，会自动将当前寄存器的值入栈，并在 lr（r14） 寄存器中保存将要返回的 pc 值，在中断服务程序执行完成后将 pc 恢复到之前的位置。如果在执行中断服务程序的时候又发生了优先级更高的中断，也就是说发生了中断嵌套，这是将再次进行现场保护，同时 lr 值会被压栈（上一次的 pc ），新的 lr 生成。&lt;/p&gt;
&lt;p&gt;但是在一些场景下，这样的机制就不太好用了，比如说要进入 sleep 模式 cpu 掉电了，想要恢复到掉电前的状态。这样的话就需要我们自己实现保护现场了，下面就来简单介绍一下我的实现。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="嵌入式" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="ARM" scheme="https://blog.strongwong.top/tags/ARM/"/>
    
      <category term="CM3" scheme="https://blog.strongwong.top/tags/CM3/"/>
    
  </entry>
  
  <entry>
    <title>数字 IC 设计流程</title>
    <link href="https://blog.strongwong.top//posts/%E6%95%B0%E5%AD%97-IC-%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B.html"/>
    <id>https://blog.strongwong.top//posts/数字-IC-设计流程.html</id>
    <published>2019-01-13T10:41:35.000Z</published>
    <updated>2019-01-13T13:47:31.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>最近即将开始要带着学弟们入门数字 IC 的设计，但很多学弟对于接下来要做什么是迷茫的，很多练就了各式各样的基本功却不知道如何施展，因此这里简单介绍一下数字 IC 设计的全过程及相关的设计工具及涉及到的相关职位，如果有写的不合适或者不正确的地方还请各位提出~</p><a id="more"></a><p>详见下图:</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E6%95%B0%E5%AD%97IC%E8%AE%BE%E8%AE%A1%E5%85%A8%E8%BF%87%E7%A8%8B%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7.png" alt=""></p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>看了上图之后很多学弟就又问了，那平时我们都是 vivado，quartus，FPGA …… 为啥感觉和上面的都不沾边呢，这里说一点个人的看法，如果不是做硬件并行加速或者 FPGA 的嵌入式开发，那么平日 FPGA 的最大作用就是 —— 功能验证性工具。因为流片的价格非常昂贵，很少有实验室或者学校会让你不断地流片来实现你的设计，另外的，一个实验室如果没有同时具备设计，验证，版图 ……（全栈）技能同学的话要想能流片（同时具备以上技能）其实也很难的。那么这时 FPGA 就可以验证你的设计是否在一定程度上是正确的。</p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>我们最后再来看一下数字前端的设计流程，如下图所示~</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E6%95%B0%E5%AD%97%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt=""></p><p>之前的 sdram 设计剩余部分,我们将尽快更新~</p><p><strong>By Ricky</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h2&gt;&lt;p&gt;最近即将开始要带着学弟们入门数字 IC 的设计，但很多学弟对于接下来要做什么是迷茫的，很多练就了各式各样的基本功却不知道如何施展，因此这里简单介绍一下数字 IC 设计的全过程及相关的设计工具及涉及到的相关职位，如果有写的不合适或者不正确的地方还请各位提出~&lt;/p&gt;
    
    </summary>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/categories/IC-Design/"/>
    
      <category term="其他" scheme="https://blog.strongwong.top/categories/IC-Design/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="IC Design" scheme="https://blog.strongwong.top/tags/IC-Design/"/>
    
  </entry>
  
  <entry>
    <title>SDRAM 两次踏进同一条河</title>
    <link href="https://blog.strongwong.top//posts/SDRAM-%E4%B8%A4%E6%AC%A1%E8%B8%8F%E8%BF%9B%E5%90%8C%E4%B8%80%E6%9D%A1%E6%B2%B3.html"/>
    <id>https://blog.strongwong.top//posts/SDRAM-两次踏进同一条河.html</id>
    <published>2018-12-06T12:48:31.000Z</published>
    <updated>2018-12-06T14:23:34.379Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>人不能两次踏进同一条河，但 SDRAM 可以</em><br><em>——SDRAM的刷新</em></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上周去了趟深圳，所以摸鱼拖更了，在那边发现真的是机遇越大的地方努力的脚步就越匆忙，某企业的 boss 是位国家科学技术奖的获得者，公司已经上市了，却依然吃 13 元的小店套餐，而且饭几乎是倒进嘴里的，5 分钟左右吃完马上就又去和合作对象谈判去了！<br>……<br>所以我们更要加油了，不然只会被大佬们越拉越远 …… 加油吧！</p><a id="more"></a><p>在初窥 sdram 中我们留了一个坑——首先我们在第一页就可以看到它的刷新周期是 64ms（这个重要参数将在后面进行具体介绍）<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/sdram_64ms.jpg" alt=""></p><p>今天我们就来填这个坑……</p><p>「人不能两次踏进同一条河流」是古希腊哲学家赫拉克利特说的。阐述「变」的哲学在米利都学派和毕达戈拉斯学派之后，爱菲斯的赫拉克利特创立了一种变的哲学。他的哲学充满了辩证法思想，对后来辩证法的发展产生过重大影响。</p><p>他形象地表达了他关于变的思想，说：「太阳每天都是新的。」他把存在的东西比作一条河，声称人不能两次踏进同一条河。因为当人第二次进入这条河时，是新的水流而不是原来的水流在流淌。SDRAM 不断地刷新，但却能保证刷新后的数据与刷新前一致，人踏进河是为什么我不知道，但是 SDRAM 正是为了保证内部电容的电量最终实现数据的不丢失才会不断地刷新。我们人做不到的事，就用 RTL 让 SDRAM 帮我们做了吧。</p><h2 id="参数分析"><a href="#参数分析" class="headerlink" title="参数分析"></a>参数分析</h2><p>首先我们来看 SDRAM 参数：8K Refresh Cycles/64 ms，意味着：</p><ul><li>刷新速率 = 64ms / 8192 行 =&gt; 7us；</li><li>刷新时钟周期 = 7us * CPU 运行频率；</li></ul><p>例：CPU 运行频率 50MHz 时钟周期 = 7.81us * 50MHz = 390.5；64ms 为刷新周期最大值，为保证可靠运行，实际刷新实间要稍小于 64ms；例：时钟周期 = 390.5 ≈ 380</p><p>这就意味着每 380 个时钟周期，我们便需要对我们的 SDRAM 进行一次刷新，那么进行刷新的时候需要进行哪些操作呢？我们还是回到我们的数据手册中。<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/auto-refresh.jpg" alt=""></p><p>如图示，我们可以看到首先是要进行一次预充电操作(precharge)（同时选中所有的 bank），在经过 tRP 延时后进行一次自刷新操作(auto refresh)，再经过一次 tRC 后又进行一次自刷新操作(auto refresh)【注：实际使用中可以只进行一次自刷新操作】，最后进入到我们下一步 ……</p><p>那么根据第一篇《初窥 SDRAM》后我们知道以上的几个操作对应的指令码分别为：</p><table><thead><tr><th style="text-align:center">CMD</th><th style="text-align:center">CS</th><th style="text-align:center">RAS</th><th style="text-align:center">CAS</th><th style="text-align:center">WE</th></tr></thead><tbody><tr><td style="text-align:center">Precharge</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">Auto-Refresh</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">Nop</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table><p>延时 tRP，tRC 则分别对应 15ns（至少 1 个周期，实际操作中取 1 个周期），60ns （至少 3 个周期，实际操作中取 4 个周期）。</p><p>那么我们的设计即可为：一个 8us 的定时器，控制刷新的周期，作为刷新的开始信号；一个命令计数器，用于记录对应的延时节点（tRP，tRC）；最后即为达到对应节点输出对应指令即可。</p><p>由此踏进的河流变和 8us 前的河流是同一条河流的 ……</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>具体实现代码如下:<br>上代码！</p><font color="#FF4500"> <div><div class="fold_hider"><div class="close hider_title">sdram_autoref.v</div></div><div class="fold"><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">File name: sdram_autoref</span></span><br><span class="line"><span class="comment">Function: Auto refresh for IS42S16320D-7TL SDRAM</span></span><br><span class="line"><span class="comment">Module name: sdram_autoref</span></span><br><span class="line"><span class="comment">Author: Ricky</span></span><br><span class="line"><span class="comment">Time: 20181130</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> sdram_autoref(</span><br><span class="line"><span class="comment">//system signals</span></span><br><span class="line"><span class="keyword">input</span>                   sys_clk    ,</span><br><span class="line"><span class="keyword">input</span>                   sys_rst_n  ,</span><br><span class="line"></span><br><span class="line"><span class="comment">//others</span></span><br><span class="line"><span class="keyword">input</span>                   init_flag  ,</span><br><span class="line"><span class="keyword">input</span>                   ref_en     ,</span><br><span class="line"></span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span>              ref_req    ,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>             ref_flag   ,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span>   [<span class="number">3</span>:<span class="number">0</span>]      cmd_reg    ,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>  [<span class="number">12</span>:<span class="number">0</span>] sdram_addr  </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*============================================================================== </span></span><br><span class="line"><span class="comment">**********************Define Parameter and inside Signals***********************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Note: sys_clk=50MHz</span></span><br><span class="line"><span class="comment">      tRP|min=15ns &gt;&gt;&gt; 20ns &gt;&gt;&gt; 1sys_clk &gt;&gt;&gt; [4:0] cnt_cmd</span></span><br><span class="line"><span class="comment">      tRC|min=60ns &gt;&gt;&gt; 80ns &gt;&gt;&gt; 4sys_clk &gt;&gt;&gt; [4:0] cnt_cmd</span></span><br><span class="line"><span class="comment">      8K refresh cycles every 64ms &gt;&gt;&gt; 8us &gt;&gt;&gt; 380sys_clk</span></span><br><span class="line"><span class="comment">===============================================================================*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">4</span>:<span class="number">0</span>]     cnt_cmd      ;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">8</span>:<span class="number">0</span>]     cnt_ref      ;</span><br><span class="line"><span class="keyword">reg</span>         flag_ref     ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">localparam</span> delay_8us = <span class="number">380</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//define sdram autorefresh cmd</span></span><br><span class="line"><span class="keyword">localparam</span>  precharge    = <span class="number">4'b0010</span>;</span><br><span class="line"><span class="keyword">localparam</span>  auto_refresh = <span class="number">4'b0001</span>;</span><br><span class="line"><span class="keyword">localparam</span>  nop          = <span class="number">4'b0111</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*============================================================================== </span></span><br><span class="line"><span class="comment">**********************************Main Logic************************************</span></span><br><span class="line"><span class="comment">==============================================================================*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//auto_refresh counter</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> sys_rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(~sys_rst_n)</span><br><span class="line">        cnt_ref &lt;= <span class="number">9'b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(cnt_ref &gt;= delay_8us)</span><br><span class="line">            cnt_ref &lt;= <span class="number">9'b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(init_flag == <span class="number">1'b1</span>)</span><br><span class="line">            cnt_ref &lt;= cnt_ref + <span class="number">1'b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ref flag signal</span></span><br><span class="line"><span class="keyword">always</span>  @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> sys_rst_n) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(sys_rst_n == <span class="number">1'b0</span>)</span><br><span class="line">                flag_ref        &lt;=      <span class="number">1'b0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ref_flag == <span class="number">1'b1</span>)</span><br><span class="line">                flag_ref        &lt;=      <span class="number">1'b0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ref_en == <span class="number">1'b1</span>)</span><br><span class="line">                flag_ref        &lt;=      <span class="number">1'b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//cmd counter</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> sys_rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(~sys_rst_n) </span><br><span class="line">        cnt_cmd &lt;= <span class="number">4'd0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (flag_ref == <span class="number">1'b1</span>)</span><br><span class="line">             cnt_cmd &lt;= cnt_cmd + <span class="number">1'b1</span>; </span><br><span class="line">    <span class="keyword">else</span>     cnt_cmd &lt;= <span class="number">4'b0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//cmd</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> sys_rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(~sys_rst_n) </span><br><span class="line">        cmd_reg &lt;= nop;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">case</span>(cnt_cmd)</span><br><span class="line">            <span class="number">1</span>:       cmd_reg &lt;= precharge;</span><br><span class="line">            <span class="number">2</span>:       cmd_reg &lt;= auto_refresh;</span><br><span class="line">            <span class="number">6</span>:       cmd_reg &lt;= auto_refresh;</span><br><span class="line">            <span class="keyword">default</span>  cmd_reg &lt;= nop;</span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//request signal(8K refresh cycles every 64ms &gt;&gt;&gt; 8us &gt;&gt;&gt; 380sys_clk)</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> sys_rst_n)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(~sys_rst_n)</span><br><span class="line">        ref_req &lt;= <span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ref_en)</span><br><span class="line">        ref_req &lt;= <span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(cnt_ref &gt;= delay_8us)</span><br><span class="line">        ref_req &lt;= <span class="number">1'b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> sdram_addr = <span class="number">13'b0010000000000</span>;</span><br><span class="line"><span class="keyword">assign</span> ref_flag   = (cnt_cmd &gt;= <span class="number">9</span>)? <span class="number">1'b1</span> : <span class="number">1'b0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div></div><br></font><p>实现后我们可以看到毎 8us 完成一次所有 bank 的刷新</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/vsimrun.jpg" alt=""></p><h2 id="仿真波形"><a href="#仿真波形" class="headerlink" title="仿真波形"></a>仿真波形</h2><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/refresh-wave.jpg" alt=""><br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/refresh-wave1.jpg" alt=""></p><p><strong>By Ricky</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;人不能两次踏进同一条河，但 SDRAM 可以&lt;/em&gt;&lt;br&gt;&lt;em&gt;——SDRAM的刷新&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上周去了趟深圳，所以摸鱼拖更了，在那边发现真的是机遇越大的地方努力的脚步就越匆忙，某企业的 boss 是位国家科学技术奖的获得者，公司已经上市了，却依然吃 13 元的小店套餐，而且饭几乎是倒进嘴里的，5 分钟左右吃完马上就又去和合作对象谈判去了！&lt;br&gt;……&lt;br&gt;所以我们更要加油了，不然只会被大佬们越拉越远 …… 加油吧！&lt;/p&gt;
    
    </summary>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/categories/IC-Design/"/>
    
      <category term="SDRAM" scheme="https://blog.strongwong.top/categories/IC-Design/SDRAM/"/>
    
    
      <category term="SDRAM" scheme="https://blog.strongwong.top/tags/SDRAM/"/>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/tags/IC-Design/"/>
    
  </entry>
  
  <entry>
    <title>初窥 SDRAM</title>
    <link href="https://blog.strongwong.top//posts/%E5%88%9D%E7%AA%A5-SDRAM.html"/>
    <id>https://blog.strongwong.top//posts/初窥-SDRAM.html</id>
    <published>2018-11-24T09:21:08.000Z</published>
    <updated>2018-12-06T14:06:12.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上次挖的坑现在来填，在我们把 SDRAM 控制器接进 AHB 总线之前，我们先来设计一个 SDRAM 控制器。</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/hexo_img.jpg" alt=""></p><a id="more"></a><p>引用知乎上看见的一段话：</p><blockquote><p>在做这个 SDRAM 控制器之前，博主有一个疑问，对于学生来说，是否有必要学习用纯 Verilog 写一个 SDRAM 控制器？因为目前广告厂（X）和牙膏厂（A）都有了 DDR IP Core，而 SDRAM 的控制 IP 更是漫天飞舞，对于要实现一个应用可以直接调用 IP Core，只需要对其接口操作即可。对于开发者来说，与其费时费力用 Verilog 去写一个性能差而且老的 SDRAM 控制器，还不如直接调用官方经过打磨的更为先进 IP Core。所以博主特地来号称平均学历 211，平均月薪 7、8 万的知（bi）乎提出了这个问题，得到的解答博主总结大致如下。</p><p>对于学生这个身份来说，应该是要以学习为主要目的，虽然说目前企业为了加快项目进度会直接使用 IP Core，但是我们以学为本的初衷不应该为了避过难点而直接不去尝试，就比如我们刚开始学 Verilog 的时候肯定都会写过分频器，那么为什么不直接去学更简单精度更高 PLL IP Core 呢？从一个新手逐渐成长成一个老手都是由简单到复杂，由基础到提升，这是一个必经的过程。这也就是很多高校还是会开设汇编语言编写单片机的课程，学 FPGA 全用 IP Core 和学单片机全用库函数是一个道理。这是其一。</p><p>第二，写一个 SDRAM 控制器还是可以锻炼一些典型的技能。</p><ul><li>看官方文档</li><li>根据时序图设计 SDRAM 逻辑，使用状态机</li><li>配合仿真模型写测试仿真</li><li>调试，提高频率，让你的 SDRAM 跑的更快</li><li>研究时序约束</li></ul><p>这一套做下来，你就可以提高一个层次了，经历过和没经历过是有质的区别。其实博主在提问的时候心中早已有了答案，只是还没有足够的信念去完成这个事情，当时看到很多业界前辈都支持去写的时候，博主心里也是比较开心的。之前博主已经学一些 SDRAM 的基础知识，只是当时水平还不够，没有坚持下去，心里一直不甘。趁着最近两个月之内没有什么事情要忙，所以决定要再次死磕 SDRAM。</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="SDRAM-基本介绍"><a href="#SDRAM-基本介绍" class="headerlink" title="SDRAM 基本介绍"></a>SDRAM 基本介绍</h3><p>关于 SDRAM 的基本概念，在这再引用《终极内存指南》这篇文章中的一段话:</p><blockquote><p>SDRAM（Synchronous Dynamic Random Access Memory），同步动态随机存储器。同步是指 Memory 工作需要同步时钟，内部的命令的发送与数据的传输都以它为基准；动态是指存储阵列需要不断刷新来保证存储的数据不丢失，因为 SDRAM 中存储数据是通过电容来工作的，大家知道电容在自然放置状态是会有放电的，如果电放完了，也就意味着 SDRAM 中的数据丢失了，所以 SDRAM 需要在电容的电量放完之前进行刷新；随机是指数据不是线性依次存储，而是自由指定地址进行数据的读写。</p></blockquote><p>下面再简单看一下 SDRAM 的内部结构。<br>对于 SDRAM 的内容结构，就如同 Excel 的表格（如下图所示），即一个单元格就是一个存储地址。要确定具体的存储位置，只需要知道行地址（row-address ）和列地址（column address ）即可。<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/Excel.jpg" alt="excel"></p><p>一个常见的 SDRAM 中的一个 BANK 就有如上图所示的 13 行 9 列，通常一个 SDRAM 中有 4 个 BANK，那么 SDRAM（DDR 类似）的计算公式就是：</p><blockquote><p>SDRAM(DDR容量) = 2^(row-address) × 2^(column-address) × 2^(bank-address) × datawidth<br>= 2^(row-address) × 2^(column-address) × bank数 × datawidth</p></blockquote><p>以 DE10-LITE 开发板板载的 SDRAM-IS42S16320D-7TL 为例，标称为 64MB。根据芯片手册（如下图所示）我们可以看见其行地址宽度为 13，列地址宽度为 9（此时数据位宽为 32），则根据公式我们可以算出其容量确实为 64MB</p><blockquote><p>2^13 × 2^9 × 4 × 32 = 536870912 b<br>⇒ 536870912 b ÷ 1024 = 524288 kb<br>⇒ 524288 kb ÷ 1024 = 512 Mb<br>⇒ 512 Mb ÷ 8 = 64 MB</p></blockquote><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/DE10_lite_sdram.jpg" alt=""></p><h3 id="SDRAM-芯片介绍"><a href="#SDRAM-芯片介绍" class="headerlink" title="SDRAM 芯片介绍"></a>SDRAM 芯片介绍</h3><p>既然都打开了芯片手册（IS42S16320D-7TL），那就不要关上了，那我们再来看看芯片手册中的那些重要参数。<br>首先我们在第一页就可以看到它的刷新周期是 64ms（这个重要参数将在后面进行具体介绍）<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/sdram_64ms.jpg" alt=""></p><p>在上文中我们已经提到了该芯片的行地址和列地址，我们需要注意的是其行列地址是复用的，其他相关引脚的功能描述都有介绍。<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/IS42S16320D_7TL_sdram.jpg" alt=""></p><h3 id="SDRAM-的初始化及寄存器的配置"><a href="#SDRAM-的初始化及寄存器的配置" class="headerlink" title="SDRAM 的初始化及寄存器的配置"></a>SDRAM 的初始化及寄存器的配置</h3><p>SDRAM 初始化时序图如图所示，首先上电后，电源 Vcc 及 CLK 稳定时间至少 100us，然后对所有 BANK 进行预充电（precharge），经过 tRP 后给 auto refresh 命令，再经过 tRC 后再次 auto refresh 命令，再进过 tRC 后进行模式寄存器的配置。<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/sdram_%E6%97%B6%E5%BA%8F.jpg" alt=""></p><p>那么以上命令是如何实现的呢，当时就是给与相应管脚的高低电平控制，由此实现，那么这就回到了我们数电的功能真值表（在之前我们就有提到过，数字 IC 终归是数字电路，不要把它搞成了编程项目），我们将下图的真值表以使用顺序总结为表格形式，方便接下来的 RTL 表述。<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/%E7%9C%9F%E5%80%BC%E8%A1%A8.jpg" alt=""></p><table><thead><tr><th style="text-align:center">CMD</th><th style="text-align:center">CS</th><th style="text-align:center">RAS</th><th style="text-align:center">CAS</th><th style="text-align:center">WE</th></tr></thead><tbody><tr><td style="text-align:center">Precharge</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">Auto-Refresh</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">Nop</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">Mode</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table><p>在了解到命令描述后我们还需要注意时间的间隔，在时序图中只告知了我们 T = 100us，而其余的 tRP，tRC，tMRD 均未告诉我们，这是因为通常一个芯片手册中有多种型号的芯片，因此我们需要去查看 AC characteristic 表格，根据芯片型号去确定时间。我们的板载芯片型号为 IS42S16320D-7TL，因此我们选择 <code>-7</code> 对应的时间，则 tRP = 15ns，tRC = 60ns，tMRD = 14ns</p><p>接下来我们就要进入到模式配置，模式配置的配置说明如下图所示：<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/Mode_reg_config.jpg" alt=""></p><p>A0-A2 为突发长度控制，即表示单次读或者写的时候的数据『长度』，本次突发长度参数我们设为 010。A3 突发模式通常设为 0。A4-A6 为潜伏期控制，专门针对读命令时，当给出读命令后，若有设置 CAS latency 则会延迟相应的周期数后给出数据，本次潜伏期参数我们设为 011，A9 突发模式通常设为 0。则最终我们初始化设置参数为 13’b0_0000_0011_0010</p><p>至此，我们便可以开始着手设计我们的初始化模块了，首先时序图上 T = 100us Min，则我们取 200us = 200,000ns 在不经过 PLL 的前提下，DE10LITE 开发板默认提供的时钟频率为 50MHz，则一个周期为 20ns，因此 T 延时可以取 10,000clk。延时后我们执行 precharge 命令。之后执行 tRP = 15ns Min，我们的 tRP 延迟就可以取 1clk（至少满足 15ns 的最低要求），然后执行 auto refresh 命令，tRC = 60ns Min 则延迟可取为 4clk，然后再次执行 auto refresh 命令，在这期间一共 9 个 clk。具体的设计可以首先设计一个 200us 的不自清零的计数器；设计一个对应的 200us 计数器标志位；针对 tRP 和 tRC 设计一个计数器，分别实现监测计数到对应的周期发出对应的命令；命令寄存器用来存放对应的命令；最后完成初始化操作后给一个初始化完成的标志位信号。</p><p>下面是具体实现的描述语言：</p><font color="#FF4500"> <div><div class="fold_hider"><div class="close hider_title">sdram_init.v</div></div><div class="fold"><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">File name: sdram_init</span></span><br><span class="line"><span class="comment">Function: Power on initialization for IS42S16320D-7TL SDRAM</span></span><br><span class="line"><span class="comment">Module name: sdram_init</span></span><br><span class="line"><span class="comment">Author: Ricky</span></span><br><span class="line"><span class="comment">Time: 20181119</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> sdram_init(</span><br><span class="line"><span class="comment">//system signals</span></span><br><span class="line"><span class="keyword">input</span>sys_clk,</span><br><span class="line"><span class="keyword">input</span>sys_rst_n,</span><br><span class="line"></span><br><span class="line"><span class="comment">//others</span></span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span>    [<span class="number">3</span>:<span class="number">0</span>] cmd_reg,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>    [<span class="number">12</span>:<span class="number">0</span>] sdram_addr,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>init_flag</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*============================================================================== </span></span><br><span class="line"><span class="comment">**********************Define Parameter and inside Signals***********************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Note: syssys_clk=50MHz</span></span><br><span class="line"><span class="comment">T|min=100us &gt;&gt;&gt; 200us=200,000ns &gt;&gt;&gt; 10,000sys_clk &gt;&gt;&gt; [13:0] cnt_200us</span></span><br><span class="line"><span class="comment">tRP|min=15ns &gt;&gt;&gt; 20ns &gt;&gt;&gt; 1sys_clk &gt;&gt;&gt; [4:0] cnt_cmd</span></span><br><span class="line"><span class="comment">tRC|min=60ns &gt;&gt;&gt; 80ns &gt;&gt;&gt; 4sys_clk &gt;&gt;&gt; [4:0] cnt_cmd</span></span><br><span class="line"><span class="comment">===============================================================================*/</span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">13</span>:<span class="number">0</span>] cnt_200us;</span><br><span class="line"><span class="keyword">wire</span> cnt_200us_flag;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">4</span>:<span class="number">0</span>]cnt_cmd;</span><br><span class="line"></span><br><span class="line"><span class="comment">//define sdram initial cmd</span></span><br><span class="line"><span class="keyword">localparam</span>precharge    = <span class="number">4'b0010</span>;</span><br><span class="line"><span class="keyword">localparam</span>auto_refresh = <span class="number">4'b0001</span>;</span><br><span class="line"><span class="keyword">localparam</span>nop = <span class="number">4'b0111</span>;</span><br><span class="line"><span class="keyword">localparam</span> modeset = <span class="number">4'b0000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*============================================================================== </span></span><br><span class="line"><span class="comment">**********************************Main Logic************************************</span></span><br><span class="line"><span class="comment">==============================================================================*/</span></span><br><span class="line"><span class="comment">//T=200us  counter</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> sys_rst_n) <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(~sys_rst_n)</span><br><span class="line">cnt_200us &lt;= <span class="number">13'd0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span>(cnt_200us_flag == <span class="number">1'b0</span>)</span><br><span class="line">cnt_200us &lt;= cnt_200us + <span class="number">1'b1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cnt_200us &lt;= cnt_200us;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//cmd counter</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> sys_rst_n) <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(~sys_rst_n) </span><br><span class="line">cnt_cmd &lt;= <span class="number">4'd0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> (cnt_200us_flag == <span class="number">1'b1</span> &amp;&amp; init_flag == <span class="number">1'b0</span>)</span><br><span class="line">cnt_cmd &lt;= cnt_cmd + <span class="number">1'b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//cmd</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> sys_rst_n) <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(~sys_rst_n) </span><br><span class="line">cmd_reg &lt;= nop;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span>(cnt_200us_flag == <span class="number">1'b1</span>)</span><br><span class="line"><span class="keyword">case</span>(cnt_cmd)</span><br><span class="line"><span class="number">0</span>: cmd_reg &lt;= precharge;</span><br><span class="line"><span class="number">1</span>: cmd_reg &lt;= auto_refresh;</span><br><span class="line"><span class="number">5</span>: cmd_reg &lt;= auto_refresh;</span><br><span class="line"><span class="number">9</span>: cmd_reg &lt;= modeset;</span><br><span class="line"><span class="keyword">default</span>:         cmd_reg &lt;= nop;</span><br><span class="line"><span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> cnt_200us_flag = (cnt_200us &gt;= <span class="number">10000</span>) ? <span class="number">1'b1</span>:<span class="number">1'b0</span>;</span><br><span class="line"><span class="keyword">assign</span> init_flag = (cnt_cmd &gt;= <span class="number">9</span>) ? <span class="number">1'b1</span>:<span class="number">1'b0</span>;</span><br><span class="line"><span class="keyword">assign</span> sdram_addr = (cmd_reg == modeset) ? <span class="number">13'b0000000110010</span> : <span class="number">13'b0010000000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div></div><br></font><font color="#FF4500"> <div><div class="fold_hider"><div class="close hider_title">sdram_top.v</div></div><div class="fold"><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">File name: sdram_top</span></span><br><span class="line"><span class="comment">Author: Ricky</span></span><br><span class="line"><span class="comment">Time: 20181121</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">module</span> sdram(</span><br><span class="line"><span class="comment">//system signals</span></span><br><span class="line"><span class="keyword">input</span>sys_clk,</span><br><span class="line"><span class="keyword">input</span>sys_rst_n,</span><br><span class="line"><span class="comment">//sdram pin</span></span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>sdram_clk,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>     [<span class="number">12</span>:<span class="number">0</span>]sdram_addr,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>     [<span class="number">1</span>:<span class="number">0</span>] sdram_bank,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>sdram_cas_n,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>sdram_cke,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>sdram_cs_n,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>[<span class="number">1</span>:<span class="number">0</span>]sdram_dqm,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>sdram_ras_n,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>sdram_we_n,</span><br><span class="line"></span><br><span class="line"><span class="keyword">inout</span>[<span class="number">15</span>:<span class="number">0</span>]sdram_dq</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*============================================================================== </span></span><br><span class="line"><span class="comment">**********************Define Parameter and inside Signals***********************</span></span><br><span class="line"><span class="comment">===============================================================================*/</span></span><br><span class="line"><span class="keyword">wire</span> init_flag;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">3</span>:<span class="number">0</span>] init_cmd_reg;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">12</span>:<span class="number">0</span>] init_addr;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*============================================================================== </span></span><br><span class="line"><span class="comment">**********************************Main Logic************************************</span></span><br><span class="line"><span class="comment">==============================================================================*/</span></span><br><span class="line"><span class="keyword">assign</span> sdram_addr = init_addr;</span><br><span class="line"><span class="keyword">assign</span> &#123;sdram_cs_n, sdram_ras_n, sdram_cas_n, sdram_we_n&#125; = init_cmd_reg;</span><br><span class="line"><span class="keyword">assign</span> sdram_clk = ~sys_clk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> sdram_dqm = <span class="number">2'b00</span>;</span><br><span class="line"><span class="keyword">assign</span> sdram_cke = <span class="number">1'b1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//instantiating sdram_init module</span></span><br><span class="line">sdram_init sdram_init(</span><br><span class="line"><span class="comment">//system signals</span></span><br><span class="line">.sys_clk(sys_clk),</span><br><span class="line">.sys_rst_n(sys_rst_n),</span><br><span class="line"><span class="comment">//others</span></span><br><span class="line">.cmd_reg(init_cmd_reg),</span><br><span class="line">.sdram_addr(init_addr),</span><br><span class="line">.init_flag       (init_flag)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div></div><br></font><font color="#FF4500"> <div><div class="fold_hider"><div class="close hider_title">sdram_tb.v</div></div><div class="fold"><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">File name: sdram_tb</span></span><br><span class="line"><span class="comment">Function: Testbench for power on initialization for IS42S16320D-7TL SDRAM</span></span><br><span class="line"><span class="comment">Author: Ricky</span></span><br><span class="line"><span class="comment">Time: 20181123</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns/1ns</span></span><br><span class="line"><span class="keyword">module</span> sdram_tb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>sys_clk;</span><br><span class="line"><span class="keyword">reg</span> sys_rst_n;</span><br><span class="line"><span class="keyword">wire</span>sdram_clk;</span><br><span class="line"><span class="keyword">wire</span>[<span class="number">12</span>:<span class="number">0</span>]sdram_addr;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">1</span>:<span class="number">0</span>] sdram_bank;</span><br><span class="line"><span class="keyword">wire</span>sdram_cas_n;</span><br><span class="line"><span class="keyword">wire</span>sdram_cke;</span><br><span class="line"><span class="keyword">wire</span>sdram_cs_n;</span><br><span class="line"><span class="keyword">wire</span>[<span class="number">1</span>:<span class="number">0</span>]sdram_dqm;</span><br><span class="line"><span class="keyword">wire</span>sdram_ras_n;</span><br><span class="line"><span class="keyword">wire</span>sdram_we_n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span>[<span class="number">15</span>:<span class="number">0</span>]sdram_dq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">sys_clk = <span class="number">1</span>;</span><br><span class="line">sys_rst_n &lt;= <span class="number">0</span>;</span><br><span class="line">#<span class="number">100</span></span><br><span class="line">sys_rst_n &lt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 20ns/clock</span></span><br><span class="line"><span class="keyword">always</span> #<span class="number">10</span> sys_clk = ~sys_clk;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* defparamsdram_model_plus.addr_bits =13;</span></span><br><span class="line"><span class="comment">defparamsdram_model_plus.data_bits = 16;</span></span><br><span class="line"><span class="comment">defparamsdram_model_plus.col_bits  =9 ;</span></span><br><span class="line"><span class="comment">defparamsdram_model_plus.mem_sizes =2*1024*1024; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//instantiating sdram_init module</span></span><br><span class="line">sdram sdraminit(</span><br><span class="line"><span class="comment">//system signals</span></span><br><span class="line"><span class="variable">.sys_clk</span>                 (sys_clk  ),</span><br><span class="line"><span class="variable">.sys_rst_n</span>               (sys_rst_n),</span><br><span class="line"><span class="comment">//sdram pin</span></span><br><span class="line"><span class="variable">.sdram_clk</span>               (sdram_clk),</span><br><span class="line"><span class="variable">.sdram_addr</span>              (sdram_addr),</span><br><span class="line"><span class="variable">.sdram_bank</span>              (sdram_bank),</span><br><span class="line"><span class="variable">.sdram_cas_n</span>             (sdram_cas_n),</span><br><span class="line"><span class="variable">.sdram_cke</span>               (sdram_cke),</span><br><span class="line"><span class="variable">.sdram_cs_n</span>              (sdram_cs_n),</span><br><span class="line"><span class="variable">.sdram_dqm</span>               (sdram_dqm),</span><br><span class="line"><span class="variable">.sdram_ras_n</span>             (sdram_ras_n),</span><br><span class="line"><span class="variable">.sdram_we_n</span>              (sdram_we_n),</span><br><span class="line"></span><br><span class="line"><span class="variable">.sdram_dq</span>                 (sdram_dq)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//instantiating sdram_model module</span></span><br><span class="line">sdram_model_plus sdram(</span><br><span class="line"><span class="variable">.Dq</span>(sdram_dq), </span><br><span class="line"><span class="variable">.Addr</span>(sdram_addr), </span><br><span class="line"><span class="variable">.Ba</span>(sdram_bank), </span><br><span class="line"><span class="variable">.Clk</span>(sdram_clk), </span><br><span class="line"><span class="variable">.Cke</span>(sdram_cke), </span><br><span class="line"><span class="variable">.Cs_n</span>(sdram_cs_n), </span><br><span class="line"><span class="variable">.Ras_n</span>(sdram_ras_n), </span><br><span class="line"><span class="variable">.Cas_n</span>(sdram_cas_n), </span><br><span class="line"><span class="variable">.We_n</span>(sdram_we_n), </span><br><span class="line"><span class="variable">.Dqm</span>(sdram_dqm),</span><br><span class="line"><span class="variable">.Debug</span>(<span class="number">1'b1</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div></div><br></font><p>仿真模型（见附件）一共有两个分别是镁光官方仿真模型以及国内大神基于镁光模型进行修改后便于调试的版本，使用任意一版均可。这里我采用的是 sdram_model.v</p><font color="#FF4500"> <div><div class="fold_hider"><div class="close hider_title">sdram_model.v</div></div><div class="fold"><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***************************************************************************************</span></span><br><span class="line"><span class="comment">作者：    李晟</span></span><br><span class="line"><span class="comment">2003-08-27    V0.1    李晟 </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 添加内存模块倒空功能，在外部需要创建事件：sdram_r ,本SDRAM的内容将会按Bank 顺序damp out 至文件</span></span><br><span class="line"><span class="comment"> sdram_data.txt 中</span></span><br><span class="line"><span class="comment">×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××*/</span></span><br><span class="line"><span class="comment">//2004-03-04    陈乃奎    修改原程序中将BANK的数据转存入TXT文件的格式</span></span><br><span class="line"><span class="comment">//2004-03-16    陈乃奎    修改SDRAM 的初始化数据</span></span><br><span class="line"><span class="comment">//2004/04/06    陈乃奎    将SDRAM的操作命令以字符形式表示，以便用MODELSIM监视</span></span><br><span class="line"><span class="comment">//2004/04/19    陈乃奎    修改参数 parameter tAC  =   8;</span></span><br><span class="line"><span class="comment">//2010/09/17    罗瑶    修改sdram的大小，数据位宽，dqm宽度;</span></span><br><span class="line"><span class="comment">/****************************************************************************************</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*    File Name:  sdram_model.V  </span></span><br><span class="line"><span class="comment">*      Version:  0.0f</span></span><br><span class="line"><span class="comment">*         Date:  July 8th, 1999</span></span><br><span class="line"><span class="comment">*        Model:  BUS Functional</span></span><br><span class="line"><span class="comment">*    Simulator:  Model Technology (PC version 5.2e PE)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Dependencies:  None</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*       Author:  Son P. Huynh</span></span><br><span class="line"><span class="comment">*        Email:  sphuynh@micron.com</span></span><br><span class="line"><span class="comment">*        Phone:  (208) 368-3825</span></span><br><span class="line"><span class="comment">*      Company:  Micron Technology, Inc.</span></span><br><span class="line"><span class="comment">*        Model:  sdram_model (1Meg x 16 x 4 Banks)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  Description:  64Mb SDRAM Verilog model</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   Limitation:  - Doesn't check for 4096 cycle refresh</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*         Note:  - Set simulator resolution to "ps" accuracy</span></span><br><span class="line"><span class="comment">*                - Set Debug = 0 to disable $display messages</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   Disclaimer:  THESE DESIGNS ARE PROVIDED "AS IS" WITH NO WARRANTY </span></span><br><span class="line"><span class="comment">*                WHATSOEVER AND MICRON SPECIFICALLY DISCLAIMS ANY </span></span><br><span class="line"><span class="comment">*                IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR</span></span><br><span class="line"><span class="comment">*                A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*                Copyright ?1998 Micron Semiconductor Products, Inc.</span></span><br><span class="line"><span class="comment">*                All rights researved</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Rev   Author          Phone         Date        Changes</span></span><br><span class="line"><span class="comment">* ----  ----------------------------  ----------  ---------------------------------------</span></span><br><span class="line"><span class="comment">* 0.0f  Son Huynh       208-368-3825  07/08/1999  - Fix tWR = 1 Clk + 7.5 ns (Auto)</span></span><br><span class="line"><span class="comment">*       Micron Technology Inc.                    - Fix tWR = 15 ns (Manual)</span></span><br><span class="line"><span class="comment">*                                                 - Fix tRP (Autoprecharge to AutoRefresh)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 0.0a  Son Huynh       208-368-3825  05/13/1998  - First Release (from 64Mb rev 0.0e)</span></span><br><span class="line"><span class="comment">*       Micron Technology Inc.</span></span><br><span class="line"><span class="comment">****************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns / 100ps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> sdram_model_plus (Dq, Addr, Ba, Clk, Cke, Cs_n, Ras_n, Cas_n, We_n, Dqm,Debug);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">parameter</span> addr_bits =    <span class="number">13</span>;</span><br><span class="line">    <span class="keyword">parameter</span> data_bits =    <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">parameter</span> col_bits  =    <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">parameter</span> mem_sizes =    <span class="number">4</span>*<span class="number">1024</span>*<span class="number">1024</span> -<span class="number">1</span>;<span class="comment">//1 Meg </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">inout</span>     [data_bits - <span class="number">1</span> : <span class="number">0</span>] Dq;</span><br><span class="line">    <span class="keyword">input</span>     [addr_bits - <span class="number">1</span> : <span class="number">0</span>] Addr;</span><br><span class="line">    <span class="keyword">input</span>                 [<span class="number">1</span> : <span class="number">0</span>] Ba;</span><br><span class="line">    <span class="keyword">input</span>                         Clk;</span><br><span class="line">    <span class="keyword">input</span>                         Cke;</span><br><span class="line">    <span class="keyword">input</span>                         Cs_n;</span><br><span class="line">    <span class="keyword">input</span>                         Ras_n;</span><br><span class="line">    <span class="keyword">input</span>                         Cas_n;</span><br><span class="line">    <span class="keyword">input</span>                         We_n;</span><br><span class="line">    <span class="keyword">input</span>                 [<span class="number">1</span> : <span class="number">0</span>] Dqm;          <span class="comment">//高低各8bit</span></span><br><span class="line">    <span class="comment">//added by xzli</span></span><br><span class="line">    <span class="keyword">input</span>              Debug;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span>       [data_bits - <span class="number">1</span> : <span class="number">0</span>] Bank0 [<span class="number">0</span> : mem_sizes];<span class="comment">//存储器类型数据</span></span><br><span class="line">    <span class="keyword">reg</span>       [data_bits - <span class="number">1</span> : <span class="number">0</span>] Bank1 [<span class="number">0</span> : mem_sizes];</span><br><span class="line">    <span class="keyword">reg</span>       [data_bits - <span class="number">1</span> : <span class="number">0</span>] Bank2 [<span class="number">0</span> : mem_sizes];</span><br><span class="line">    <span class="keyword">reg</span>       [data_bits - <span class="number">1</span> : <span class="number">0</span>] Bank3 [<span class="number">0</span> : mem_sizes];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span>                   [<span class="number">1</span> : <span class="number">0</span>] Bank_addr [<span class="number">0</span> : <span class="number">3</span>];                <span class="comment">// Bank Address Pipeline</span></span><br><span class="line">    <span class="keyword">reg</span>        [col_bits - <span class="number">1</span> : <span class="number">0</span>] Col_addr [<span class="number">0</span> : <span class="number">3</span>];                 <span class="comment">// Column Address Pipeline</span></span><br><span class="line">    <span class="keyword">reg</span>                   [<span class="number">3</span> : <span class="number">0</span>] Command [<span class="number">0</span> : <span class="number">3</span>];                  <span class="comment">// Command Operation Pipeline</span></span><br><span class="line">    <span class="keyword">reg</span>                   [<span class="number">3</span> : <span class="number">0</span>] Dqm_reg0, Dqm_reg1;               <span class="comment">// DQM Operation Pipeline</span></span><br><span class="line">    <span class="keyword">reg</span>       [addr_bits - <span class="number">1</span> : <span class="number">0</span>] B0_row_addr, B1_row_addr, B2_row_addr, B3_row_addr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span>       [addr_bits - <span class="number">1</span> : <span class="number">0</span>] Mode_reg;</span><br><span class="line">    <span class="keyword">reg</span>       [data_bits - <span class="number">1</span> : <span class="number">0</span>] Dq_reg, Dq_dqm;</span><br><span class="line">    <span class="keyword">reg</span>       [col_bits - <span class="number">1</span> : <span class="number">0</span>] Col_temp, Burst_counter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span>                           Act_b0, Act_b1, Act_b2, Act_b3;   <span class="comment">// Bank Activate</span></span><br><span class="line">    <span class="keyword">reg</span>                           Pc_b0, Pc_b1, Pc_b2, Pc_b3;       <span class="comment">// Bank Precharge</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span>                   [<span class="number">1</span> : <span class="number">0</span>] Bank_precharge     [<span class="number">0</span> : <span class="number">3</span>];       <span class="comment">// Precharge Command</span></span><br><span class="line">    <span class="keyword">reg</span>                           A10_precharge      [<span class="number">0</span> : <span class="number">3</span>];       <span class="comment">// Addr[10] = 1 (All banks)</span></span><br><span class="line">    <span class="keyword">reg</span>                           Auto_precharge     [<span class="number">0</span> : <span class="number">3</span>];       <span class="comment">// RW AutoPrecharge (Bank)</span></span><br><span class="line">    <span class="keyword">reg</span>                           Read_precharge     [<span class="number">0</span> : <span class="number">3</span>];       <span class="comment">// R  AutoPrecharge</span></span><br><span class="line">    <span class="keyword">reg</span>                           Write_precharge    [<span class="number">0</span> : <span class="number">3</span>];       <span class="comment">//  W AutoPrecharge</span></span><br><span class="line">    <span class="keyword">integer</span>                       Count_precharge    [<span class="number">0</span> : <span class="number">3</span>];       <span class="comment">// RW AutoPrecharge (Counter)</span></span><br><span class="line">    <span class="keyword">reg</span>                           RW_interrupt_read  [<span class="number">0</span> : <span class="number">3</span>];       <span class="comment">// RW Interrupt Read with Auto Precharge</span></span><br><span class="line">    <span class="keyword">reg</span>                           RW_interrupt_write [<span class="number">0</span> : <span class="number">3</span>];       <span class="comment">// RW Interrupt Write with Auto Precharge</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span>                           Data_in_enable;</span><br><span class="line">    <span class="keyword">reg</span>                           Data_out_enable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span>                   [<span class="number">1</span> : <span class="number">0</span>] Bank, Previous_bank;</span><br><span class="line">    <span class="keyword">reg</span>       [addr_bits - <span class="number">1</span> : <span class="number">0</span>] Row;</span><br><span class="line">    <span class="keyword">reg</span>        [col_bits - <span class="number">1</span> : <span class="number">0</span>] Col, Col_brst;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Internal system clock</span></span><br><span class="line">    <span class="keyword">reg</span>                           CkeZ, Sys_clk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span>    [<span class="number">24</span>:<span class="number">0</span>]    dd;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Commands Decode</span></span><br><span class="line">    <span class="keyword">wire</span>      Active_enable    = ~Cs_n &amp; ~Ras_n &amp;  Cas_n &amp;  We_n;</span><br><span class="line">    <span class="keyword">wire</span>      Aref_enable      = ~Cs_n &amp; ~Ras_n &amp; ~Cas_n &amp;  We_n;</span><br><span class="line">    <span class="keyword">wire</span>      Burst_term       = ~Cs_n &amp;  Ras_n &amp;  Cas_n &amp; ~We_n;</span><br><span class="line">    <span class="keyword">wire</span>      Mode_reg_enable  = ~Cs_n &amp; ~Ras_n &amp; ~Cas_n &amp; ~We_n;</span><br><span class="line">    <span class="keyword">wire</span>      Prech_enable     = ~Cs_n &amp; ~Ras_n &amp;  Cas_n &amp; ~We_n;</span><br><span class="line">    <span class="keyword">wire</span>      Read_enable      = ~Cs_n &amp;  Ras_n &amp; ~Cas_n &amp;  We_n;</span><br><span class="line">    <span class="keyword">wire</span>      Write_enable     = ~Cs_n &amp;  Ras_n &amp; ~Cas_n &amp; ~We_n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Burst Length Decode</span></span><br><span class="line">    <span class="keyword">wire</span>      Burst_length_1   = ~Mode_reg[<span class="number">2</span>] &amp; ~Mode_reg[<span class="number">1</span>] &amp; ~Mode_reg[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">wire</span>      Burst_length_2   = ~Mode_reg[<span class="number">2</span>] &amp; ~Mode_reg[<span class="number">1</span>] &amp;  Mode_reg[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">wire</span>      Burst_length_4   = ~Mode_reg[<span class="number">2</span>] &amp;  Mode_reg[<span class="number">1</span>] &amp; ~Mode_reg[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">wire</span>      Burst_length_8   = ~Mode_reg[<span class="number">2</span>] &amp;  Mode_reg[<span class="number">1</span>] &amp;  Mode_reg[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CAS Latency Decode</span></span><br><span class="line">    <span class="keyword">wire</span>      Cas_latency_2    = ~Mode_reg[<span class="number">6</span>] &amp;  Mode_reg[<span class="number">5</span>] &amp; ~Mode_reg[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">wire</span>      Cas_latency_3    = ~Mode_reg[<span class="number">6</span>] &amp;  Mode_reg[<span class="number">5</span>] &amp;  Mode_reg[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write Burst Mode</span></span><br><span class="line">    <span class="keyword">wire</span>      Write_burst_mode = Mode_reg[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">wire</span>      Debug;        <span class="comment">// Debug messages : 1 = On; 0 = Off</span></span><br><span class="line">    <span class="keyword">wire</span>      Dq_chk           = Sys_clk &amp; Data_in_enable;      <span class="comment">// Check setup/hold time for DQ</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span>        [<span class="number">31</span>:<span class="number">0</span>]    mem_d;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">event</span>    sdram_r,sdram_w,compare;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">assign</span>    Dq               = Dq_reg;                        <span class="comment">// DQ buffer</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Commands Operation</span></span><br><span class="line">    <span class="meta">`<span class="meta-keyword">define</span>   ACT       0</span></span><br><span class="line">    <span class="meta">`<span class="meta-keyword">define</span>   NOP       1</span></span><br><span class="line">    <span class="meta">`<span class="meta-keyword">define</span>   READ      2</span></span><br><span class="line">    <span class="meta">`<span class="meta-keyword">define</span>   READ_A    3</span></span><br><span class="line">    <span class="meta">`<span class="meta-keyword">define</span>   WRITE     4</span></span><br><span class="line">    <span class="meta">`<span class="meta-keyword">define</span>   WRITE_A   5</span></span><br><span class="line">    <span class="meta">`<span class="meta-keyword">define</span>   PRECH     6</span></span><br><span class="line">    <span class="meta">`<span class="meta-keyword">define</span>   A_REF     7</span></span><br><span class="line">    <span class="meta">`<span class="meta-keyword">define</span>   BST       8</span></span><br><span class="line">    <span class="meta">`<span class="meta-keyword">define</span>   LMR       9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    // Timing Parameters for -75 (PC133) and CAS Latency = 2</span></span><br><span class="line"><span class="comment">//    parameter tAC  =   8;    //test 6.5</span></span><br><span class="line"><span class="comment">//    parameter tHZ  =   7.0;</span></span><br><span class="line"><span class="comment">//    parameter tOH  =   2.7;</span></span><br><span class="line"><span class="comment">//    parameter tMRD =   2.0;     // 2 Clk Cycles</span></span><br><span class="line"><span class="comment">//    parameter tRAS =  44.0;</span></span><br><span class="line"><span class="comment">//    parameter tRC  =  66.0;</span></span><br><span class="line"><span class="comment">//    parameter tRCD =  20.0;</span></span><br><span class="line"><span class="comment">//    parameter tRP  =  20.0;</span></span><br><span class="line"><span class="comment">//    parameter tRRD =  15.0;</span></span><br><span class="line"><span class="comment">//    parameter tWRa =   7.5;     // A2 Version - Auto precharge mode only (1 Clk + 7.5 ns)</span></span><br><span class="line"><span class="comment">//    parameter tWRp =  0.0;     // A2 Version - Precharge mode only (15 ns)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Timing Parameters for -7 (PC143) and CAS Latency = 3</span></span><br><span class="line">    <span class="keyword">parameter</span> tAC  =   <span class="number">6</span><span class="variable">.5</span>;    <span class="comment">//test 6.5</span></span><br><span class="line">    <span class="keyword">parameter</span> tHZ  =   <span class="number">5</span><span class="variable">.5</span>;</span><br><span class="line">    <span class="keyword">parameter</span> tOH  =   <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">parameter</span> tMRD =   <span class="number">2</span><span class="variable">.0</span>;     <span class="comment">// 2 Clk Cycles</span></span><br><span class="line">    <span class="keyword">parameter</span> tRAS =  <span class="number">48</span><span class="variable">.0</span>;</span><br><span class="line">    <span class="keyword">parameter</span> tRC  =  <span class="number">70</span><span class="variable">.0</span>;</span><br><span class="line">    <span class="keyword">parameter</span> tRCD =  <span class="number">20</span><span class="variable">.0</span>;</span><br><span class="line">    <span class="keyword">parameter</span> tRP  =  <span class="number">20</span><span class="variable">.0</span>;</span><br><span class="line">    <span class="keyword">parameter</span> tRRD =  <span class="number">14</span><span class="variable">.0</span>;</span><br><span class="line">    <span class="keyword">parameter</span> tWRa =   <span class="number">7</span><span class="variable">.5</span>;     <span class="comment">// A2 Version - Auto precharge mode only (1 Clk + 7.5 ns)</span></span><br><span class="line">    <span class="keyword">parameter</span> tWRp =  <span class="number">0</span><span class="variable">.0</span>;     <span class="comment">// A2 Version - Precharge mode only (15 ns)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Timing Check variable</span></span><br><span class="line">    <span class="keyword">integer</span>   MRD_chk;</span><br><span class="line">    <span class="keyword">integer</span>   WR_counter [<span class="number">0</span> : <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">time</span>      WR_chk [<span class="number">0</span> : <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">time</span>      RC_chk, RRD_chk;</span><br><span class="line">    <span class="keyword">time</span>      RAS_chk0, RAS_chk1, RAS_chk2, RAS_chk3;</span><br><span class="line">    <span class="keyword">time</span>      RCD_chk0, RCD_chk1, RCD_chk2, RCD_chk3;</span><br><span class="line">    <span class="keyword">time</span>      RP_chk0, RP_chk1, RP_chk2, RP_chk3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">integer</span>    test_file;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//*****display the command of the sdram**************************************</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">parameter</span>    Mode_Reg_Set    =<span class="number">4'b0000</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    Auto_Refresh    =<span class="number">4'b0001</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    Row_Active    =<span class="number">4'b0011</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    Pre_Charge    =<span class="number">4'b0010</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    PreCharge_All    =<span class="number">4'b0010</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    Write        =<span class="number">4'b0100</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    Write_Pre    =<span class="number">4'b0100</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    Read        =<span class="number">4'b0101</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    Read_Pre    =<span class="number">4'b0101</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    Burst_Stop    =<span class="number">4'b0110</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    Nop        =<span class="number">4'b0111</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    Dsel        =<span class="number">4'b1111</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">wire</span>    [<span class="number">3</span>:<span class="number">0</span>]    sdram_control;</span><br><span class="line">    <span class="keyword">reg</span>            cke_temp;</span><br><span class="line">    <span class="keyword">reg</span>        [<span class="number">8</span>*<span class="number">13</span>:<span class="number">1</span>]    sdram_command;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">always</span>@(<span class="keyword">posedge</span> Clk)</span><br><span class="line">    cke_temp&lt;=Cke;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span>    sdram_control=&#123;Cs_n,Ras_n,Cas_n,We_n&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span>@(sdram_control <span class="keyword">or</span> cke_temp)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span>(sdram_control)</span><br><span class="line">            Mode_Reg_Set:    sdram_command&lt;=<span class="string">"Mode_Reg_Set"</span>;</span><br><span class="line">            Auto_Refresh:    sdram_command&lt;=<span class="string">"Auto_Refresh"</span>;</span><br><span class="line">            Row_Active:    sdram_command&lt;=<span class="string">"Row_Active"</span>;</span><br><span class="line">            Pre_Charge:    sdram_command&lt;=<span class="string">"Pre_Charge"</span>;</span><br><span class="line">            Burst_Stop:    sdram_command&lt;=<span class="string">"Burst_Stop"</span>;</span><br><span class="line">            Dsel:        sdram_command&lt;=<span class="string">"Dsel"</span>;</span><br><span class="line"></span><br><span class="line">            Write:        <span class="keyword">if</span>(cke_temp==<span class="number">1</span>)</span><br><span class="line">                        sdram_command&lt;=<span class="string">"Write"</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        sdram_command&lt;=<span class="string">"Write_suspend"</span>;</span><br><span class="line">                        </span><br><span class="line">            Read:        <span class="keyword">if</span>(cke_temp==<span class="number">1</span>)</span><br><span class="line">                        sdram_command&lt;=<span class="string">"Read"</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        sdram_command&lt;=<span class="string">"Read_suspend"</span>;</span><br><span class="line">                        </span><br><span class="line">            Nop:        <span class="keyword">if</span>(cke_temp==<span class="number">1</span>)</span><br><span class="line">                        sdram_command&lt;=<span class="string">"Nop"</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        sdram_command&lt;=<span class="string">"Self_refresh"</span>;</span><br><span class="line">                        </span><br><span class="line">            <span class="keyword">default</span>:    sdram_command&lt;=<span class="string">"Power_down"</span>;</span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//*****************************************************</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">initial</span> </span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">        <span class="comment">//test_file=$fopen("test_file.txt");</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">initial</span> </span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">        Dq_reg = &#123;data_bits&#123;<span class="number">1'bz</span>&#125;&#125;;</span><br><span class="line">        &#123;Data_in_enable, Data_out_enable&#125; = <span class="number">0</span>;</span><br><span class="line">        &#123;Act_b0, Act_b1, Act_b2, Act_b3&#125; = <span class="number">4'b0000</span>;</span><br><span class="line">        &#123;Pc_b0, Pc_b1, Pc_b2, Pc_b3&#125; = <span class="number">4'b0000</span>;</span><br><span class="line">        &#123;WR_chk[<span class="number">0</span>], WR_chk[<span class="number">1</span>], WR_chk[<span class="number">2</span>], WR_chk[<span class="number">3</span>]&#125; = <span class="number">0</span>;</span><br><span class="line">        &#123;WR_counter[<span class="number">0</span>], WR_counter[<span class="number">1</span>], WR_counter[<span class="number">2</span>], WR_counter[<span class="number">3</span>]&#125; = <span class="number">0</span>;</span><br><span class="line">        &#123;RW_interrupt_read[<span class="number">0</span>], RW_interrupt_read[<span class="number">1</span>], RW_interrupt_read[<span class="number">2</span>], RW_interrupt_read[<span class="number">3</span>]&#125; = <span class="number">0</span>;</span><br><span class="line">        &#123;RW_interrupt_write[<span class="number">0</span>], RW_interrupt_write[<span class="number">1</span>], RW_interrupt_write[<span class="number">2</span>], RW_interrupt_write[<span class="number">3</span>]&#125; = <span class="number">0</span>;</span><br><span class="line">        &#123;MRD_chk, RC_chk, RRD_chk&#125; = <span class="number">0</span>;</span><br><span class="line">        &#123;RAS_chk0, RAS_chk1, RAS_chk2, RAS_chk3&#125; = <span class="number">0</span>;</span><br><span class="line">        &#123;RCD_chk0, RCD_chk1, RCD_chk2, RCD_chk3&#125; = <span class="number">0</span>;</span><br><span class="line">        &#123;RP_chk0, RP_chk1, RP_chk2, RP_chk3&#125; = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">$timeformat</span> (-<span class="number">9</span>, <span class="number">0</span>, <span class="string">" ns"</span>, <span class="number">12</span>);</span><br><span class="line">        <span class="comment">//$readmemh("bank0.txt", Bank0);</span></span><br><span class="line">        <span class="comment">//$readmemh("bank1.txt", Bank1);</span></span><br><span class="line">        <span class="comment">//$readmemh("bank2.txt", Bank2);</span></span><br><span class="line">        <span class="comment">//$readmemh("bank3.txt", Bank3);</span></span><br><span class="line"><span class="comment">/*      </span></span><br><span class="line"><span class="comment">       for(dd=0;dd&lt;=mem_sizes;dd=dd+1)</span></span><br><span class="line"><span class="comment">            begin</span></span><br><span class="line"><span class="comment">                Bank0[dd]=dd[data_bits - 1 : 0];</span></span><br><span class="line"><span class="comment">                Bank1[dd]=dd[data_bits - 1 : 0]+1;</span></span><br><span class="line"><span class="comment">                Bank2[dd]=dd[data_bits - 1 : 0]+2;</span></span><br><span class="line"><span class="comment">                Bank3[dd]=dd[data_bits - 1 : 0]+3;</span></span><br><span class="line"><span class="comment">            end</span></span><br><span class="line"><span class="comment">*/</span>            </span><br><span class="line">      initial_sdram(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">task</span>    initial_sdram; </span><br><span class="line"> </span><br><span class="line">         <span class="keyword">input</span>        data_sign;</span><br><span class="line">         <span class="keyword">reg</span>    [<span class="number">3</span>:<span class="number">0</span>]    data_sign;</span><br><span class="line">          </span><br><span class="line">               <span class="keyword">for</span>(dd=<span class="number">0</span>;dd&lt;=mem_sizes;dd=dd+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                mem_d = &#123;data_sign,data_sign,data_sign,data_sign,data_sign,data_sign,data_sign,data_sign&#125;;</span><br><span class="line">                <span class="keyword">if</span>(data_bits==<span class="number">16</span>)</span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        Bank0[dd]=mem_d[<span class="number">15</span>:<span class="number">0</span>];</span><br><span class="line">                        Bank1[dd]=mem_d[<span class="number">15</span>:<span class="number">0</span>];</span><br><span class="line">                        Bank2[dd]=mem_d[<span class="number">15</span>:<span class="number">0</span>];</span><br><span class="line">                        Bank3[dd]=mem_d[<span class="number">15</span>:<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(data_bits==<span class="number">32</span>)</span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        Bank0[dd]=mem_d[<span class="number">31</span>:<span class="number">0</span>];</span><br><span class="line">                        Bank1[dd]=mem_d[<span class="number">31</span>:<span class="number">0</span>];</span><br><span class="line">                        Bank2[dd]=mem_d[<span class="number">31</span>:<span class="number">0</span>];</span><br><span class="line">                        Bank3[dd]=mem_d[<span class="number">31</span>:<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span>    </span><br><span class="line">          </span><br><span class="line">               <span class="keyword">endtask</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// System clock generator</span></span><br><span class="line">    <span class="keyword">always</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">               @(<span class="keyword">posedge</span> Clk)</span><br><span class="line">                   <span class="keyword">begin</span></span><br><span class="line">                        Sys_clk = CkeZ;</span><br><span class="line">                        CkeZ = Cke;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            @(<span class="keyword">negedge</span> Clk) </span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                        Sys_clk = <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @ (<span class="keyword">posedge</span> Sys_clk) <span class="keyword">begin</span></span><br><span class="line">        <span class="comment">// Internal Commamd Pipelined</span></span><br><span class="line">        Command[<span class="number">0</span>] = Command[<span class="number">1</span>];</span><br><span class="line">        Command[<span class="number">1</span>] = Command[<span class="number">2</span>];</span><br><span class="line">        Command[<span class="number">2</span>] = Command[<span class="number">3</span>];</span><br><span class="line">        Command[<span class="number">3</span>] = <span class="meta">`NOP;</span></span><br><span class="line"></span><br><span class="line">        Col_addr[<span class="number">0</span>] = Col_addr[<span class="number">1</span>];</span><br><span class="line">        Col_addr[<span class="number">1</span>] = Col_addr[<span class="number">2</span>];</span><br><span class="line">        Col_addr[<span class="number">2</span>] = Col_addr[<span class="number">3</span>];</span><br><span class="line">        Col_addr[<span class="number">3</span>] = &#123;col_bits&#123;<span class="number">1'b0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">        Bank_addr[<span class="number">0</span>] = Bank_addr[<span class="number">1</span>];</span><br><span class="line">        Bank_addr[<span class="number">1</span>] = Bank_addr[<span class="number">2</span>];</span><br><span class="line">        Bank_addr[<span class="number">2</span>] = Bank_addr[<span class="number">3</span>];</span><br><span class="line">        Bank_addr[<span class="number">3</span>] = <span class="number">2'b0</span>;</span><br><span class="line"></span><br><span class="line">        Bank_precharge[<span class="number">0</span>] = Bank_precharge[<span class="number">1</span>];</span><br><span class="line">        Bank_precharge[<span class="number">1</span>] = Bank_precharge[<span class="number">2</span>];</span><br><span class="line">        Bank_precharge[<span class="number">2</span>] = Bank_precharge[<span class="number">3</span>];</span><br><span class="line">        Bank_precharge[<span class="number">3</span>] = <span class="number">2'b0</span>;</span><br><span class="line"></span><br><span class="line">        A10_precharge[<span class="number">0</span>] = A10_precharge[<span class="number">1</span>];</span><br><span class="line">        A10_precharge[<span class="number">1</span>] = A10_precharge[<span class="number">2</span>];</span><br><span class="line">        A10_precharge[<span class="number">2</span>] = A10_precharge[<span class="number">3</span>];</span><br><span class="line">        A10_precharge[<span class="number">3</span>] = <span class="number">1'b0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Dqm pipeline for Read</span></span><br><span class="line">        Dqm_reg0 = Dqm_reg1;</span><br><span class="line">        Dqm_reg1 = Dqm;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read or Write with Auto Precharge Counter</span></span><br><span class="line">        <span class="keyword">if</span> (Auto_precharge[<span class="number">0</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">            Count_precharge[<span class="number">0</span>] = Count_precharge[<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> (Auto_precharge[<span class="number">1</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">            Count_precharge[<span class="number">1</span>] = Count_precharge[<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> (Auto_precharge[<span class="number">2</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">            Count_precharge[<span class="number">2</span>] = Count_precharge[<span class="number">2</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> (Auto_precharge[<span class="number">3</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">            Count_precharge[<span class="number">3</span>] = Count_precharge[<span class="number">3</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// tMRD Counter</span></span><br><span class="line">        MRD_chk = MRD_chk + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// tWR Counter for Write</span></span><br><span class="line">        WR_counter[<span class="number">0</span>] = WR_counter[<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">        WR_counter[<span class="number">1</span>] = WR_counter[<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        WR_counter[<span class="number">2</span>] = WR_counter[<span class="number">2</span>] + <span class="number">1</span>;</span><br><span class="line">        WR_counter[<span class="number">3</span>] = WR_counter[<span class="number">3</span>] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Auto Refresh</span></span><br><span class="line">        <span class="keyword">if</span> (Aref_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t AREF : Auto Refresh"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="comment">// Auto Refresh to Auto Refresh</span></span><br><span class="line">            <span class="keyword">if</span> ((<span class="built_in">$time</span> - RC_chk &lt; tRC)&amp;&amp;Debug) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRC violation during Auto Refresh"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Precharge to Auto Refresh</span></span><br><span class="line">            <span class="keyword">if</span> ((<span class="built_in">$time</span> - RP_chk0 &lt; tRP || <span class="built_in">$time</span> - RP_chk1 &lt; tRP || <span class="built_in">$time</span> - RP_chk2 &lt; tRP || <span class="built_in">$time</span> - RP_chk3 &lt; tRP)&amp;&amp;Debug) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRP violation during Auto Refresh"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Precharge to Refresh</span></span><br><span class="line">            <span class="keyword">if</span> (Pc_b0 == <span class="number">1'b0</span> || Pc_b1 == <span class="number">1'b0</span> || Pc_b2 == <span class="number">1'b0</span> || Pc_b3 == <span class="number">1'b0</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: All banks must be Precharge before Auto Refresh"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Record Current tRC time</span></span><br><span class="line">            RC_chk = <span class="built_in">$time</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Load Mode Register</span></span><br><span class="line">        <span class="keyword">if</span> (Mode_reg_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">// Decode CAS Latency, Burst Length, Burst Type, and Write Burst Mode</span></span><br><span class="line">            <span class="keyword">if</span> (Pc_b0 == <span class="number">1'b1</span> &amp;&amp; Pc_b1 == <span class="number">1'b1</span> &amp;&amp; Pc_b2 == <span class="number">1'b1</span> &amp;&amp; Pc_b3 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                Mode_reg = Addr;</span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="keyword">begin</span></span><br><span class="line">                    <span class="built_in">$display</span> (<span class="string">"at time %t LMR  : Load Mode Register"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                    <span class="comment">// CAS Latency</span></span><br><span class="line">                    <span class="keyword">if</span> (Addr[<span class="number">6</span> : <span class="number">4</span>] == <span class="number">3'b010</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            CAS Latency      = 2"</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (Addr[<span class="number">6</span> : <span class="number">4</span>] == <span class="number">3'b011</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            CAS Latency      = 3"</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            CAS Latency      = Reserved"</span>);</span><br><span class="line">                    <span class="comment">// Burst Length</span></span><br><span class="line">                    <span class="keyword">if</span> (Addr[<span class="number">2</span> : <span class="number">0</span>] == <span class="number">3'b000</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Burst Length     = 1"</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (Addr[<span class="number">2</span> : <span class="number">0</span>] == <span class="number">3'b001</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Burst Length     = 2"</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (Addr[<span class="number">2</span> : <span class="number">0</span>] == <span class="number">3'b010</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Burst Length     = 4"</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (Addr[<span class="number">2</span> : <span class="number">0</span>] == <span class="number">3'b011</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Burst Length     = 8"</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (Addr[<span class="number">3</span> : <span class="number">0</span>] == <span class="number">4'b0111</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Burst Length     = Full"</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Burst Length     = Reserved"</span>);</span><br><span class="line">                    <span class="comment">// Burst Type</span></span><br><span class="line">                    <span class="keyword">if</span> (Addr[<span class="number">3</span>] == <span class="number">1'b0</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Burst Type       = Sequential"</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (Addr[<span class="number">3</span>] == <span class="number">1'b1</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Burst Type       = Interleaved"</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Burst Type       = Reserved"</span>);</span><br><span class="line">                    <span class="comment">// Write Burst Mode</span></span><br><span class="line">                    <span class="keyword">if</span> (Addr[<span class="number">9</span>] == <span class="number">1'b0</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Write Burst Mode = Programmed Burst Length"</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (Addr[<span class="number">9</span>] == <span class="number">1'b1</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Write Burst Mode = Single Location Access"</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Write Burst Mode = Reserved"</span>);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: all banks must be Precharge before Load Mode Register"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// REF to LMR</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">$time</span> - RC_chk &lt; tRC) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRC violation during Load Mode Register"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// LMR to LMR</span></span><br><span class="line">            <span class="keyword">if</span> (MRD_chk &lt; tMRD) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tMRD violation during Load Mode Register"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            MRD_chk = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Active Block (Latch Bank Address and Row Address)</span></span><br><span class="line">        <span class="keyword">if</span> (Active_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (Ba == <span class="number">2'b00</span> &amp;&amp; Pc_b0 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                &#123;Act_b0, Pc_b0&#125; = <span class="number">2'b10</span>;</span><br><span class="line">                B0_row_addr = Addr [addr_bits - <span class="number">1</span> : <span class="number">0</span>];</span><br><span class="line">                RCD_chk0 = <span class="built_in">$time</span>;</span><br><span class="line">                RAS_chk0 = <span class="built_in">$time</span>;</span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t ACT  : Bank = 0 Row = %d"</span>, <span class="built_in">$time</span>, Addr);</span><br><span class="line">                <span class="comment">// Precharge to Activate Bank 0</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">$time</span> - RP_chk0 &lt; tRP) <span class="keyword">begin</span></span><br><span class="line">                    <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRP violation during Activate bank 0"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Ba == <span class="number">2'b01</span> &amp;&amp; Pc_b1 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                &#123;Act_b1, Pc_b1&#125; = <span class="number">2'b10</span>;</span><br><span class="line">                B1_row_addr = Addr [addr_bits - <span class="number">1</span> : <span class="number">0</span>];</span><br><span class="line">                RCD_chk1 = <span class="built_in">$time</span>;</span><br><span class="line">                RAS_chk1 = <span class="built_in">$time</span>;</span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t ACT  : Bank = 1 Row = %d"</span>, <span class="built_in">$time</span>, Addr);</span><br><span class="line">                <span class="comment">// Precharge to Activate Bank 1</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">$time</span> - RP_chk1 &lt; tRP) <span class="keyword">begin</span></span><br><span class="line">                    <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRP violation during Activate bank 1"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Ba == <span class="number">2'b10</span> &amp;&amp; Pc_b2 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                &#123;Act_b2, Pc_b2&#125; = <span class="number">2'b10</span>;</span><br><span class="line">                B2_row_addr = Addr [addr_bits - <span class="number">1</span> : <span class="number">0</span>];</span><br><span class="line">                RCD_chk2 = <span class="built_in">$time</span>;</span><br><span class="line">                RAS_chk2 = <span class="built_in">$time</span>;</span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t ACT  : Bank = 2 Row = %d"</span>, <span class="built_in">$time</span>, Addr);</span><br><span class="line">                <span class="comment">// Precharge to Activate Bank 2</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">$time</span> - RP_chk2 &lt; tRP) <span class="keyword">begin</span></span><br><span class="line">                    <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRP violation during Activate bank 2"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Ba == <span class="number">2'b11</span> &amp;&amp; Pc_b3 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                &#123;Act_b3, Pc_b3&#125; = <span class="number">2'b10</span>;</span><br><span class="line">                B3_row_addr = Addr [addr_bits - <span class="number">1</span> : <span class="number">0</span>];</span><br><span class="line">                RCD_chk3 = <span class="built_in">$time</span>;</span><br><span class="line">                RAS_chk3 = <span class="built_in">$time</span>;</span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t ACT  : Bank = 3 Row = %d"</span>, <span class="built_in">$time</span>, Addr);</span><br><span class="line">                <span class="comment">// Precharge to Activate Bank 3</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">$time</span> - RP_chk3 &lt; tRP) <span class="keyword">begin</span></span><br><span class="line">                    <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRP violation during Activate bank 3"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Ba == <span class="number">2'b00</span> &amp;&amp; Pc_b0 == <span class="number">1'b0</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: Bank 0 is not Precharged."</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Ba == <span class="number">2'b01</span> &amp;&amp; Pc_b1 == <span class="number">1'b0</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: Bank 1 is not Precharged."</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Ba == <span class="number">2'b10</span> &amp;&amp; Pc_b2 == <span class="number">1'b0</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: Bank 2 is not Precharged."</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Ba == <span class="number">2'b11</span> &amp;&amp; Pc_b3 == <span class="number">1'b0</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: Bank 3 is not Precharged."</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Active Bank A to Active Bank B</span></span><br><span class="line">            <span class="keyword">if</span> ((Previous_bank != Ba) &amp;&amp; (<span class="built_in">$time</span> - RRD_chk &lt; tRRD)) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRRD violation during Activate bank = %d"</span>, <span class="built_in">$time</span>, Ba);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Load Mode Register to Active</span></span><br><span class="line">            <span class="keyword">if</span> (MRD_chk &lt; tMRD ) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tMRD violation during Activate bank = %d"</span>, <span class="built_in">$time</span>, Ba);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Auto Refresh to Activate</span></span><br><span class="line">            <span class="keyword">if</span> ((<span class="built_in">$time</span> - RC_chk &lt; tRC)&amp;&amp;Debug) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRC violation during Activate bank = %d"</span>, <span class="built_in">$time</span>, Ba);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Record variables for checking violation</span></span><br><span class="line">            RRD_chk = <span class="built_in">$time</span>;</span><br><span class="line">            Previous_bank = Ba;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Precharge Block</span></span><br><span class="line">        <span class="keyword">if</span> (Prech_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (Addr[<span class="number">10</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                &#123;Pc_b0, Pc_b1, Pc_b2, Pc_b3&#125; = <span class="number">4'b1111</span>;</span><br><span class="line">                &#123;Act_b0, Act_b1, Act_b2, Act_b3&#125; = <span class="number">4'b0000</span>;</span><br><span class="line">                RP_chk0 = <span class="built_in">$time</span>;</span><br><span class="line">                RP_chk1 = <span class="built_in">$time</span>;</span><br><span class="line">                RP_chk2 = <span class="built_in">$time</span>;</span><br><span class="line">                RP_chk3 = <span class="built_in">$time</span>;</span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t PRE  : Bank = ALL"</span>,<span class="built_in">$time</span>);</span><br><span class="line">                <span class="comment">// Activate to Precharge all banks</span></span><br><span class="line">                <span class="keyword">if</span> ((<span class="built_in">$time</span> - RAS_chk0 &lt; tRAS) || (<span class="built_in">$time</span> - RAS_chk1 &lt; tRAS) ||</span><br><span class="line">                    (<span class="built_in">$time</span> - RAS_chk2 &lt; tRAS) || (<span class="built_in">$time</span> - RAS_chk3 &lt; tRAS)) <span class="keyword">begin</span></span><br><span class="line">                    <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRAS violation during Precharge all bank"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="comment">// tWR violation check for write</span></span><br><span class="line">                <span class="keyword">if</span> ((<span class="built_in">$time</span> - WR_chk[<span class="number">0</span>] &lt; tWRp) || (<span class="built_in">$time</span> - WR_chk[<span class="number">1</span>] &lt; tWRp) ||</span><br><span class="line">                    (<span class="built_in">$time</span> - WR_chk[<span class="number">2</span>] &lt; tWRp) || (<span class="built_in">$time</span> - WR_chk[<span class="number">3</span>] &lt; tWRp)) <span class="keyword">begin</span></span><br><span class="line">                    <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tWR violation during Precharge all bank"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Addr[<span class="number">10</span>] == <span class="number">1'b0</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Ba == <span class="number">2'b00</span>) <span class="keyword">begin</span></span><br><span class="line">                    &#123;Pc_b0, Act_b0&#125; = <span class="number">2'b10</span>;</span><br><span class="line">                    RP_chk0 = <span class="built_in">$time</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t PRE  : Bank = 0"</span>,<span class="built_in">$time</span>);</span><br><span class="line">                    <span class="comment">// Activate to Precharge Bank 0</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">$time</span> - RAS_chk0 &lt; tRAS) <span class="keyword">begin</span></span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRAS violation during Precharge bank 0"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Ba == <span class="number">2'b01</span>) <span class="keyword">begin</span></span><br><span class="line">                    &#123;Pc_b1, Act_b1&#125; = <span class="number">2'b10</span>;</span><br><span class="line">                    RP_chk1 = <span class="built_in">$time</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t PRE  : Bank = 1"</span>,<span class="built_in">$time</span>);</span><br><span class="line">                    <span class="comment">// Activate to Precharge Bank 1</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">$time</span> - RAS_chk1 &lt; tRAS) <span class="keyword">begin</span></span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRAS violation during Precharge bank 1"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Ba == <span class="number">2'b10</span>) <span class="keyword">begin</span></span><br><span class="line">                    &#123;Pc_b2, Act_b2&#125; = <span class="number">2'b10</span>;</span><br><span class="line">                    RP_chk2 = <span class="built_in">$time</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t PRE  : Bank = 2"</span>,<span class="built_in">$time</span>);</span><br><span class="line">                    <span class="comment">// Activate to Precharge Bank 2</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">$time</span> - RAS_chk2 &lt; tRAS) <span class="keyword">begin</span></span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRAS violation during Precharge bank 2"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Ba == <span class="number">2'b11</span>) <span class="keyword">begin</span></span><br><span class="line">                    &#123;Pc_b3, Act_b3&#125; = <span class="number">2'b10</span>;</span><br><span class="line">                    RP_chk3 = <span class="built_in">$time</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t PRE  : Bank = 3"</span>,<span class="built_in">$time</span>);</span><br><span class="line">                    <span class="comment">// Activate to Precharge Bank 3</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">$time</span> - RAS_chk3 &lt; tRAS) <span class="keyword">begin</span></span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRAS violation during Precharge bank 3"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="comment">// tWR violation check for write</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">$time</span> - WR_chk[Ba] &lt; tWRp) <span class="keyword">begin</span></span><br><span class="line">                    <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tWR violation during Precharge bank %d"</span>, <span class="built_in">$time</span>, Ba);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Terminate a Write Immediately (if same bank or all banks)</span></span><br><span class="line">            <span class="keyword">if</span> (Data_in_enable == <span class="number">1'b1</span> &amp;&amp; (Bank == Ba || Addr[<span class="number">10</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">                Data_in_enable = <span class="number">1'b0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Precharge Command Pipeline for Read</span></span><br><span class="line">            <span class="keyword">if</span> (Cas_latency_3 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                Command[<span class="number">2</span>] = <span class="meta">`PRECH;</span></span><br><span class="line">                Bank_precharge[<span class="number">2</span>] = Ba;</span><br><span class="line">                A10_precharge[<span class="number">2</span>] = Addr[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Cas_latency_2 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                Command[<span class="number">1</span>] = <span class="meta">`PRECH;</span></span><br><span class="line">                Bank_precharge[<span class="number">1</span>] = Ba;</span><br><span class="line">                A10_precharge[<span class="number">1</span>] = Addr[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Burst terminate</span></span><br><span class="line">        <span class="keyword">if</span> (Burst_term == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">// Terminate a Write Immediately</span></span><br><span class="line">            <span class="keyword">if</span> (Data_in_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                Data_in_enable = <span class="number">1'b0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Terminate a Read Depend on CAS Latency</span></span><br><span class="line">            <span class="keyword">if</span> (Cas_latency_3 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                Command[<span class="number">2</span>] = <span class="meta">`BST;</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Cas_latency_2 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                Command[<span class="number">1</span>] = <span class="meta">`BST;</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t BST  : Burst Terminate"</span>,<span class="built_in">$time</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Read, Write, Column Latch</span></span><br><span class="line">        <span class="keyword">if</span> (Read_enable == <span class="number">1'b1</span> || Write_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">// Check to see if bank is open (ACT)</span></span><br><span class="line">            <span class="keyword">if</span> ((Ba == <span class="number">2'b00</span> &amp;&amp; Pc_b0 == <span class="number">1'b1</span>) || (Ba == <span class="number">2'b01</span> &amp;&amp; Pc_b1 == <span class="number">1'b1</span>) ||</span><br><span class="line">                (Ba == <span class="number">2'b10</span> &amp;&amp; Pc_b2 == <span class="number">1'b1</span>) || (Ba == <span class="number">2'b11</span> &amp;&amp; Pc_b3 == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span>(<span class="string">"at time %t ERROR: Cannot Read or Write - Bank %d is not Activated"</span>, <span class="built_in">$time</span>, Ba);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Activate to Read or Write</span></span><br><span class="line">            <span class="keyword">if</span> ((Ba == <span class="number">2'b00</span>) &amp;&amp; (<span class="built_in">$time</span> - RCD_chk0 &lt; tRCD))</span><br><span class="line">                <span class="built_in">$display</span>(<span class="string">"at time %t ERROR: tRCD violation during Read or Write to Bank 0"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">if</span> ((Ba == <span class="number">2'b01</span>) &amp;&amp; (<span class="built_in">$time</span> - RCD_chk1 &lt; tRCD))</span><br><span class="line">                <span class="built_in">$display</span>(<span class="string">"at time %t ERROR: tRCD violation during Read or Write to Bank 1"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">if</span> ((Ba == <span class="number">2'b10</span>) &amp;&amp; (<span class="built_in">$time</span> - RCD_chk2 &lt; tRCD))</span><br><span class="line">                <span class="built_in">$display</span>(<span class="string">"at time %t ERROR: tRCD violation during Read or Write to Bank 2"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">if</span> ((Ba == <span class="number">2'b11</span>) &amp;&amp; (<span class="built_in">$time</span> - RCD_chk3 &lt; tRCD))</span><br><span class="line">                <span class="built_in">$display</span>(<span class="string">"at time %t ERROR: tRCD violation during Read or Write to Bank 3"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="comment">// Read Command</span></span><br><span class="line">            <span class="keyword">if</span> (Read_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="comment">// CAS Latency pipeline</span></span><br><span class="line">                <span class="keyword">if</span> (Cas_latency_3 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                    <span class="keyword">if</span> (Addr[<span class="number">10</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                        Command[<span class="number">2</span>] = <span class="meta">`READ_A;</span></span><br><span class="line">                    <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                        Command[<span class="number">2</span>] = <span class="meta">`READ;</span></span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    Col_addr[<span class="number">2</span>] = Addr;</span><br><span class="line">                    Bank_addr[<span class="number">2</span>] = Ba;</span><br><span class="line">                <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Cas_latency_2 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                    <span class="keyword">if</span> (Addr[<span class="number">10</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                        Command[<span class="number">1</span>] = <span class="meta">`READ_A;</span></span><br><span class="line">                    <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                        Command[<span class="number">1</span>] = <span class="meta">`READ;</span></span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    Col_addr[<span class="number">1</span>] = Addr;</span><br><span class="line">                    Bank_addr[<span class="number">1</span>] = Ba;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Read interrupt Write (terminate Write immediately)</span></span><br><span class="line">                <span class="keyword">if</span> (Data_in_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                    Data_in_enable = <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Write Command</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Write_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Addr[<span class="number">10</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                    Command[<span class="number">0</span>] = <span class="meta">`WRITE_A;</span></span><br><span class="line">                <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                    Command[<span class="number">0</span>] = <span class="meta">`WRITE;</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                Col_addr[<span class="number">0</span>] = Addr;</span><br><span class="line">                Bank_addr[<span class="number">0</span>] = Ba;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Write interrupt Write (terminate Write immediately)</span></span><br><span class="line">                <span class="keyword">if</span> (Data_in_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                    Data_in_enable = <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Write interrupt Read (terminate Read immediately)</span></span><br><span class="line">                <span class="keyword">if</span> (Data_out_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                    Data_out_enable = <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Interrupting a Write with Autoprecharge</span></span><br><span class="line">            <span class="keyword">if</span> (Auto_precharge[Bank] == <span class="number">1'b1</span> &amp;&amp; Write_precharge[Bank] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                RW_interrupt_write[Bank] = <span class="number">1'b1</span>;</span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t NOTE : Read/Write Bank %d interrupt Write Bank %d with Autoprecharge"</span>, <span class="built_in">$time</span>, Ba, Bank);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Interrupting a Read with Autoprecharge</span></span><br><span class="line">            <span class="keyword">if</span> (Auto_precharge[Bank] == <span class="number">1'b1</span> &amp;&amp; Read_precharge[Bank] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                RW_interrupt_read[Bank] = <span class="number">1'b1</span>;</span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t NOTE : Read/Write Bank %d interrupt Read Bank %d with Autoprecharge"</span>, <span class="built_in">$time</span>, Ba, Bank);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Read or Write with Auto Precharge</span></span><br><span class="line">            <span class="keyword">if</span> (Addr[<span class="number">10</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                Auto_precharge[Ba] = <span class="number">1'b1</span>;</span><br><span class="line">                Count_precharge[Ba] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (Read_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                    Read_precharge[Ba] = <span class="number">1'b1</span>;</span><br><span class="line">                <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Write_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                    Write_precharge[Ba] = <span class="number">1'b1</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Read with Auto Precharge Calculation</span></span><br><span class="line">        <span class="comment">//      The device start internal precharge:</span></span><br><span class="line">        <span class="comment">//          1.  CAS Latency - 1 cycles before last burst</span></span><br><span class="line">        <span class="comment">//      and 2.  Meet minimum tRAS requirement</span></span><br><span class="line">        <span class="comment">//       or 3.  Interrupt by a Read or Write (with or without AutoPrecharge)</span></span><br><span class="line">        <span class="keyword">if</span> ((Auto_precharge[<span class="number">0</span>] == <span class="number">1'b1</span>) &amp;&amp; (Read_precharge[<span class="number">0</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (((<span class="built_in">$time</span> - RAS_chk0 &gt;= tRAS) &amp;&amp;                                                      <span class="comment">// Case 2</span></span><br><span class="line">                ((Burst_length_1 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">0</span>] &gt;= <span class="number">1</span>) ||                             <span class="comment">// Case 1</span></span><br><span class="line">                 (Burst_length_2 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">0</span>] &gt;= <span class="number">2</span>) ||</span><br><span class="line">                 (Burst_length_4 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">0</span>] &gt;= <span class="number">4</span>) ||</span><br><span class="line">                 (Burst_length_8 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">0</span>] &gt;= <span class="number">8</span>))) ||</span><br><span class="line">                 (RW_interrupt_read[<span class="number">0</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span>                                              <span class="comment">// Case 3</span></span><br><span class="line">                    Pc_b0 = <span class="number">1'b1</span>;</span><br><span class="line">                    Act_b0 = <span class="number">1'b0</span>;</span><br><span class="line">                    RP_chk0 = <span class="built_in">$time</span>;</span><br><span class="line">                    Auto_precharge[<span class="number">0</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    Read_precharge[<span class="number">0</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    RW_interrupt_read[<span class="number">0</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t NOTE : Start Internal Auto Precharge for Bank 0"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> ((Auto_precharge[<span class="number">1</span>] == <span class="number">1'b1</span>) &amp;&amp; (Read_precharge[<span class="number">1</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (((<span class="built_in">$time</span> - RAS_chk1 &gt;= tRAS) &amp;&amp;</span><br><span class="line">                ((Burst_length_1 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">1</span>] &gt;= <span class="number">1</span>) || </span><br><span class="line">                 (Burst_length_2 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">1</span>] &gt;= <span class="number">2</span>) ||</span><br><span class="line">                 (Burst_length_4 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">1</span>] &gt;= <span class="number">4</span>) ||</span><br><span class="line">                 (Burst_length_8 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">1</span>] &gt;= <span class="number">8</span>))) ||</span><br><span class="line">                 (RW_interrupt_read[<span class="number">1</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">                    Pc_b1 = <span class="number">1'b1</span>;</span><br><span class="line">                    Act_b1 = <span class="number">1'b0</span>;</span><br><span class="line">                    RP_chk1 = <span class="built_in">$time</span>;</span><br><span class="line">                    Auto_precharge[<span class="number">1</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    Read_precharge[<span class="number">1</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    RW_interrupt_read[<span class="number">1</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t NOTE : Start Internal Auto Precharge for Bank 1"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> ((Auto_precharge[<span class="number">2</span>] == <span class="number">1'b1</span>) &amp;&amp; (Read_precharge[<span class="number">2</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (((<span class="built_in">$time</span> - RAS_chk2 &gt;= tRAS) &amp;&amp;</span><br><span class="line">                ((Burst_length_1 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">2</span>] &gt;= <span class="number">1</span>) || </span><br><span class="line">                 (Burst_length_2 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">2</span>] &gt;= <span class="number">2</span>) ||</span><br><span class="line">                 (Burst_length_4 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">2</span>] &gt;= <span class="number">4</span>) ||</span><br><span class="line">                 (Burst_length_8 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">2</span>] &gt;= <span class="number">8</span>))) ||</span><br><span class="line">                 (RW_interrupt_read[<span class="number">2</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">                    Pc_b2 = <span class="number">1'b1</span>;</span><br><span class="line">                    Act_b2 = <span class="number">1'b0</span>;</span><br><span class="line">                    RP_chk2 = <span class="built_in">$time</span>;</span><br><span class="line">                    Auto_precharge[<span class="number">2</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    Read_precharge[<span class="number">2</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    RW_interrupt_read[<span class="number">2</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t NOTE : Start Internal Auto Precharge for Bank 2"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> ((Auto_precharge[<span class="number">3</span>] == <span class="number">1'b1</span>) &amp;&amp; (Read_precharge[<span class="number">3</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (((<span class="built_in">$time</span> - RAS_chk3 &gt;= tRAS) &amp;&amp;</span><br><span class="line">                ((Burst_length_1 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">3</span>] &gt;= <span class="number">1</span>) || </span><br><span class="line">                 (Burst_length_2 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">3</span>] &gt;= <span class="number">2</span>) ||</span><br><span class="line">                 (Burst_length_4 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">3</span>] &gt;= <span class="number">4</span>) ||</span><br><span class="line">                 (Burst_length_8 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">3</span>] &gt;= <span class="number">8</span>))) ||</span><br><span class="line">                 (RW_interrupt_read[<span class="number">3</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">                    Pc_b3 = <span class="number">1'b1</span>;</span><br><span class="line">                    Act_b3 = <span class="number">1'b0</span>;</span><br><span class="line">                    RP_chk3 = <span class="built_in">$time</span>;</span><br><span class="line">                    Auto_precharge[<span class="number">3</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    Read_precharge[<span class="number">3</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    RW_interrupt_read[<span class="number">3</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t NOTE : Start Internal Auto Precharge for Bank 3"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Internal Precharge or Bst</span></span><br><span class="line">        <span class="keyword">if</span> (Command[<span class="number">0</span>] == <span class="meta">`PRECH) begin                         // Precharge terminate a read with same bank or all banks</span></span><br><span class="line">            <span class="keyword">if</span> (Bank_precharge[<span class="number">0</span>] == Bank || A10_precharge[<span class="number">0</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Data_out_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                    Data_out_enable = <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Command[<span class="number">0</span>] == <span class="meta">`BST) begin                  // BST terminate a read to current bank</span></span><br><span class="line">            <span class="keyword">if</span> (Data_out_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                Data_out_enable = <span class="number">1'b0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Data_out_enable == <span class="number">1'b0</span>) <span class="keyword">begin</span></span><br><span class="line">            Dq_reg &lt;= #tOH &#123;data_bits&#123;<span class="number">1'bz</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Detect Read or Write command</span></span><br><span class="line">        <span class="keyword">if</span> (Command[<span class="number">0</span>] == <span class="meta">`READ || Command[0] == `READ_A) begin</span></span><br><span class="line">            Bank = Bank_addr[<span class="number">0</span>];</span><br><span class="line">            Col = Col_addr[<span class="number">0</span>];</span><br><span class="line">            Col_brst = Col_addr[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (Bank_addr[<span class="number">0</span>] == <span class="number">2'b00</span>) <span class="keyword">begin</span></span><br><span class="line">                Row = B0_row_addr;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Bank_addr[<span class="number">0</span>] == <span class="number">2'b01</span>) <span class="keyword">begin</span></span><br><span class="line">                Row = B1_row_addr;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Bank_addr[<span class="number">0</span>] == <span class="number">2'b10</span>) <span class="keyword">begin</span></span><br><span class="line">                Row = B2_row_addr;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Bank_addr[<span class="number">0</span>] == <span class="number">2'b11</span>) <span class="keyword">begin</span></span><br><span class="line">                Row = B3_row_addr;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            Burst_counter = <span class="number">0</span>;</span><br><span class="line">            Data_in_enable = <span class="number">1'b0</span>;</span><br><span class="line">            Data_out_enable = <span class="number">1'b1</span>;</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Command[<span class="number">0</span>] == <span class="meta">`WRITE || Command[0] == `WRITE_A) begin</span></span><br><span class="line">            Bank = Bank_addr[<span class="number">0</span>];</span><br><span class="line">            Col = Col_addr[<span class="number">0</span>];</span><br><span class="line">            Col_brst = Col_addr[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (Bank_addr[<span class="number">0</span>] == <span class="number">2'b00</span>) <span class="keyword">begin</span></span><br><span class="line">                Row = B0_row_addr;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Bank_addr[<span class="number">0</span>] == <span class="number">2'b01</span>) <span class="keyword">begin</span></span><br><span class="line">                Row = B1_row_addr;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Bank_addr[<span class="number">0</span>] == <span class="number">2'b10</span>) <span class="keyword">begin</span></span><br><span class="line">                Row = B2_row_addr;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Bank_addr[<span class="number">0</span>] == <span class="number">2'b11</span>) <span class="keyword">begin</span></span><br><span class="line">                Row = B3_row_addr;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            Burst_counter = <span class="number">0</span>;</span><br><span class="line">            Data_in_enable = <span class="number">1'b1</span>;</span><br><span class="line">            Data_out_enable = <span class="number">1'b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// DQ buffer (Driver/Receiver)</span></span><br><span class="line">        <span class="keyword">if</span> (Data_in_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span>                                   <span class="comment">// Writing Data to Memory</span></span><br><span class="line">            <span class="comment">// Array buffer</span></span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b00</span>) Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>] = Bank0 [&#123;Row, Col&#125;];</span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b01</span>) Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>] = Bank1 [&#123;Row, Col&#125;];</span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b10</span>) Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>] = Bank2 [&#123;Row, Col&#125;];</span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b11</span>) Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>] = Bank3 [&#123;Row, Col&#125;];</span><br><span class="line">            <span class="comment">// Dqm operation</span></span><br><span class="line">            <span class="keyword">if</span> (Dqm[<span class="number">0</span>] == <span class="number">1'b0</span>) Dq_dqm [ <span class="number">7</span> : <span class="number">0</span>] = Dq [ <span class="number">7</span> : <span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (Dqm[<span class="number">1</span>] == <span class="number">1'b0</span>) Dq_dqm [<span class="number">15</span> : <span class="number">8</span>] = Dq [<span class="number">15</span> : <span class="number">8</span>];</span><br><span class="line">            <span class="comment">//if (Dqm[2] == 1'b0) Dq_dqm [23 : 16] = Dq [23 : 16];</span></span><br><span class="line">           <span class="comment">// if (Dqm[3] == 1'b0) Dq_dqm [31 : 24] = Dq [31 : 24];</span></span><br><span class="line">            <span class="comment">// Write to memory</span></span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b00</span>) Bank0 [&#123;Row, Col&#125;] = Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b01</span>) Bank1 [&#123;Row, Col&#125;] = Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b10</span>) Bank2 [&#123;Row, Col&#125;] = Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b11</span>) Bank3 [&#123;Row, Col&#125;] = Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b11</span> &amp;&amp; Row==<span class="number">10'h3</span> &amp;&amp; Col[<span class="number">7</span>:<span class="number">4</span>]==<span class="number">4'h4</span>)</span><br><span class="line">                <span class="built_in">$display</span>(<span class="string">"at time %t WRITE: Bank = %d Row = %d, Col = %d, Data = Hi-Z due to DQM"</span>, <span class="built_in">$time</span>, Bank, Row, Col);</span><br><span class="line">            <span class="comment">//$fdisplay(test_file,"bank:%h    row:%h    col:%h    write:%h",Bank,Row,Col,Dq_dqm);</span></span><br><span class="line">            <span class="comment">// Output result</span></span><br><span class="line">            <span class="keyword">if</span> (Dqm == <span class="number">4'b1111</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span>(<span class="string">"at time %t WRITE: Bank = %d Row = %d, Col = %d, Data = Hi-Z due to DQM"</span>, <span class="built_in">$time</span>, Bank, Row, Col);</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span>(<span class="string">"at time %t WRITE: Bank = %d Row = %d, Col = %d, Data = %d, Dqm = %b"</span>, <span class="built_in">$time</span>, Bank, Row, Col, Dq_dqm, Dqm);</span><br><span class="line">                <span class="comment">// Record tWR time and reset counter</span></span><br><span class="line">                WR_chk [Bank] = <span class="built_in">$time</span>;</span><br><span class="line">                WR_counter [Bank] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Advance burst counter subroutine</span></span><br><span class="line">            #tHZ Burst;</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Data_out_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span>                         <span class="comment">// Reading Data from Memory</span></span><br><span class="line">            <span class="comment">//$display("%h    ,    %h,    %h",Bank0,Row,Col);</span></span><br><span class="line">            <span class="comment">// Array buffer</span></span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b00</span>) Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>] = Bank0 [&#123;Row, Col&#125;];</span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b01</span>) Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>] = Bank1 [&#123;Row, Col&#125;];</span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b10</span>) Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>] = Bank2 [&#123;Row, Col&#125;];</span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b11</span>) Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>] = Bank3 [&#123;Row, Col&#125;];</span><br><span class="line">                </span><br><span class="line">            <span class="comment">// Dqm operation</span></span><br><span class="line">            <span class="keyword">if</span> (Dqm_reg0[<span class="number">0</span>] == <span class="number">1'b1</span>) Dq_dqm [ <span class="number">7</span> : <span class="number">0</span>] = <span class="number">8'bz</span>;</span><br><span class="line">            <span class="keyword">if</span> (Dqm_reg0[<span class="number">1</span>] == <span class="number">1'b1</span>) Dq_dqm [<span class="number">15</span> : <span class="number">8</span>] = <span class="number">8'bz</span>;</span><br><span class="line">            <span class="keyword">if</span> (Dqm_reg0[<span class="number">2</span>] == <span class="number">1'b1</span>) Dq_dqm [<span class="number">23</span> : <span class="number">16</span>] = <span class="number">8'bz</span>;</span><br><span class="line">            <span class="keyword">if</span> (Dqm_reg0[<span class="number">3</span>] == <span class="number">1'b1</span>) Dq_dqm [<span class="number">31</span> : <span class="number">24</span>] = <span class="number">8'bz</span>;</span><br><span class="line">            <span class="comment">// Display result</span></span><br><span class="line">            Dq_reg [data_bits - <span class="number">1</span>  : <span class="number">0</span>] = #tAC Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (Dqm_reg0 == <span class="number">4'b1111</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span>(<span class="string">"at time %t READ : Bank = %d Row = %d, Col = %d, Data = Hi-Z due to DQM"</span>, <span class="built_in">$time</span>, Bank, Row, Col);</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span>(<span class="string">"at time %t READ : Bank = %d Row = %d, Col = %d, Data = %d, Dqm = %b"</span>, <span class="built_in">$time</span>, Bank, Row, Col, Dq_reg, Dqm_reg0);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Advance burst counter subroutine</span></span><br><span class="line">            Burst;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Write with Auto Precharge Calculation</span></span><br><span class="line">    <span class="comment">//      The device start internal precharge:</span></span><br><span class="line">    <span class="comment">//          1.  tWR Clock after last burst</span></span><br><span class="line">    <span class="comment">//      and 2.  Meet minimum tRAS requirement</span></span><br><span class="line">    <span class="comment">//       or 3.  Interrupt by a Read or Write (with or without AutoPrecharge)</span></span><br><span class="line">    <span class="keyword">always</span> @ (WR_counter[<span class="number">0</span>]) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> ((Auto_precharge[<span class="number">0</span>] == <span class="number">1'b1</span>) &amp;&amp; (Write_precharge[<span class="number">0</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (((<span class="built_in">$time</span> - RAS_chk0 &gt;= tRAS) &amp;&amp;                                                          <span class="comment">// Case 2</span></span><br><span class="line">               (((Burst_length_1 == <span class="number">1'b1</span> || Write_burst_mode == <span class="number">1'b1</span>) &amp;&amp; Count_precharge [<span class="number">0</span>] &gt;= <span class="number">1</span>) ||   <span class="comment">// Case 1</span></span><br><span class="line">                 (Burst_length_2 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">0</span>] &gt;= <span class="number">2</span>) ||</span><br><span class="line">                 (Burst_length_4 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">0</span>] &gt;= <span class="number">4</span>) ||</span><br><span class="line">                 (Burst_length_8 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">0</span>] &gt;= <span class="number">8</span>))) ||</span><br><span class="line">                 (RW_interrupt_write[<span class="number">0</span>] == <span class="number">1'b1</span> &amp;&amp; WR_counter[<span class="number">0</span>] &gt;= <span class="number">2</span>)) <span class="keyword">begin</span>                           <span class="comment">// Case 3 (stop count when interrupt)</span></span><br><span class="line">                    Auto_precharge[<span class="number">0</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    Write_precharge[<span class="number">0</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    RW_interrupt_write[<span class="number">0</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    #tWRa;                          <span class="comment">// Wait for tWR</span></span><br><span class="line">                    Pc_b0 = <span class="number">1'b1</span>;</span><br><span class="line">                    Act_b0 = <span class="number">1'b0</span>;</span><br><span class="line">                    RP_chk0 = <span class="built_in">$time</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t NOTE : Start Internal Auto Precharge for Bank 0"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">always</span> @ (WR_counter[<span class="number">1</span>]) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> ((Auto_precharge[<span class="number">1</span>] == <span class="number">1'b1</span>) &amp;&amp; (Write_precharge[<span class="number">1</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (((<span class="built_in">$time</span> - RAS_chk1 &gt;= tRAS) &amp;&amp;</span><br><span class="line">               (((Burst_length_1 == <span class="number">1'b1</span> || Write_burst_mode == <span class="number">1'b1</span>) &amp;&amp; Count_precharge [<span class="number">1</span>] &gt;= <span class="number">1</span>) || </span><br><span class="line">                 (Burst_length_2 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">1</span>] &gt;= <span class="number">2</span>) ||</span><br><span class="line">                 (Burst_length_4 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">1</span>] &gt;= <span class="number">4</span>) ||</span><br><span class="line">                 (Burst_length_8 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">1</span>] &gt;= <span class="number">8</span>))) ||</span><br><span class="line">                 (RW_interrupt_write[<span class="number">1</span>] == <span class="number">1'b1</span> &amp;&amp; WR_counter[<span class="number">1</span>] &gt;= <span class="number">2</span>)) <span class="keyword">begin</span></span><br><span class="line">                    Auto_precharge[<span class="number">1</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    Write_precharge[<span class="number">1</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    RW_interrupt_write[<span class="number">1</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    #tWRa;                          <span class="comment">// Wait for tWR</span></span><br><span class="line">                    Pc_b1 = <span class="number">1'b1</span>;</span><br><span class="line">                    Act_b1 = <span class="number">1'b0</span>;</span><br><span class="line">                    RP_chk1 = <span class="built_in">$time</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t NOTE : Start Internal Auto Precharge for Bank 1"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">always</span> @ (WR_counter[<span class="number">2</span>]) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> ((Auto_precharge[<span class="number">2</span>] == <span class="number">1'b1</span>) &amp;&amp; (Write_precharge[<span class="number">2</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (((<span class="built_in">$time</span> - RAS_chk2 &gt;= tRAS) &amp;&amp;</span><br><span class="line">               (((Burst_length_1 == <span class="number">1'b1</span> || Write_burst_mode == <span class="number">1'b1</span>) &amp;&amp; Count_precharge [<span class="number">2</span>] &gt;= <span class="number">1</span>) || </span><br><span class="line">                 (Burst_length_2 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">2</span>] &gt;= <span class="number">2</span>) ||</span><br><span class="line">                 (Burst_length_4 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">2</span>] &gt;= <span class="number">4</span>) ||</span><br><span class="line">                 (Burst_length_8 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">2</span>] &gt;= <span class="number">8</span>))) ||</span><br><span class="line">                 (RW_interrupt_write[<span class="number">2</span>] == <span class="number">1'b1</span> &amp;&amp; WR_counter[<span class="number">2</span>] &gt;= <span class="number">2</span>)) <span class="keyword">begin</span></span><br><span class="line">                    Auto_precharge[<span class="number">2</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    Write_precharge[<span class="number">2</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    RW_interrupt_write[<span class="number">2</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    #tWRa;                          <span class="comment">// Wait for tWR</span></span><br><span class="line">                    Pc_b2 = <span class="number">1'b1</span>;</span><br><span class="line">                    Act_b2 = <span class="number">1'b0</span>;</span><br><span class="line">                    RP_chk2 = <span class="built_in">$time</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t NOTE : Start Internal Auto Precharge for Bank 2"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">always</span> @ (WR_counter[<span class="number">3</span>]) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> ((Auto_precharge[<span class="number">3</span>] == <span class="number">1'b1</span>) &amp;&amp; (Write_precharge[<span class="number">3</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (((<span class="built_in">$time</span> - RAS_chk3 &gt;= tRAS) &amp;&amp;</span><br><span class="line">               (((Burst_length_1 == <span class="number">1'b1</span> || Write_burst_mode == <span class="number">1'b1</span>) &amp;&amp; Count_precharge [<span class="number">3</span>] &gt;= <span class="number">1</span>) || </span><br><span class="line">                 (Burst_length_2 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">3</span>] &gt;= <span class="number">2</span>) ||</span><br><span class="line">                 (Burst_length_4 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">3</span>] &gt;= <span class="number">4</span>) ||</span><br><span class="line">                 (Burst_length_8 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">3</span>] &gt;= <span class="number">8</span>))) ||</span><br><span class="line">                 (RW_interrupt_write[<span class="number">3</span>] == <span class="number">1'b1</span> &amp;&amp; WR_counter[<span class="number">3</span>] &gt;= <span class="number">2</span>)) <span class="keyword">begin</span></span><br><span class="line">                    Auto_precharge[<span class="number">3</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    Write_precharge[<span class="number">3</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    RW_interrupt_write[<span class="number">3</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    #tWRa;                          <span class="comment">// Wait for tWR</span></span><br><span class="line">                    Pc_b3 = <span class="number">1'b1</span>;</span><br><span class="line">                    Act_b3 = <span class="number">1'b0</span>;</span><br><span class="line">                    RP_chk3 = <span class="built_in">$time</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t NOTE : Start Internal Auto Precharge for Bank 3"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">task</span> Burst;</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">// Advance Burst Counter</span></span><br><span class="line">            Burst_counter = Burst_counter + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Burst Type</span></span><br><span class="line">            <span class="keyword">if</span> (Mode_reg[<span class="number">3</span>] == <span class="number">1'b0</span>) <span class="keyword">begin</span>                                  <span class="comment">// Sequential Burst</span></span><br><span class="line">                Col_temp = Col + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Mode_reg[<span class="number">3</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span>                         <span class="comment">// Interleaved Burst</span></span><br><span class="line">                Col_temp[<span class="number">2</span>] =  Burst_counter[<span class="number">2</span>] ^  Col_brst[<span class="number">2</span>];</span><br><span class="line">                Col_temp[<span class="number">1</span>] =  Burst_counter[<span class="number">1</span>] ^  Col_brst[<span class="number">1</span>];</span><br><span class="line">                Col_temp[<span class="number">0</span>] =  Burst_counter[<span class="number">0</span>] ^  Col_brst[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Burst Length</span></span><br><span class="line">            <span class="keyword">if</span> (Burst_length_2) <span class="keyword">begin</span>                                       <span class="comment">// Burst Length = 2</span></span><br><span class="line">                Col [<span class="number">0</span>] = Col_temp [<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Burst_length_4) <span class="keyword">begin</span>                              <span class="comment">// Burst Length = 4</span></span><br><span class="line">                Col [<span class="number">1</span> : <span class="number">0</span>] = Col_temp [<span class="number">1</span> : <span class="number">0</span>];</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Burst_length_8) <span class="keyword">begin</span>                              <span class="comment">// Burst Length = 8</span></span><br><span class="line">                Col [<span class="number">2</span> : <span class="number">0</span>] = Col_temp [<span class="number">2</span> : <span class="number">0</span>];</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span>                                                  <span class="comment">// Burst Length = FULL</span></span><br><span class="line">                Col = Col_temp;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Burst Read Single Write            </span></span><br><span class="line">            <span class="keyword">if</span> (Write_burst_mode == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                Data_in_enable = <span class="number">1'b0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Data Counter</span></span><br><span class="line">            <span class="keyword">if</span> (Burst_length_1 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Burst_counter &gt;= <span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">                    Data_in_enable = <span class="number">1'b0</span>;</span><br><span class="line">                    Data_out_enable = <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Burst_length_2 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Burst_counter &gt;= <span class="number">2</span>) <span class="keyword">begin</span></span><br><span class="line">                    Data_in_enable = <span class="number">1'b0</span>;</span><br><span class="line">                    Data_out_enable = <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Burst_length_4 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Burst_counter &gt;= <span class="number">4</span>) <span class="keyword">begin</span></span><br><span class="line">                    Data_in_enable = <span class="number">1'b0</span>;</span><br><span class="line">                    Data_out_enable = <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Burst_length_8 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Burst_counter &gt;= <span class="number">8</span>) <span class="keyword">begin</span></span><br><span class="line">                    Data_in_enable = <span class="number">1'b0</span>;</span><br><span class="line">                    Data_out_enable = <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">endtask</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//**********************将SDRAM内的数据直接输出到外部文件*******************************//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*    </span></span><br><span class="line"><span class="comment">   integer    sdram_data,ind;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    always@(sdram_r)</span></span><br><span class="line"><span class="comment">    begin</span></span><br><span class="line"><span class="comment">           sdram_data=$fopen("sdram_data.txt");</span></span><br><span class="line"><span class="comment">           $display("Sdram dampout begin ",sdram_data);</span></span><br><span class="line"><span class="comment">//           $fdisplay(sdram_data,"Bank0：");</span></span><br><span class="line"><span class="comment">           for(ind=0;ind&lt;=mem_sizes;ind=ind+1)</span></span><br><span class="line"><span class="comment">                    $fdisplay(sdram_data,"%h    %b",ind,Bank0[ind]);</span></span><br><span class="line"><span class="comment">//           $fdisplay(sdram_data,"Bank1：");</span></span><br><span class="line"><span class="comment">           for(ind=0;ind&lt;=mem_sizes;ind=ind+1)</span></span><br><span class="line"><span class="comment">                    $fdisplay(sdram_data,"%h    %b",ind,Bank1[ind]);</span></span><br><span class="line"><span class="comment">//           $fdisplay(sdram_data,"Bank2：");</span></span><br><span class="line"><span class="comment">           for(ind=0;ind&lt;=mem_sizes;ind=ind+1)</span></span><br><span class="line"><span class="comment">                    $fdisplay(sdram_data,"%h    %b",ind,Bank2[ind]);</span></span><br><span class="line"><span class="comment">//               $fdisplay(sdram_data,"Bank3：");</span></span><br><span class="line"><span class="comment">           for(ind=0;ind&lt;=mem_sizes;ind=ind+1)</span></span><br><span class="line"><span class="comment">                    $fdisplay(sdram_data,"%h    %b",ind,Bank3[ind]);</span></span><br><span class="line"><span class="comment">                                      </span></span><br><span class="line"><span class="comment">          $fclose("sdram_data.txt");        </span></span><br><span class="line"><span class="comment">      //-&gt;compare;</span></span><br><span class="line"><span class="comment">      end        </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">integer</span>    sdram_data,sdram_mem;</span><br><span class="line">    <span class="keyword">reg</span>    [<span class="number">24</span>:<span class="number">0</span>]    aa,cc;</span><br><span class="line">    <span class="keyword">reg</span>    [<span class="number">24</span>:<span class="number">0</span>]    bb,ee;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always</span>@(sdram_r)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">           <span class="built_in">$display</span>(<span class="string">"Sdram dampout begin "</span>,<span class="built_in">$realtime</span>);</span><br><span class="line">           sdram_data=<span class="built_in">$fopen</span>(<span class="string">"sdram_data.txt"</span>);</span><br><span class="line">           <span class="keyword">for</span>(aa=<span class="number">0</span>;aa&lt;<span class="number">4</span>*(mem_sizes+<span class="number">1</span>);aa=aa+<span class="number">1</span>)</span><br><span class="line">               <span class="keyword">begin</span></span><br><span class="line">               bb=aa[<span class="number">18</span>:<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(aa&lt;=mem_sizes)</span><br><span class="line">                <span class="built_in">$fdisplay</span>(sdram_data,<span class="string">"%0d    %0h"</span>,aa,Bank0[bb]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(aa&lt;=<span class="number">2</span>*mem_sizes+<span class="number">1</span>)</span><br><span class="line">                        <span class="built_in">$fdisplay</span>(sdram_data,<span class="string">"%0d    %0h"</span>,aa,Bank1[bb]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(aa&lt;=<span class="number">3</span>*mem_sizes+<span class="number">2</span>)</span><br><span class="line">                <span class="built_in">$fdisplay</span>(sdram_data,<span class="string">"%0d    %0h"</span>,aa,Bank2[bb]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">$fdisplay</span>(sdram_data,<span class="string">"%0d    %0h"</span>,aa,Bank3[bb]);</span><br><span class="line">              <span class="keyword">end</span>                        </span><br><span class="line">          <span class="built_in">$fclose</span>(<span class="string">"sdram_data.txt"</span>); </span><br><span class="line">          </span><br><span class="line">          sdram_mem=<span class="built_in">$fopen</span>(<span class="string">"sdram_mem.txt"</span>);</span><br><span class="line">          <span class="keyword">for</span>(cc=<span class="number">0</span>;cc&lt;<span class="number">4</span>*(mem_sizes+<span class="number">1</span>);cc=cc+<span class="number">1</span>)</span><br><span class="line">              <span class="keyword">begin</span></span><br><span class="line">               ee=cc[<span class="number">18</span>:<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(cc&lt;=mem_sizes)</span><br><span class="line">                <span class="built_in">$fdisplay</span>(sdram_mem,<span class="string">"%0h"</span>,Bank0[ee]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cc&lt;=<span class="number">2</span>*mem_sizes+<span class="number">1</span>)</span><br><span class="line">                        <span class="built_in">$fdisplay</span>(sdram_mem,<span class="string">"%0h"</span>,Bank1[ee]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cc&lt;=<span class="number">3</span>*mem_sizes+<span class="number">2</span>)</span><br><span class="line">                <span class="built_in">$fdisplay</span>(sdram_mem,<span class="string">"%0h"</span>,Bank2[ee]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">$fdisplay</span>(sdram_mem,<span class="string">"%0h"</span>,Bank3[ee]);</span><br><span class="line">              <span class="keyword">end</span>                        </span><br><span class="line">          <span class="built_in">$fclose</span>(<span class="string">"sdram_mem.txt"</span>);        </span><br><span class="line">     </span><br><span class="line">      <span class="keyword">end</span>        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    // Timing Parameters for -75 (PC133) and CAS Latency = 2</span></span><br><span class="line"><span class="comment">//    specify</span></span><br><span class="line"><span class="comment">//        specparam</span></span><br><span class="line"><span class="comment">////                    tAH  =  0.8,                                        // Addr, Ba Hold Time</span></span><br><span class="line"><span class="comment">////                    tAS  =  1.5,                                        // Addr, Ba Setup Time</span></span><br><span class="line"><span class="comment">////                    tCH  =  2.5,                                        // Clock High-Level Width</span></span><br><span class="line"><span class="comment">////                    tCL  =  2.5,                                        // Clock Low-Level Width</span></span><br><span class="line"><span class="comment">//////                    tCK  = 10.0,                                       // Clock Cycle Time  100mhz</span></span><br><span class="line"><span class="comment">//////                    tCK  = 7.5,                        // Clock Cycle Time  133mhz</span></span><br><span class="line"><span class="comment">////                    tCK  =  7,                                // Clock Cycle Time  143mhz</span></span><br><span class="line"><span class="comment">////                    tDH  =  0.8,                                        // Data-in Hold Time</span></span><br><span class="line"><span class="comment">////                    tDS  =  1.5,                                        // Data-in Setup Time</span></span><br><span class="line"><span class="comment">////                    tCKH =  0.8,                                        // CKE Hold  Time</span></span><br><span class="line"><span class="comment">////                    tCKS =  1.5,                                        // CKE Setup Time</span></span><br><span class="line"><span class="comment">////                    tCMH =  0.8,                                        // CS#, RAS#, CAS#, WE#, DQM# Hold  Time</span></span><br><span class="line"><span class="comment">////                    tCMS =  1.5;                                        // CS#, RAS#, CAS#, WE#, DQM# Setup Time</span></span><br><span class="line"><span class="comment">//                    tAH  =  1,                                        // Addr, Ba Hold Time</span></span><br><span class="line"><span class="comment">//                    tAS  =  1.5,                                        // Addr, Ba Setup Time</span></span><br><span class="line"><span class="comment">//                    tCH  =  1,                                        // Clock High-Level Width</span></span><br><span class="line"><span class="comment">//                    tCL  =  3,                                        // Clock Low-Level Width</span></span><br><span class="line"><span class="comment">////                    tCK  = 10.0,                                       // Clock Cycle Time  100mhz</span></span><br><span class="line"><span class="comment">////                    tCK  = 7.5,                        // Clock Cycle Time  133mhz</span></span><br><span class="line"><span class="comment">//                    tCK  =  7,                                // Clock Cycle Time  143mhz</span></span><br><span class="line"><span class="comment">//                    tDH  =  1,                                        // Data-in Hold Time</span></span><br><span class="line"><span class="comment">//                    tDS  =  2,                                        // Data-in Setup Time</span></span><br><span class="line"><span class="comment">//                    tCKH =  1,                                        // CKE Hold  Time</span></span><br><span class="line"><span class="comment">//                    tCKS =  2,                                        // CKE Setup Time</span></span><br><span class="line"><span class="comment">//                    tCMH =  0.8,                                        // CS#, RAS#, CAS#, WE#, DQM# Hold  Time</span></span><br><span class="line"><span class="comment">//                    tCMS =  1.5;                                        // CS#, RAS#, CAS#, WE#, DQM# Setup Time</span></span><br><span class="line"><span class="comment">//        $width    (posedge Clk,           tCH);</span></span><br><span class="line"><span class="comment">//        $width    (negedge Clk,           tCL);</span></span><br><span class="line"><span class="comment">//        $period   (negedge Clk,           tCK);</span></span><br><span class="line"><span class="comment">//        $period   (posedge Clk,           tCK);</span></span><br><span class="line"><span class="comment">//        $setuphold(posedge Clk,    Cke,   tCKS, tCKH);</span></span><br><span class="line"><span class="comment">//        $setuphold(posedge Clk,    Cs_n,  tCMS, tCMH);</span></span><br><span class="line"><span class="comment">//        $setuphold(posedge Clk,    Cas_n, tCMS, tCMH);</span></span><br><span class="line"><span class="comment">//        $setuphold(posedge Clk,    Ras_n, tCMS, tCMH);</span></span><br><span class="line"><span class="comment">//        $setuphold(posedge Clk,    We_n,  tCMS, tCMH);</span></span><br><span class="line"><span class="comment">//        $setuphold(posedge Clk,    Addr,  tAS,  tAH);</span></span><br><span class="line"><span class="comment">//        $setuphold(posedge Clk,    Ba,    tAS,  tAH);</span></span><br><span class="line"><span class="comment">//        $setuphold(posedge Clk,    Dqm,   tCMS, tCMH);</span></span><br><span class="line"><span class="comment">//        $setuphold(posedge Dq_chk, Dq,    tDS,  tDH);</span></span><br><span class="line"><span class="comment">//    endspecify</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div></div><br></font><h3 id="仿真结果"><a href="#仿真结果" class="headerlink" title="仿真结果"></a>仿真结果</h3><p>我们可以看到基于 sdram_model.v 运行了 201us 个周期后，modelsim 上打印信息显示我们初始化的操作是正确的。<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/sdram%E4%BB%BF%E7%9C%9F%E6%95%B0%E6%8D%AE.jpg" alt=""></p><p>仿真波形如图所示：<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/sdram%E4%BB%BF%E7%9C%9F%E6%B3%A2%E5%BD%A2.jpg" alt=""></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>我们依芯片手册成功实现了 sdram 的上电初始化，接下来我们将继续进行后续的操作，我们将尽快更新~</p><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><p>SDRAM 仿真模型文件：<a href="https://pan.baidu.com/s/1hIPdYfLONydeHYugL0hKig" target="_blank" rel="noopener">点击下载，提取码:yihx</a></p><p><strong>By Ricky</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上次挖的坑现在来填，在我们把 SDRAM 控制器接进 AHB 总线之前，我们先来设计一个 SDRAM 控制器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/hexo_img.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/categories/IC-Design/"/>
    
      <category term="SDRAM" scheme="https://blog.strongwong.top/categories/IC-Design/SDRAM/"/>
    
    
      <category term="SDRAM" scheme="https://blog.strongwong.top/tags/SDRAM/"/>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/tags/IC-Design/"/>
    
  </entry>
  
  <entry>
    <title>从计数器开始，看数字 IC 设计</title>
    <link href="https://blog.strongwong.top//posts/%E4%BB%8E%E8%AE%A1%E6%95%B0%E5%99%A8%E5%BC%80%E5%A7%8B%EF%BC%8C%E7%9C%8B%E6%95%B0%E5%AD%97-IC-%E8%AE%BE%E8%AE%A1.html"/>
    <id>https://blog.strongwong.top//posts/从计数器开始，看数字-IC-设计.html</id>
    <published>2018-11-24T02:41:29.000Z</published>
    <updated>2018-12-06T14:06:13.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计数器设计"><a href="#计数器设计" class="headerlink" title="计数器设计"></a>计数器设计</h2><p>之前有实验室的学长去参加海思、中芯国际、瑞芯微、…… 数字 IC 前端方向的面试，几乎都问到了同一系列问题——设计一个计数器及相关问题。这里很多朋友就会觉得很有意思了，为什么一个简单的计数器能有这么多东西，那我们就『简单』的东西简单看。</p><a id="more"></a><h2 id="0x00-请你设计一个-10-进制的异步复位无限循环计数器（0-9）"><a href="#0x00-请你设计一个-10-进制的异步复位无限循环计数器（0-9）" class="headerlink" title="0x00 请你设计一个 10 进制的异步复位无限循环计数器（0-9）"></a>0x00 请你设计一个 10 进制的异步复位无限循环计数器（0-9）</h2><p>首先，第一个问题，<strong>请你设计一个 10 进制的异步复位无限循环计数器（0-9）</strong>，你会怎么做？</p><p>相信到这很多朋友就开始洋洋洒洒地写道：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> counter10(</span><br><span class="line">                <span class="keyword">input</span> clk,</span><br><span class="line">                <span class="keyword">input</span> rst_n,</span><br><span class="line">                <span class="keyword">output</span> <span class="keyword">wire</span> cnt_flag</span><br><span class="line">                );</span><br><span class="line"><span class="keyword">reg</span>[<span class="number">3</span>:<span class="number">0</span>] cnt_reg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>( ~rst_n) <span class="keyword">begin</span></span><br><span class="line">        cnt_reg &lt;= <span class="number">4'b0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(cnt_reg == <span class="number">4'd9</span>)</span><br><span class="line">            cnt_reg &lt;= <span class="number">4'b0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cnt_reg &lt;= cnt_reg + <span class="number">4'b1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> cnt_flag = (cnt_reg == <span class="number">4'd9</span>) ? <span class="number">1'b1</span> : <span class="number">1'b0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="0x01-请画出对应的电路图"><a href="#0x01-请画出对应的电路图" class="headerlink" title="0x01 请画出对应的电路图"></a>0x01 请画出对应的电路图</h2><p>Bravo! 没有任何问题！接下来开始有分水岭了，<strong>请画出对应的电路图</strong> ，有的朋友可能会抓脑袋了：</p><p>这里给一点提示，看你能想起什么，确定状态 —— 确定激励方程 —— 逻辑图 —— 自启动检查 —— 状态表。这是什么？数字电路基础，为什么？我们这是数字集成电路设计啊！最终还是要回归到数字电路上来啊！</p><p>好，那我们先用 D 触发器来做（不经过编码优化，只是还原最简单的设计步骤），回忆一下最初我们大一大二时怎么弄的。</p><h3 id="状态表："><a href="#状态表：" class="headerlink" title="状态表："></a>状态表：</h3><table><thead><tr><th style="text-align:center">计数顺序</th><th style="text-align:center">现状态</th><th style="text-align:center">次状态</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:center">Q3 Q2 Q1 Q0</td><td style="text-align:center">D3 D2 D1 D0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">0 0 0 0</td><td style="text-align:center">0 0 0 1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0 0 0 1</td><td style="text-align:center">0 0 1 0</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">0 0 1 0</td><td style="text-align:center">0 0 1 1</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">0 0 1 1</td><td style="text-align:center">0 1 0 0</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">0 1 0 0</td><td style="text-align:center">0 1 0 1</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">0 1 0 1</td><td style="text-align:center">0 1 1 0</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">0 1 1 0</td><td style="text-align:center">0 1 1 1</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">0 1 1 1</td><td style="text-align:center">1 0 0 0</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">1 0 0 0</td><td style="text-align:center">1 0 0 1</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">1 0 0 1</td><td style="text-align:center">0 0 0 0</td></tr></tbody></table><h3 id="激励方程："><a href="#激励方程：" class="headerlink" title="激励方程："></a>激励方程：</h3><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E5%8D%A1%E8%AF%BA%E5%9B%BE.png" alt=""></p><h3 id="逻辑图："><a href="#逻辑图：" class="headerlink" title="逻辑图："></a>逻辑图：</h3><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E5%8D%81%E8%BF%9B%E5%88%B6D%E8%A7%A6%E5%8F%91%E5%99%A8.png" alt=""></p><p>…… 剩下的估计大家都能回忆起来了</p><p>以上就是我们之前数字电路设计流程，我们回过头来看我们的硬件描述过程，有 if 判断值，那少不了比较器，有 <code>+</code> 运算，自然也有一个加法器 …… 当然我们真正的设计应该是先想好了有比较器和其他逻辑电路才有对应的硬件描述，但我们不妨来看一下我们设计的电路，不正是如下图所示：<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E5%8D%81%E8%BF%9B%E5%88%B6.png" alt=""></p><h2 id="0x02-上图中的关键路径是哪一条？"><a href="#0x02-上图中的关键路径是哪一条？" class="headerlink" title="0x02 上图中的关键路径是哪一条？"></a>0x02 上图中的关键路径是哪一条？</h2><p>Ok~ 解决了电路图，下一个问题又来了，<strong>上图中的关键路径是哪一条？</strong></p><p>要知道关键路径就需要时序分析啦，这里为接下来的另一个数字 IC 的小专栏———时序分析与约束挖下第一坑。</p><p>关键路径应该是：Q &gt; + &gt; MUX &gt; D (具体分析将在后面填坑，大家也可以先想想为什么不是 Q &gt; CMP &gt; MUX &gt; D)</p><h2 id="0x03-上面图中-CMP-9-即原描述中-cnt-reg-4’d9-的电路是什么？"><a href="#0x03-上面图中-CMP-9-即原描述中-cnt-reg-4’d9-的电路是什么？" class="headerlink" title="0x03 上面图中 CMP = 9 即原描述中 cnt_reg == 4’d9 的电路是什么？"></a>0x03 上面图中 CMP = 9 即原描述中 cnt_reg == 4’d9 的电路是什么？</h2><p>接下来的问题，<strong>上面图中 CMP = 9 即原描述中 cnt_reg == 4’d9 的电路是什么？</strong><br>其实答案就在我们的触发器版原理图对应的组合电路中，精简后如下图所示：<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/CMP.png" alt=""></p><h2 id="0x04-cnt-reg-4’d9-和-cnt-reg-gt-8-有什么区别？"><a href="#0x04-cnt-reg-4’d9-和-cnt-reg-gt-8-有什么区别？" class="headerlink" title="0x04 cnt_reg == 4’d9 和 cnt_reg &gt; 8 有什么区别？"></a>0x04 cnt_reg == 4’d9 和 cnt_reg &gt; 8 有什么区别？</h2><p>功能上确实是一样的，但是如果是一个把 Verilog 当编程玩的朋友对于接下来的东就蛮有意义的了，cnt_reg == 4’d9 实现的电路如上图所示，是一个相对简单的组合逻辑电路。如果是 cnt_reg &gt; 8，对于我们 4 位数据来说可能的范围为 9~15，则综合工具会把所有的情况都列出，cnt_reg == 9,10,11 …… 这样在无形中就浪费了资源。若位宽更大则会被综合为cnt_reg - 8 &gt; 0，由此便会引入一个加法器 ……</p><h2 id="0x05-加法器对应的电路是什么？如何验证这个计数器？……"><a href="#0x05-加法器对应的电路是什么？如何验证这个计数器？……" class="headerlink" title="0x05 加法器对应的电路是什么？如何验证这个计数器？……"></a>0x05 加法器对应的电路是什么？如何验证这个计数器？……</h2><p>一系列的问题，我们可以发现并非那么简单的。要知道直到现在优化加法器的文章依然不时可以出现在 sci 检索期刊中，这另外说明为什么上一问引入加法器后带来的浪费用省略号来表示，为什么关键路径是到 + 而不是比较器 ……</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>引用《手把手教你设计 CPU——RISC-V 处理器篇》作者胡振波老师的一段话，当年第一次 Verilog 课时我的授课老师董乾博士也强调过类似的话。</p><blockquote><p>先定义电路微架构而后编写代码。<br>谨记 Verilog 只是一种硬件描述语言，IC 设计的本质是对于电路的设计，虽然现在Verilog Coding 采用 RTL 级别的抽象描述，但是必须清楚所描述的代码能够映射出的电路结构，其面积和时序的影响都了然于胸，只有如此才能够成为一名优秀的 IC 设计工程师。<br>不要纠结 Verilog 的语法，而应立足实战。<br>Verilog 的设计语法子集非常精简简单，很快就可以上手入门。入门之后最好的学习方法是进行设计实战（实战是最好的老师），而不是进一步纠结 Verilog 的语法（不要浪费脑力试图记住大多数高级的 Verilog 语法，而是在需要使用的时候查阅即可）。</p></blockquote><p><strong>By Ricky</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;计数器设计&quot;&gt;&lt;a href=&quot;#计数器设计&quot; class=&quot;headerlink&quot; title=&quot;计数器设计&quot;&gt;&lt;/a&gt;计数器设计&lt;/h2&gt;&lt;p&gt;之前有实验室的学长去参加海思、中芯国际、瑞芯微、…… 数字 IC 前端方向的面试，几乎都问到了同一系列问题——设计一个计数器及相关问题。这里很多朋友就会觉得很有意思了，为什么一个简单的计数器能有这么多东西，那我们就『简单』的东西简单看。&lt;/p&gt;
    
    </summary>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/categories/IC-Design/"/>
    
      <category term="其他" scheme="https://blog.strongwong.top/categories/IC-Design/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="IC Design" scheme="https://blog.strongwong.top/tags/IC-Design/"/>
    
      <category term="计数器" scheme="https://blog.strongwong.top/tags/%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    
      <category term="数字前端" scheme="https://blog.strongwong.top/tags/%E6%95%B0%E5%AD%97%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>使用 Docker + GitLab 构建自用的代码管理服务</title>
    <link href="https://blog.strongwong.top//posts/%E4%BD%BF%E7%94%A8-Docker-GitLab-%E6%9E%84%E5%BB%BA%E8%87%AA%E7%94%A8%E7%9A%84%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E6%9C%8D%E5%8A%A1.html"/>
    <id>https://blog.strongwong.top//posts/使用-Docker-GitLab-构建自用的代码管理服务.html</id>
    <published>2018-11-13T07:16:45.000Z</published>
    <updated>2018-11-13T14:46:23.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><ul><li>一台 Ubuntu 系统的电脑作为服务器（我这里是一台 Ubuntu Xenial 16.04 的电脑），其他版本和系统也可以，只要 Docker CE 支持即可，详情请访问 <a href="https://www.docker.com" target="_blank" rel="noopener">Docker 官网</a>。</li><li>GitLab CE 要求内存 2G 以上</li></ul><h2 id="Docker-安装及配置"><a href="#Docker-安装及配置" class="headerlink" title="Docker 安装及配置"></a>Docker 安装及配置</h2><h3 id="Docker-是什么"><a href="#Docker-是什么" class="headerlink" title="Docker 是什么"></a>Docker 是什么</h3><p>Docker 使用 Google 公司推出的 Go 语言进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于 <a href="https://en.wikipedia.org/wiki/Operating-system-level_virtualization" target="_blank" rel="noopener">操作系统层面的虚拟化技术</a>。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</p><a id="more"></a><p>Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。</p><p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p><p>它是目前最流行的 Linux 容器解决方案！</p><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><p>旧版本的 Docker 称为 <code>docker</code> 或者 <code>docker-engine</code>，使用以下命令卸载旧版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker \</span><br><span class="line">               docker-engine \</span><br><span class="line">               docker.io</span><br></pre></td></tr></table></figure></p><h3 id="使用-APT-安装"><a href="#使用-APT-安装" class="headerlink" title="使用 APT 安装"></a>使用 APT 安装</h3><p>由于 <code>apt</code> 源使用 HTTPS 以确保软件下载过程中不被篡改。因此，我们首先需要添加使用 HTTPS 传输的软件包以及 CA 证书。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure><p>鉴于国内网络的问题，建议使用国内源，官方源在注释中查看。<br>为了确认所下载软件包的合法性，需要添加软件源的 <code>GPG</code> 密钥。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 官方源</span></span><br><span class="line"><span class="comment"># $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span></span><br></pre></td></tr></table></figure></p><p>然后，向 <code>source.list</code> 中添加 Docker 软件源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository \</span><br><span class="line">    <span class="string">"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \</span></span><br><span class="line"><span class="string">    <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">    stable"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 官方源</span></span><br><span class="line"><span class="comment"># $ sudo add-apt-repository \</span></span><br><span class="line"><span class="comment">#    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="comment">#    $(lsb_release -cs) \</span></span><br><span class="line"><span class="comment">#    stable"</span></span><br></pre></td></tr></table></figure><h3 id="安装-Docker-CE"><a href="#安装-Docker-CE" class="headerlink" title="安装 Docker CE"></a>安装 Docker CE</h3><p>更新 apt 软件包缓存，并安装 <code>docker-ce</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure></p><h3 id="启动-Docker-CE"><a href="#启动-Docker-CE" class="headerlink" title="启动 Docker CE"></a>启动 Docker CE</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="建立-Docker-用户组"><a href="#建立-Docker-用户组" class="headerlink" title="建立 Docker 用户组"></a>建立 Docker 用户组</h3><p>默认情况下，<code>docker</code> 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 <code>root</code> 用户和 <code>docker</code> 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 <code>root</code> 用户。因此，更好地做法是将需要使用 <code>docker</code> 的用户加入 <code>docker</code> 用户组。</p><p>建立 <code>docker</code> 用户组：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd docker      <span class="comment">#新建 docker 用户组</span></span><br><span class="line"></span><br><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span>     <span class="comment">#将当前用户加入 docker 组</span></span><br></pre></td></tr></table></figure></p><p>退出当前终端并重新登录，进行如下测试。</p><h3 id="测试-Docker-是否正确安装"><a href="#测试-Docker-是否正确安装" class="headerlink" title="测试 Docker 是否正确安装"></a>测试 Docker 是否正确安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ docker run hello-world</span><br><span class="line"></span><br><span class="line">Unable to find image <span class="string">'hello-world:latest'</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">d1725b59e92d: Pull complete</span><br><span class="line">Digest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">"hello-world"</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure><p>若能正常输出以上信息，则说明安装成功。</p><h3 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h3><p>因为国内网络的原因，后续拉取 Docker 镜像会十分缓慢，建议安装好 Docker 后配置一下国内镜像加速。<br>Ubuntu 16.04 的配置方法如下（参考：<a href="https://www.docker-cn.com" target="_blank" rel="noopener">Docker 中国</a>）：<br>修改 <code>/etc/docker/daemon.json</code> 文件并写入如下内容（如果文件不存在请新建该文件）：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">      <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>注意，一定要保证该文件符合 json 规范，否则 Docker 将不能启动。</p></blockquote><p>之后重新启动服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure></p><p>到此为止，Docker 就配置好了，接下来安装 GitLab CE 就十分简单了。</p><h2 id="GitLab-安装及配置"><a href="#GitLab-安装及配置" class="headerlink" title="GitLab 安装及配置"></a>GitLab 安装及配置</h2><h3 id="GitLab-是什么"><a href="#GitLab-是什么" class="headerlink" title="GitLab 是什么"></a>GitLab 是什么</h3><p>GitLab 是一个类似与 GitHub 的开源源码托管服务，它提供了一个基于 Git 的全功能软件开发平台，可以通过 Web 界面访问公有或私有的项目，还具备很多与软件开发协作相关的其他功能。利用 GitLab 提供的这些功能，可以实践一些项目管理和协作流程。这套流程借鉴于很多成功的开源项目，非常适合在小型团队里使用。</p><h3 id="拉取-GitLab-镜像"><a href="#拉取-GitLab-镜像" class="headerlink" title="拉取 GitLab 镜像"></a>拉取 GitLab 镜像</h3><p>安装最新版 GitLab 镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure></p><h3 id="启动-GitLab"><a href="#启动-GitLab" class="headerlink" title="启动 GitLab"></a>启动 GitLab</h3><p>使用 Docker 命令运行容器，命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d \</span><br><span class="line">    --hostname gitlab.asicfans.com \</span><br><span class="line">    -p 8443:443 -p 8080:80 -p 2222:22 \</span><br><span class="line">    --name gitlab \</span><br><span class="line">    --restart always \</span><br><span class="line">    -v /srv/gitlab/config:/etc/gitlab \</span><br><span class="line">    -v /srv/gitlab/logs:/var/<span class="built_in">log</span>/gitlab \</span><br><span class="line">    -v /srv/gitlab/data:/var/opt/gitlab \</span><br><span class="line">    gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure></p><blockquote><p>注意修改 hostname 为自己的域名或者 ip 地址。<br><code>-v</code> 命令表示将原有的挂载目录重新映射到自己的目录，这三个参数将 GitLab 的配置、数据和日志持久化到文件系统上，这样就可以保证后面升级 GitLab 时数据不会丢失。<br><code>-p</code> 命令表示将原有的端口映射一下，避免常用端口被占用。我这里使用的都是安全端口。如果大家的环境没有限制或不冲突可以使用与容器同端口，如：-p 443:443 -p 80:80 -p 22:22<br>上面的命令太长，也可以写成 shell 脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ cat &lt;&lt;EOF &gt; start.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">HOST_NAME=gitlab.asicfans.com</span><br><span class="line">docker stop gitlab</span><br><span class="line">docker rm gitlab</span><br><span class="line">sudo docker run -d \\</span><br><span class="line">    --hostname \<span class="variable">$&#123;HOST_NAME&#125;</span> \\</span><br><span class="line">    -p 8443:443 -p 8080:80 -p 2222:22 \\</span><br><span class="line">    --name gitlab \\</span><br><span class="line">    --restart always \\</span><br><span class="line">    -v /srv/gitlab/config:/etc/gitlab \\</span><br><span class="line">    -v /srv/gitlab/logs:/var/<span class="built_in">log</span>/gitlab \\</span><br><span class="line">    -v /srv/gitlab/data:/var/opt/gitlab \\</span><br><span class="line">    gitlab/gitlab-ce:latest</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>脚本编辑好之后运行脚本就可以了，就再也不用输入这么长的命令了！<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sh start.sh</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>修改 /etc/hosts 文件，使在本地端可以使用域名访问<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 gitlab.asicfans.com</span><br></pre></td></tr></table></figure></p><p>这样就可以使用 <code>http://gitlab.asicfans.com:8080</code> 域名在本地从浏览器访问 GitLab 了（GitLab 初次启动会比较慢，等待大约一分钟）。</p><h3 id="试用-GitLab"><a href="#试用-GitLab" class="headerlink" title="试用 GitLab"></a>试用 GitLab</h3><p>首先根据提示输入管理员密码，这个密码是管理员用户的密码。对应的用户名是 root，用于以管理员身份登录 GitLab。</p><p><img src="https://img.mukewang.com/5a73280a0001efc904500304.png" alt=""></p><p>设置好密码后去注册一个普通账号</p><p><img src="https://img.mukewang.com/5a7327360001cdff03400477.png" alt=""></p><p>注册成功后会跳到首页，这样就可以创建一个项目了</p><p><img src="https://img.mukewang.com/5a7327620001bc7f05460400.png" alt=""></p><p>项目建好了，我们加一个 ssh key，以后本地 pull/push 就简单啦!</p><p><img src="https://img.mukewang.com/5a73277b0001982f07080200.png" alt=""></p><p>首先去到添加 ssh key 的页面</p><p><img src="https://img.mukewang.com/5a73278e0001303620200994.png" alt=""></p><p>然后拿到我们的 ssh key 贴到框框里就行了<br>获取 ssh key：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先看看是不是已经有了，如果有内容就直接 copy 贴过去就行啦</span></span><br><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果上一步没有这个文件 我们就创建一个，运行下面命令（邮箱改成自己的），一路回车就好了</span></span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span><br><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p><p>点开我们刚创建的项目，复制项目 ssh 的地址。<br>添加个文件，测试一下（我的项目叫 test）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> ssh://git@gitlab.asicfans.com:2222/wangqq/test.git</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> <span class="built_in">test</span> &amp;&amp; <span class="built_in">echo</span> <span class="built_in">test</span> &gt; README.md  <span class="comment"># 添加文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#push 上去</span></span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"test"</span></span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure></p><p>这样我们就可以在 GitLab 上看到我们刚才提交的结果了。到这 GitLab 的本地端使用就已经没问题了，但是要想不在家，或者在其他地方也可以访问，那我们就需要进行一下，内网穿透！</p><h2 id="frp-配置"><a href="#frp-配置" class="headerlink" title="frp 配置"></a>frp 配置</h2><p>配置 frp 你需要有一个有公网 ip 的云服务器和自己的域名，然后在云服务器和本地端分别下载安装 frp 并进行配置。</p><p>下载与系统对应的 frp 文件，frp 支持多种系统架构，详情请访问 <a href="https://github.com/fatedier/frp/" target="_blank" rel="noopener"><strong>frp</strong></a> 查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ uname -a      <span class="comment"># 首先使用 uname 命令查看一下你的系统</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我这里是 Ubuntu x86_x64 所以下载 Linux_amd64 的软件包</span></span><br><span class="line">$ wget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压安装包</span></span><br><span class="line">$ tar -zxvf frp_0.21.0_linux_amd64.tar.gz</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> frp_0.21.0_linux_amd64</span><br></pre></td></tr></table></figure><p>然后分别配置服务器端的 <code>frps.ini</code> 文件和本地端的 <code>frpc.ini</code> 文件。</p><ul><li><p>1.修改 frps.ini 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line">[common]    </span><br><span class="line">bind_port = 7000        <span class="comment"># 穿透使用的端口</span></span><br><span class="line">vhost_http_post = 80    <span class="comment"># 从外网访问的端口</span></span><br><span class="line">subdomain_host = asicfans.com   <span class="comment"># 主域名</span></span><br><span class="line">token = xxxx            <span class="comment"># 服务器与本地的校验信息，校验信息错误无法穿透，自行设置</span></span><br></pre></td></tr></table></figure></li><li><p>2.启动 frps</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./frps -c ./frps.ini</span><br></pre></td></tr></table></figure></li><li><p>3.修改 frpc.ini 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line">[common]</span><br><span class="line">server_addr = x.x.x.x   <span class="comment"># 你的服务器 ip 地址</span></span><br><span class="line">server_port = 7000      <span class="comment"># 开放的穿透端口</span></span><br><span class="line">token = xxxx            <span class="comment"># 需要与服务器端一致</span></span><br><span class="line"></span><br><span class="line">[gitlab]</span><br><span class="line"><span class="built_in">type</span> = http</span><br><span class="line">local_port = 8080</span><br><span class="line">subdomain = gitlab</span><br></pre></td></tr></table></figure></li><li><p>4.启动 frpc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure></li><li><p>5.将 gitlab.asicfans.com 的域名 A 记录解析到 ip <code>x.x.x.x</code>， 如果服务器已经有了对应的域名，也可以将 CNAME 记录解析到服务器原先的域名。</p></li><li>6.通过浏览器访问 <a href="http://gitlab.asicfans.com" target="_blank" rel="noopener">http://gitlab.asicfans.com</a> 即可访问到处于内网的 gitlab 服务了。<br>这样就不用使用 ssh key 的方式 clone/pull/push 代码仓库了，就可以直接使用 http 的方式进行操作了！ 十分方便！</li></ul><p>自此，我们就可以让自己和小伙伴们一起愉快的在 GitLab 上玩耍啦！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;h3 id=&quot;系统要求&quot;&gt;&lt;a href=&quot;#系统要求&quot; class=&quot;headerlink&quot; title=&quot;系统要求&quot;&gt;&lt;/a&gt;系统要求&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一台 Ubuntu 系统的电脑作为服务器（我这里是一台 Ubuntu Xenial 16.04 的电脑），其他版本和系统也可以，只要 Docker CE 支持即可，详情请访问 &lt;a href=&quot;https://www.docker.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker 官网&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;GitLab CE 要求内存 2G 以上&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Docker-安装及配置&quot;&gt;&lt;a href=&quot;#Docker-安装及配置&quot; class=&quot;headerlink&quot; title=&quot;Docker 安装及配置&quot;&gt;&lt;/a&gt;Docker 安装及配置&lt;/h2&gt;&lt;h3 id=&quot;Docker-是什么&quot;&gt;&lt;a href=&quot;#Docker-是什么&quot; class=&quot;headerlink&quot; title=&quot;Docker 是什么&quot;&gt;&lt;/a&gt;Docker 是什么&lt;/h3&gt;&lt;p&gt;Docker 使用 Google 公司推出的 Go 语言进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于 &lt;a href=&quot;https://en.wikipedia.org/wiki/Operating-system-level_virtualization&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;操作系统层面的虚拟化技术&lt;/a&gt;。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Docker" scheme="https://blog.strongwong.top/tags/Docker/"/>
    
      <category term="GitLab" scheme="https://blog.strongwong.top/tags/GitLab/"/>
    
      <category term="frp" scheme="https://blog.strongwong.top/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>提升数字 IC 设计效率从 Vim 开始</title>
    <link href="https://blog.strongwong.top//posts/%E6%8F%90%E5%8D%87%E6%95%B0%E5%AD%97-IC-%E8%AE%BE%E8%AE%A1%E6%95%88%E7%8E%87%E4%BB%8E-Vim-%E5%BC%80%E5%A7%8B.html"/>
    <id>https://blog.strongwong.top//posts/提升数字-IC-设计效率从-Vim-开始.html</id>
    <published>2018-11-12T08:10:29.000Z</published>
    <updated>2018-12-06T14:06:14.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p>这篇文章主要分享给在 Windows 下进行数字 IC 开发的盆友们，如果早已 linux，请大神自行忽略，另外建议在 Windows 下的盆友早日脚踏两只船。<br>相信大家都有过为了追一个信号而不断地缩放 RTL 图的经历，有没有一种办法能一键式一条龙服务呢？有！用 Vim！</p><p>Vim，一种类似于 notepad 的文本编辑器，其拥有你喜欢的一切功能（护眼模式，关键词高亮 …… 废话没有这些还叫代码文本编辑器），其针对 Verilog 的项目维护是真的善良，黑暗中的阳光。</p><a id="more"></a><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/top_vim.jpg" alt=""></p><p>但这阳光大多数情况下照亮于 Linux 或者 Unix 系统下，那我们试试怎么让光照进 Windows。<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/cmd_vim.jpg" alt=""></p><h2 id="安装-Cygwin"><a href="#安装-Cygwin" class="headerlink" title="安装 Cygwin"></a>安装 Cygwin</h2><blockquote><p>Cygwin 是一个在 Windows 平台上运行的 Unix 模拟环境，是 Cygnus solutions 公司开发的自由软件（该公司开发了很多好东西，著名的还有 eCos，不过现已被 Redhat 收购）。它对于学习 Unix/Linux 操作环境，或者从 Unix 到 Windows 的应用程序移植，或者进行某些特殊的开发工作，尤其是使用 gnu 工具集在 Windows 上进行嵌入式系统开发，非常有用。随着嵌入式系统开发在国内日渐流行，越来越多的开发者对 Cygwin 产生了兴趣。</p></blockquote><p>下载好 Cygwin 后选择好安装路径，然后选择镜像网址，建议选择国内的镜像地址速度会快一些。可以使用网易的镜像地址：<code>http://mirrors.163.com</code> ,在 URL 栏自行输入镜像地址点击 <code>add</code> 添加后使用。</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/cygwin_setup.jpg" alt=""></p><p>然后就进入选择安装包，初次进入建议都选择，高手可以有需要的时候可以再进来这个安装页面选择安装。<br>安装完成之后，把 Cygwin 添加到右键菜单，打开便是当前的路径下，这才是 Windows 该有的体验不是吗？而完成这一切只需简单地修改一下注册表。（以下步骤参考网络资源）：</p><blockquote><ul><li>使用<code>Win + R</code>打开运行窗口, 输入 regedit, 回车, 启动注册表编辑程序，找到 HKEY_CLASSES_ROOT\Directory\Background\shell 表项;</li><li>右键点击<code>shell</code>，选择<code>新建</code>-&gt;<code>项</code>，命名为<code>Cygwin</code>，或者其他，你右键时看到的就是<code>Cygwin</code>,或者是你自定义的名称;</li><li>右键点击刚才创建的<code>Cygwin</code>，选择<code>新建</code>-&gt;<code>项</code>,命名为<code>command</code>，表示点击该菜单项时要执行的命令;</li><li>双击<code>command</code>下<code>(默认)</code>数据项，在<code>数值数据(V)</code>下输入如下内容：<br><code>&quot;D:\Coding\Cygwin\bin\mintty.exe&quot;-i/Cygwin-Terminal.ico /bin/env _T=%V /bin/bash -l&quot;</code><br>（你的 Cygwin 安装路径）</li></ul></blockquote><p>这样就可以直接在对应的文件夹通过右击菜单打开命令行窗口。<br>Cygwin 配置好后，接下来我们继续配置一下 Vim 。</p><h2 id="Vim-配置"><a href="#Vim-配置" class="headerlink" title="Vim 配置"></a>Vim 配置</h2><ol><li><p>让<code>bash</code>命令行支持中文输入，打开 Cygwin 终端，在终端中输入如下命令 <code>vim ~/.inputrc</code>，打开inputrc 文件，将下面几行的注释去掉（去掉#），保存并退出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> meta-flag on</span><br><span class="line"><span class="built_in">set</span> convert-meta off</span><br><span class="line"><span class="built_in">set</span> input-meta on</span><br><span class="line"><span class="built_in">set</span> output-meta on</span><br></pre></td></tr></table></figure></li><li><p>让 <code>ls</code> 命令支持中文显示，在终端中输入命令 <code>vim ~/.bashrc</code> ，打开 <code>bashrc</code> 文件修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ls=<span class="string">'ls -hF –-show-control-chars –-color=tty'</span></span><br></pre></td></tr></table></figure></li><li><p>配置一个个人喜好的 Vim，打开 Cygwin 终端，输入<code>vim ~/.vimrc</code>，编辑如下设置</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> fenc=utf-<span class="number">8</span> <span class="comment">"设定默认解码 </span></span><br><span class="line"><span class="keyword">set</span> fencs=utf-<span class="number">8</span>,usc-bom,gb18030,gbk,gb2312,cp936,euc-jp</span><br><span class="line"><span class="keyword">set</span> nocp <span class="comment">"或者 set nocompatible 用于关闭 VI 的兼容模式 </span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span> <span class="comment">"显示行号 </span></span><br><span class="line"><span class="keyword">set</span> ai <span class="comment">"或者 set autoindent vim 使用自动对齐，也就是把当前行的对齐格式应用到下一行 </span></span><br><span class="line"><span class="keyword">set</span> si <span class="comment">"或者 set smartindent 依据上面的对齐格式，智能的选择对齐方式</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span> <span class="comment">"设置 tab 键为4个空格</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">sw</span>=<span class="number">4</span> <span class="comment">"或者 set shiftwidth 设置当行之间交错时使用4个空格</span></span><br><span class="line"><span class="keyword">set</span> ruler <span class="comment">"设置在编辑过程中,于右下角显示光标位置的状态行 </span></span><br><span class="line"><span class="keyword">set</span> incsearch <span class="comment">"设置增量搜索,这样的查询比较smart </span></span><br><span class="line"><span class="keyword">set</span> showmatch <span class="comment">"高亮显示匹配的括号 </span></span><br><span class="line"><span class="keyword">set</span> matchtime=<span class="number">5</span> <span class="comment">"匹配括号高亮时间(单位为 1/10 s) </span></span><br><span class="line"><span class="keyword">set</span> ignorecase <span class="comment">"在搜索的时候忽略大小写 </span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span> <span class="comment">"高亮语法</span></span><br></pre></td></tr></table></figure></li></ol><p>成功后界面如下图所示</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/vim_v.jpg" alt=""></p><h2 id="使用-Vim-提升开发效率"><a href="#使用-Vim-提升开发效率" class="headerlink" title="使用 Vim 提升开发效率"></a>使用 Vim 提升开发效率</h2><p>首先，你需要进入项目工程的顶层目录，假设你整个项目最顶层的目录名叫 Vimtest，那么你就先进入这个目录，然后调用 ctags 工具生成整个工程目录的标签列表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> Vimtest  <span class="comment"># youproject name</span></span><br><span class="line">$ ctags -R *</span><br></pre></td></tr></table></figure><p>顺利的话，你将会看到在 Vimtest 下新创建了一个叫 tags 的文件，在这个文件里将会以“<code>定义名称 文件位置：行数</code>”的格式将你所有项目中的模块，信号，参数定义全部列出，而此处参数<code>-R</code>的含义是递归执行，也就是从顶层目录向下自动遍历全部子目录进行文件检索和定义收录。在默认配置下，ctags 可以自动识别<code>.v</code>和<code>.vhdl</code>后缀文件的语法，如果你同时希望收录测试平台中的<code>.sv</code>文件的话，可能你需要额外增加一个 System Verilog 的语法说明文件。<br>有了这个标签列表之后应该如何使用呢？总不能每次都打开这个 tags 文件然后挨个查询吧？当然不是，接下来我们需要把这个 tags 文件和 Vim 结合起来。首先我们需要再次打开<code>.vimrc</code> 文件<br>打开 cygwin 终端，输入 <code>vim ~/.vimrc</code>， 打开文件后输入一下内容:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set tags=tags;</span><br><span class="line"><span class="keyword">set</span> autochdir</span><br><span class="line"><span class="keyword">nnoremap</span> t :<span class="keyword">tag</span></span><br></pre></td></tr></table></figure><p>第一行命令的含义是指定标签列表名称为 tags，命令最末的<code>;</code>号不可省略，其含义是告知 Vim 首先在当前目录下寻找 tags 文件，如果找不到则自动向更上一级目录查找，现在你明白为什么我们一开始要把 tags 文件生成在项目的顶层目录了吧。第二行命令不是必须的，其含义是每次打开新的文件时，自动将终端切换到该文件的所在目录下。</p><p>下面就是见证奇迹的时刻了。你可以进入项目目录下的任何一个子目录，然后 vim top.v（我的工程顶层文件名，你可以叫别的名字）。如果你的<code>vimrc</code>配置跟我上文写的一模一样，那么你就按一下<code>t</code>，如果你的<code>vimrc</code>里没有<code>nnoremap t:tag</code>这一句的话，请手工输入<code>:tag</code>（此处有空格）。然后接着输入任何项目中存在的模块名称，信号名称或者参数名称。比如项目中有一个模块名叫<code>uart</code>，那么完整的命令应该是<code>:tag uart</code>。注意，如果你并不记得模块的完整名称也没关系，随时按下 tab 键都可以自动补全，即使你连开头都不记得了，还可以用<code>/keyword</code>的办法进行搜索。输入完毕后按下回车，如果 Vim 在标签列表中只找到唯一匹配定义的话，就会立刻跳转到对应文件的对应行；如果找到的匹配结果不止一个，就会把所有结果列出来让你用数字序号选择跳转目标。</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/vim_tag.jpg" alt=""></p><p>很多老手看到这里可能觉得不够过瘾，就只是这样而已，我也早就会了，只不过嫌太麻烦而已，还不是要不停输入模块名称吗，能快到哪里去？呵呵，最会偷懒的我怎么可能只是做到这样的程度而已呢？<br>大家觉得，平时在修改代码设计的时候，最需要进行频繁文件跳转的是什么时候？是不是当你找到了一个关键的寄存器，想顺着信号的传播路径一直跟踪下去的时候？当你跟着这个信号来到一个模块例化面前，是不是恨不能立刻跟着信号钻进这个模块的代码里去？其实，这非常简单。</p><p>根据我们前面的介绍，你肯定已经想到了，可以通过<code>:tag module_name</code>跳转到这个模块的设计文件，但是这样太麻烦了，万一模块名字老长还带有大小写，写一遍就得费老半天功夫。有一个相对简单的办法，把光标移动到模块名称上，按下<code>ctrl+]</code>，你会发现自己立刻飞到了该模块的设计文件中！但是！！等等！！我刚才要跟踪的信号是什么名字来着？忘记了对不对？这个方法还是不够方便。<br>有没有更简单的办法？这个办法最好能从我们决定要进入这个模块的那一刻起，只用一个按键操作就能立刻进入这个模块的设计文件，同时光标最好还能直接定位到我们要追踪的信号位置，这个信号的名字最好还能被高亮显示！当！然！没！问！题！</p><p>在 vimrc 文件中加入</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">nnoremap</span> []</span><br></pre></td></tr></table></figure><p>重新打开任何 Vim 文件，假装自己跟踪到了某个模块例化的某个信号上，类似<code>.clk</code>，通常你跟踪到这里的时候，光标应该是放在 clk上面，这时你在键盘上快速按下<code>[</code>和<code>]</code>这两个键，发生了什么？？！！！我是谁？？！我在哪里？！！！恭喜你！成功进入了该模块！！！并且光标飞到了之前 clk 所连接的 module 上！！好了我们可以和过去为了追信号而需要不断 zoom in zoom out 的 RTL 图说再见了~</p><p><strong>By Ricky</strong></p><p>参考源:<br><a href="https://www.jianshu.com/p/fac45920628d" target="_blank" rel="noopener">https://www.jianshu.com/p/fac45920628d</a><br><a href="https://blog.csdn.net/samxx8/article/details/38777189" target="_blank" rel="noopener">https://blog.csdn.net/samxx8/article/details/38777189</a><br><a href="https://blog.csdn.net/hao508506/article/details/52440220" target="_blank" rel="noopener">https://blog.csdn.net/hao508506/article/details/52440220</a><br><a href="http://kellen.wang/zh/useful-skills-of-vim-while-coding-verilog/" target="_blank" rel="noopener">http://kellen.wang/zh/useful-skills-of-vim-while-coding-verilog/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vim&quot;&gt;&lt;a href=&quot;#Vim&quot; class=&quot;headerlink&quot; title=&quot;Vim&quot;&gt;&lt;/a&gt;Vim&lt;/h2&gt;&lt;p&gt;这篇文章主要分享给在 Windows 下进行数字 IC 开发的盆友们，如果早已 linux，请大神自行忽略，另外建议在 Windows 下的盆友早日脚踏两只船。&lt;br&gt;相信大家都有过为了追一个信号而不断地缩放 RTL 图的经历，有没有一种办法能一键式一条龙服务呢？有！用 Vim！&lt;/p&gt;
&lt;p&gt;Vim，一种类似于 notepad 的文本编辑器，其拥有你喜欢的一切功能（护眼模式，关键词高亮 …… 废话没有这些还叫代码文本编辑器），其针对 Verilog 的项目维护是真的善良，黑暗中的阳光。&lt;/p&gt;
    
    </summary>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/categories/IC-Design/"/>
    
      <category term="其他" scheme="https://blog.strongwong.top/categories/IC-Design/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="IC Design" scheme="https://blog.strongwong.top/tags/IC-Design/"/>
    
      <category term="Vim" scheme="https://blog.strongwong.top/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>总线- SoC 内部的主干道</title>
    <link href="https://blog.strongwong.top//posts/%E6%80%BB%E7%BA%BF-SoC-%E5%86%85%E9%83%A8%E7%9A%84%E4%B8%BB%E5%B9%B2%E9%81%93.html"/>
    <id>https://blog.strongwong.top//posts/总线-SoC-内部的主干道.html</id>
    <published>2018-11-12T03:35:18.000Z</published>
    <updated>2018-12-06T14:06:10.911Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总线——-SoC-内部的主干道"><a href="#总线——-SoC-内部的主干道" class="headerlink" title="总线—— SoC 内部的主干道"></a>总线—— SoC 内部的主干道</h2><p>开坑！从今天开始来聊一点数字 IC 的一些知识！首先来看一看总线<br>平日里我们都在讲总线总线，连接各模块的公共线，那它在 ARM 芯片中起到了啥木作用，来胡乱绉一通。</p><a id="more"></a><h3 id="总线的功能"><a href="#总线的功能" class="headerlink" title="总线的功能"></a>总线的功能</h3><p>总线通俗得理解可以完成以下功能：</p><blockquote><ul><li>提供时钟</li><li>分配（管理）地址 </li><li>响应中断</li><li>传输数据</li><li>传送控制信号</li></ul></blockquote><h2 id="USB-总线"><a href="#USB-总线" class="headerlink" title="USB 总线"></a>USB 总线</h2><p>以平日里最常见的 USB 为例，USB 其实也是一种总线如下图所示，通常我们计算机连接到 USB 后，USB 提供的总线可以拓展连接到我们的外设，例如 U 盘、键盘、鼠标等……但是设备本身不会与 CPU 进行通信，它们只与 USB HOST 进行通信，USB HOST 会给它们分配相应的中断。一旦 USB 设备插入 USB 接口引起物理上的电平变化便会有中断，此刻的中断并非 CPU 的中断，此时的中断是 USB HOST 的中断，此中断经一定的处理后发送至 CPU 后，CPU监测到是 USB HOST 中断，便将中断交付 USB HOST 进行处理。再来看地址的问题，CPU 是无法直接访问到你的设备的，红色方框内可以看做是一个“<code>家族</code>”，CPU 只能访问到其“<code>家长</code>” USB HOST，USB HOST 访问具体设备才用到地址访问。例如此时 U 盘的地址是 0x0007H，若此地址直接由 CPU 访问的话 CPU 最终只会访问到内存的 0x0007H，而非我们的 U 盘，因此将此地址交付 USB HOST 进行访问才能实现。这里就能看出不仅仅内存有地址，引入总线后，各个外设也有了对应的地址。</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/USB.png" alt="usb"></p><h2 id="AMBA-总线"><a href="#AMBA-总线" class="headerlink" title="AMBA 总线"></a>AMBA 总线</h2><p>回到 ARM 上来，ARM 的总线遵循 AMBA（ARM 爸——安谋爸爸）的总线规范，ARM 为了让大家能尽可能地接外设变作了个 AMBA 总线规范，通常 AMBA 规范下常见的总线分别是 AHB（高速总线），APB（外设总线），ASB（AHB 备胎）如图所示。</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/amba.png" alt="amba"></p><p>我们可以把 APB 总线当做乡村公路，AHB 总线当做一条省道，把这两条路连接起来的“<code>十字路</code>”可以叫做“<code>Bus bridges</code>”。AHB 上的设备通常速度较快例如：内存控制器，NAND Flash …… APB 就较慢，例如 UART，GPIO ……最直观的 UART 通常我们最快设置的波特率大概就 115200，还不到 M 级，因此就放在乡村公路跑就可以了。那么不同的路就要跑不同的频率，那么通常设计的外设的 controller 时，其控制时钟就由总线提供，以保证操作的同步性，那么在 IP 中我们就可以看到有叫做 HCLK（AHB）的信号和 PCLK（APB）的信号。我们还可以看到在 M3 和总线之间还有一个模块叫做 BusMatrix，其主要负责多主设备和多从设备的交互和仲裁，目的是为了提高不同主机访问不同外设情况下的带宽，另外一个就是简化 Bus Master 的协议设计（今后有机会进去分析）。</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/hclk_pclk.jpg" alt=""></p><h2 id="FCLK、HCLK、PCLK"><a href="#FCLK、HCLK、PCLK" class="headerlink" title="FCLK、HCLK、PCLK"></a>FCLK、HCLK、PCLK</h2><p>我们都知道的是芯片内部的“<code>心跳</code>”是由外部晶振给的，外部晶振通常就十几二十兆，但芯片内部动辄七八十兆甚至上 G，那这里就离不开一个叫 CLKCNTL 的东西，它负责提各个部分的“<code>心跳</code>”。刚才我们也说到 APB 和 AHB 是不同速度的公路，因此它们的工作频率是不同的（实际上可以相同的，但其分类的意义就不大了），而 CPU 本身的工作频率也是不同的。如图所示，给 ARM 用的是 FCLK（全局时钟）， 你可以将 PLL 出来的 70MHz 频率分频多少给 FCLK，将 70MHz 频率分频多少给 HCLK,PCLK 这就是 CLKCNTL 做的事，CLKCNTL 分配出来的 FCLK,HCLK,PCLK 三者成一定的倍数关系。</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/ambaclk.png" alt=""></p><p>具体到 AHB,APB 总线协议和使用应用，今后我们将会逐一胡扯乱绉。技术不到家全靠虾扯蛋，错误应该是满天飞，望各位大神指正。先挖个坑，下次更 AHB 总线下 SRAM 的控制器设计。</p><p><strong>By Ricky</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;总线——-SoC-内部的主干道&quot;&gt;&lt;a href=&quot;#总线——-SoC-内部的主干道&quot; class=&quot;headerlink&quot; title=&quot;总线—— SoC 内部的主干道&quot;&gt;&lt;/a&gt;总线—— SoC 内部的主干道&lt;/h2&gt;&lt;p&gt;开坑！从今天开始来聊一点数字 IC 的一些知识！首先来看一看总线&lt;br&gt;平日里我们都在讲总线总线，连接各模块的公共线，那它在 ARM 芯片中起到了啥木作用，来胡乱绉一通。&lt;/p&gt;
    
    </summary>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/categories/IC-Design/"/>
    
      <category term="其他" scheme="https://blog.strongwong.top/categories/IC-Design/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="IC Design" scheme="https://blog.strongwong.top/tags/IC-Design/"/>
    
      <category term="SoC" scheme="https://blog.strongwong.top/tags/SoC/"/>
    
      <category term="AMBA" scheme="https://blog.strongwong.top/tags/AMBA/"/>
    
  </entry>
  
  <entry>
    <title>使用树莓派 3b 和 RTL_SDR 搭建小功率无线电监测点</title>
    <link href="https://blog.strongwong.top//posts/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE3b%E5%92%8CRTL-SDR%E6%90%AD%E5%BB%BA%E5%B0%8F%E5%8A%9F%E7%8E%87%E6%97%A0%E7%BA%BF%E7%94%B5%E7%9B%91%E6%B5%8B%E7%82%B9.html"/>
    <id>https://blog.strongwong.top//posts/使用树莓派3b和RTL-SDR搭建小功率无线电监测点.html</id>
    <published>2018-09-16T12:03:40.000Z</published>
    <updated>2018-10-13T05:25:50.723Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了两部关于无线电相关的电影（『时空接触』、『黑洞频率』），对与无线电产生了很大的兴趣。现代由于互联网的发展，玩无线电的人越来越少了，了解无线电知识的人也不多了。但是还是有很多人在学习和使用软件定义无线电( Software Defined Radio – SDR )，软件无线电可以做很多神奇事情！！</p><a id="more"></a><h2 id="SDR-是个什么东西？"><a href="#SDR-是个什么东西？" class="headerlink" title="SDR 是个什么东西？"></a>SDR 是个什么东西？</h2><blockquote><p>“软件无线电”( Software Defined Radio – SDR )。实际上软件无线电技术的研究和开发已经有几十年的历史了，其中传统上以硬件实现的组件（例如混频器，滤波器，放大器，调制器\解调器，检测器等），通过个人计算机或嵌入式系统上的软件实现。最初源于美军的多制式电台项目，应用在军事领域。<br>在 21 世纪初，由于众多公司的努力，使得它已从军事领域转向民用领域，成为经济的、应用广泛的、全球第三代移动通信系统的战略基础。<br>到今天我们日常使用的移动通信系统中就在大量使用软件无线电技术， 比如基站中的信号处理大量的使用可编程的 FPGA 和 DSP 完成，比如手机当中的基带处理器也越来越多的采用软解调的方法(少数运算量特别大实时性要求特别高的模块除外，比如 turbo 解码器、扩频相关器等，这些模块往往在基带处理器中嵌入一些高度定制化”硬”核来实现)。</p></blockquote><p>所以我们想要监听周围的无线电信号，自然是需要一个硬件的。</p><h2 id="需要的硬件"><a href="#需要的硬件" class="headerlink" title="需要的硬件"></a>需要的硬件</h2><ul><li>RTL-SDR (或者 HackRF等)</li><li>Raspberry Pi 3 (或者 Linux 系统的电脑)</li><li>有网络</li><li>高频天线</li></ul><p>我选择的是一根支持 rtl-sdr 的电视棒，就是采用 RTL2832u (频率范围为 64-1700mh )解调芯片的。这是瑞晟( Realtek )的一个芯片型号，原本是做电视棒芯片的。后来被人发现这个芯片具有非常广的频率接收范围，然后就被用来做 sdr 应用了。十分廉价！</p><h2 id="安装-RTL-SDR-驱动程序"><a href="#安装-RTL-SDR-驱动程序" class="headerlink" title="安装 RTL_SDR 驱动程序"></a>安装 RTL_SDR 驱动程序</h2><p>硬件已经有了，接下来就是安装相关的软件驱动，才可以使用</p><p>打开一个 Terminal 窗口，进入到你的 home 目录下。先更新一下系统的软件，然后开始安装需要的软件依赖。具体操作如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install git</span><br><span class="line">$ sudo apt-get install cmake</span><br><span class="line">$ sudo apt-get install build-essential</span><br><span class="line">$ sudo apt-get install libusb-1.0-0-dev</span><br></pre></td></tr></table></figure></p><p>相关的依赖软件安装完成后，接下来下载 RTL2832u Osmocom 的驱动源代码，进行编译安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://git.osmocom.org/rtl-sdr.git</span><br><span class="line">$ <span class="built_in">cd</span> rtl-sdr</span><br><span class="line">$ mkdir -p build</span><br><span class="line">$ <span class="built_in">cd</span> build</span><br><span class="line">$ cmake ../ -DINSTALL_UDEV_RULES=ON</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br><span class="line">$ sudo ldconfig</span><br><span class="line">$ sudo cp ../rtl-sdr.rules /etc/udev/rules.d</span><br></pre></td></tr></table></figure></p><p>将使用电视棒作为电视设备自动加载的默认驱动程序列入黑名单，因为它不能让电视棒作为 SDR 使用，并且将会与我们刚刚安装的新 Osmocom 驱动程序发生冲突</p><ul><li><ol><li>以 administrator 权限打开 <code>/etc/modprobe.d</code> 文件夹</li></ol></li><li><ol start="2"><li>在该目录下创建一个叫 <code>blacklist-rtl.conf</code> 的新文件，打开文件，在文件中加入 <code>blacklist dvb_usb_rtl28xxu</code> 这条指令</li></ol></li><li><ol start="3"><li>保存文件，并重启</li></ol></li></ul><p>机器重启后，将电视棒插入 usb 接口，打开 Terminal 窗口，输入 <code>rtl_test -t</code> 命令，测试电视棒是否能够被正常驱动。<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/rtl_test.png" alt=""><br>不用担心 PLL 未锁定或未找到 E4000 调谐器或 R820T 而不是 R820T2 等消息。如果你看到跟上图一样的内容，那么说明你的驱动程序安装成功了，并且电视棒成功运行。 接着你就可以安装一些应用程序，来收听无线电信号。</p><h2 id="安装-dump1090"><a href="#安装-dump1090" class="headerlink" title="安装 dump1090"></a>安装 dump1090</h2><p>电视棒的 rtl_sdr 驱动程序安装好了之后，我们在安装一个 dump1090 应用程序，这样我们就可以接收飞机的信号。<br>能很容易的捕获到飞机是飞机在飞行过程中要不断的报告自身的飞行状态(在 1090Mhz 频率进行广播)，这就是 ADS-B( 广播式自动相关监视系统) ，即一种航空交通监视系统，而且是使用全球性导航卫星系统、飞机xo的航电设备和地面基础设施， 能够在飞机和航管地面站 ( air-to-ground 即 aircraft to ATS ) 或是空对空 ( air-to-air 即 aircraft to aircraft )之间准确和迅速自动地传送飞行讯息； 其中包括有飞机的识别、位置、高度、速度和其他数据或信息。简单来说 ADS-B 是由飞机直接发出的数据包，让地面或其他飞机可以得知它的位置、高度、速度等信息。ADS-B 利用 112 个未加密的脉冲字在 978Mhz、1090Mhz 发射的信号。我们使用电视棒捕获这些信号，并通过 dump1090 将捕获到信号解析成飞机飞行的信息，生成地图。这样我们就能知道飞机的实时位置及其他信息。</p><p>打开一个新的 Terminal 窗口，安装 dump1090，并开启 dump1090 服务，然后我们就可以在 Terminal 窗口和浏览器中查看到飞行信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ git <span class="built_in">clone</span> git://github.com/tedsluis/dump1090.git</span><br><span class="line">$ <span class="built_in">cd</span> dump1090</span><br><span class="line">$ make    <span class="comment"># 编译源码</span></span><br><span class="line">$ ./dump1090 --interactive --net --<span class="built_in">enable</span>-agc<span class="comment"># run dump1090</span></span><br></pre></td></tr></table></figure></p><p>收到的飞机的飞行信息如下图，dump 在启动时会开启自带的 WEB 服务器，并且 WEB 调用了谷歌地图的 API 接收到飞机的一些信息后会在页面地图上描绘出飞机的轨迹(谷歌地图目前需要科学上网)<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/dump1090.png" alt=""><br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/dump1090air.png" alt=""><br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/dump1090air2.png" alt=""><br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/air.jpg" alt=""></p><h2 id="安装-GQRX-收听各频率的广播"><a href="#安装-GQRX-收听各频率的广播" class="headerlink" title="安装 GQRX 收听各频率的广播"></a>安装 GQRX 收听各频率的广播</h2><p>我们可以收听广播或者火腿(无线电爱好者)的呼叫。但是这里我在树莓派上没有安装成功。因为 GUN Radio 安装不成功的问题。<br>不过我在 windows 上听到了广播。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看了两部关于无线电相关的电影（『时空接触』、『黑洞频率』），对与无线电产生了很大的兴趣。现代由于互联网的发展，玩无线电的人越来越少了，了解无线电知识的人也不多了。但是还是有很多人在学习和使用软件定义无线电( Software Defined Radio – SDR )，软件无线电可以做很多神奇事情！！&lt;/p&gt;
    
    </summary>
    
      <category term="无线电" scheme="https://blog.strongwong.top/categories/%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
    
      <category term="SDR" scheme="https://blog.strongwong.top/tags/SDR/"/>
    
      <category term="树莓派" scheme="https://blog.strongwong.top/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>关于 ARM Cortex-M3 的启动文件分析及分散加载</title>
    <link href="https://blog.strongwong.top//posts/%E5%85%B3%E4%BA%8E-ARM-Cortex-M3-%E7%9A%84%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90%E5%8F%8A%E5%88%86%E6%95%A3%E5%8A%A0%E8%BD%BD.html"/>
    <id>https://blog.strongwong.top//posts/关于-ARM-Cortex-M3-的启动文件分析及分散加载.html</id>
    <published>2018-09-07T03:22:44.000Z</published>
    <updated>2018-11-24T02:18:31.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于-ARM-Cortex-M3-的启动文件分析及分散加载"><a href="#关于-ARM-Cortex-M3-的启动文件分析及分散加载" class="headerlink" title="关于 ARM Cortex-M3 的启动文件分析及分散加载"></a>关于 ARM Cortex-M3 的启动文件分析及分散加载</h2><p>下面以 ARM Cortex-M3 裸核的启动代码为例，做一下简单的分析。首先，在启动文件中完成了三项工作：</p><ul><li>堆栈以及堆的初始化</li><li>定位中断向量表</li><li>调用 Reset Handler</li></ul><a id="more"></a><p>在介绍之前，我们先了解一下 ARM 芯片启动文件中涉及到的一些汇编指令的用法。<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4.jpg" alt=""></p><p>补充一下，其中 DCD 相当于 C 语言当中的 &amp;，定义地址。</p><h2 id="堆栈以及堆的初始化"><a href="#堆栈以及堆的初始化" class="headerlink" title="堆栈以及堆的初始化"></a>堆栈以及堆的初始化</h2><h3 id="堆栈的初始化"><a href="#堆栈的初始化" class="headerlink" title="堆栈的初始化"></a>堆栈的初始化</h3><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6%E5%A0%86%E6%A0%88%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%A3%E7%A0%81.jpg" alt="Startup_xxx.s 中的堆栈初始化代码"></p><p><code>Stack_Size  EQU  0x00000400</code><br>这个语句相当于 Stack_Size 这个标号（标号：链接器的术语，下文中提到的所有“标号”，指的都是指的链接器中的标号）等于 0x00000400 相当于 C 语言中的 <code>#define  Stack_Size  0x00000400</code> ，也就是说此语句只是一个声明，并未分配地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AREA    STACK, NOINIT, READWRITE, ALIGN=3</span><br></pre></td></tr></table></figure><p>此语句定义了一个叫 STACK 的代码段，并指明 8 字节对齐（ALIGN = 3）。其中 NOINIT 表示未初始化，READWRITE 表示可读可写，ALIGN = 3，即表示 2^3 = 8，八字节对齐。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stack_Mem    SPACE   Stack_Size</span><br></pre></td></tr></table></figure><p>这里是为 Stack_Mem 分配 Stack_Size 大小的一块内存区域，注意这里分配的是 RAM ，即分配了大小为 1KB 的内存空间（0x00000400 = 1024）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__initial_sp</span><br></pre></td></tr></table></figure><p>紧跟着栈分配内存后，所以其为栈顶（满递减栈）。此标号有一层隐含的意思就是在 M3 中堆栈是满递减堆栈，因为它指定了堆栈指针位于堆栈的高地址（在 Stack_Mem 之后），具体如下图所示。</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E5%A0%86%E6%A0%88%E6%8C%87%E9%92%88.jpg" alt="堆栈指针 sp 位置"></p><p>上图来自 Cortex_M3 的一个工程的 xxx.map 文件。可以看出栈的起始地址为 0x20000c68，大小为 1024 字节（即 0x00000400 = Stack_Size）。而堆栈指针的位置在 0x20001068，其等于栈的起始地址 0x2000c68 + 0x00000400，说明本系列的 Cortex_M3 微控制器的堆栈为满递减堆栈。<br>所以 __initial_sp 为 1KB 空间栈的栈顶，栈主要用于局部变量和形参的调用过程的临时存储，属于编译器自动分配和释放的内存，所以这里需要注意如果你的函数所占的内存过大，那么这个空间应调整其大小但一定要小于内部 SRAM 的大小。堆是程序员空间是程序员进行分配和释放的，如果程序中未释放最后由系统回收。</p><h3 id="堆的初始化"><a href="#堆的初始化" class="headerlink" title="堆的初始化"></a>堆的初始化</h3><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E5%A0%86%E5%88%9D%E5%A7%8B%E5%8C%96.jpg" alt="Startup_xxx.s 中的堆初始化代码"></p><p>堆的初始化过程与堆栈的初始化相同。</p><h2 id="中断向量表的初始化"><a href="#中断向量表的初始化" class="headerlink" title="中断向量表的初始化"></a>中断向量表的初始化</h2><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E4%B8%AD%E6%96%AD%E5%90%91%E9%87%8F%E8%A1%A8.jpg" alt="中断向量表的初始化代码（部分）"></p><p><code>PRESERVE8</code> 指定了以下的代码为 8 字节对齐，这是 keil 编译器的一个编程要求，对齐情况如下图所示：</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/8%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90.jpg" alt="xxx.list文件中的8字节对齐示意图"></p><p><code>THUMB</code> 指定了接下来的代码为 THUMB 指令集。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AREA    RESET, DATA, READONLY</span><br></pre></td></tr></table></figure><p>此语句声明 RESET 数据段。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPORT  __Vectors</span><br></pre></td></tr></table></figure></p><p>导出向量表标号，EXPORT 作用类似于 C 语言中的 extern。之后的代码就是为向量表分配存储区域。中断向量表从 FLASH 的 0x00000000 地址开始放置，以 4 个字节为一个单位，地址 0 存放的是栈顶指针（ sp ）的地址，0x00000004 存放的是复位程序的地址，往后以此类推，这里我们只设置了一个 Reset_Handler 向量。从代码上看，向量表中存放的都是中断服务函数的函数名，可我们知道 C 语言中的函数名就是一个地址。（由此我们知道，中断函数的函数名都已经知道了，我们在写对应的中断服务程序时，从对应的地址取服务例程的入口地址并跳入执行）。但是此处有一个要注意的，就是 0 号地址不是什么入口地址，而是给出的复位后的 MSP 的初值。</p><h2 id="调用-Reset-Handler"><a href="#调用-Reset-Handler" class="headerlink" title="调用 Reset Handler"></a>调用 Reset Handler</h2><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/reset_handler.jpg" alt="调用 Reset Handler 的代码"></p><p>此段代码只完成了一个功能，引导程序进入 <strong>main 。 </strong>main 的具体行为在后面做具体描述。<br><code>PROC</code> 与 <code>ENDP</code> 两个关键字组合在汇编中定义了一段子函数。<br>用户堆栈的初始化</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E5%A0%86%E6%A0%88%E5%88%9D%E5%A7%8B%E5%8C%96%E5%85%B7%E4%BD%93%E4%BB%A3%E7%A0%81.jpg" alt="具体的堆栈以及堆的初始化行为"></p><p>这一部分也就是把初始化的堆栈地址赋值给单片机的对应寄存器以方便 C 程序进行分配释放使用。</p><h2 id="其他代码"><a href="#其他代码" class="headerlink" title="其他代码"></a>其他代码</h2><p>有一些芯片厂商对芯片的加密的加密级别的代码也会放在这里，芯片上电后会自动读取这一地址的值以确定芯片的加密方式。</p><h2 id="ARM-芯片的启动过程详解"><a href="#ARM-芯片的启动过程详解" class="headerlink" title="ARM 芯片的启动过程详解"></a>ARM 芯片的启动过程详解</h2><p>接下来介绍 <strong>main 函数的具体实现过程。<br>首先在介绍 </strong>main 函数之前，我们先了解一些关于 ARM 芯片在启动过程中的基本知识。<br>“ ARM 程序”是指在 ARM 系统中正在执行的程序，而非保存在 ROM 中的 .bin(.axf,.hex)映像（ image ）文件。<br>一个 ARM 程序包含 3 部分：RO ，RW 和 ZI</p><ul><li>RO 就是只读数据，是程序中指令和常量；</li><li>RW 是可读写的数据，程序中已初始化变量；</li><li>ZI 是程序中未初始化的变量和初始化为 0 的变量。<br>简单理解就是：<br>  RO 就是 readonly ，RW 就是 read/write，ZI 就是 zero initial。</li></ul><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/arm%E8%8A%AF%E7%89%87%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B.jpg" alt="ARM 芯片的启动过程详解"></p><p>注意，以上的过程并非绝对的，不同的 ARM 架构或者是不同的代码以上的执行过程是不同的。<br>复位处理程序是在汇编器中编写的短模块，系统一启动就立即执行。复位处理程序最少要为应用程序的运行模式初始化堆栈指针。对于具有本地内存系统（如缓存、TCM 、MMU 和 MPU）的处理器，某些配置必须在初始化过程的这一阶段完成。复位处理程序在执行之后，通常跳到 <strong>main 以开始 C 库初始化序列。</strong>main 中的 <strong>scatterload 负责设置内存，而 </strong>rt_entry 负责设置运行时的环境。<strong>scatterload 中负责把 RO/RW （非零）输出段从装载域地址复制到运行域地址（执行代码和数据复制、解压缩），并完成 ZI 段运行域数据的 0 初始化工作。然后跳到 </strong>rt_entry 设置堆栈和堆、初始化库函数和静态数据。然后，<strong>rt_entry 跳转到应用程序的入口 main() 。主应用程序结束执行后，</strong>rt_entry 将库关闭，然后把控制权交换给调试器。函数标签 main() 具有特殊含义。Main() 函数的存在强制链接器链接到 <strong>main 和 </strong>rt_entry 中的代码。如果没有标记为 main() 的函数，则没有链接到初始化序列，因而部分标准 C 库功能得不到支持。</p><h2 id="结合代码来看芯片启动过程"><a href="#结合代码来看芯片启动过程" class="headerlink" title="结合代码来看芯片启动过程"></a>结合代码来看芯片启动过程</h2><p>上电后硬件设置 sp 、pc ，刚上电复位后，硬件会自动根据向量表地址找到向量表。<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sp_pc.jpg" alt=""></p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sp_pc1.jpg" alt=""></p><p>在离开复位状态后， CM3 做的第一件事就是读取下列两个 32 位整数的值：</p><ul><li>1.从地址 0x0000 0000 处取出 MSP 的初始值。</li><li>2.从地址 0x0000 0004 处取出 PC 的初始值，这个值是复位向量， LSB 必须是 1 。 然后从这个值所对应的地址处取指。<br>硬件自动从 0x0000 0000 位置处读取数据赋给栈指针 sp，然后从 0x0000 0004 位置处读取数据赋给 pc 指针，完成复位，结果为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SP = 0x2000 1068 </span><br><span class="line">PC = 0x0000 011D</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/reset%E5%90%AF%E5%8A%A8.jpg" alt=""></p><p>这与传统的 ARM 架构不同——其实也和绝大多数的其它单片机不同。传统的 ARM 架构总是从 0 地址开始执行第一条指令。它们的 0 地址处总是一条跳转指令。在 CM3 中，在 0 地址处提供 MSP 的初始值，然后紧跟着就是向量表。向量表中的数值是 32 位的地址，而不是跳转指令。向量表的第一个条目指向复位后应执行的第一条指令，就是我们上面分析的 Reset_Handler 这个函数。</p><p>进入__main<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LDR   R0, =__main</span><br><span class="line">BX　　R0</span><br></pre></td></tr></table></figure></p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/__main%E4%BB%A3%E7%A0%81.jpg" alt=""></p><p>执行上两条指令，跳转到 <strong>main 程序段运行，</strong>main 的地址是 0x0000 0080 ，上一步指令 pc = 0x0000 011D 的地址没有对齐，硬件自动对齐到 0x0000 011C，执行 __main。</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/0x0000012c.jpg" alt=""></p><p>pc 指针通过立即数寻址，跳转到 0x0000 0081 处执行，同上这里也会自动对齐到 0x0000 0080 处。</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/0x00000088.jpg" alt=""></p><p>在 <strong>scatterload 函数中又会进入 </strong>scatterload_copy ，在 __scatterload_copy 中进行代码搬运，主要是加载已经初始化的数据段和未初始化的数据段，同时还会初始化栈空间，即 ZI 段清零（其中搬运次数由代码中声明的变量类型和变量多少来决定）。</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/ZI%E6%AE%B5%E6%B8%85%E9%9B%B6.jpg" alt=""></p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/__rt_entry.jpg" alt=""></p><p>然后会跳转到 <strong>rt_entry 函数执行，</strong>rt_entry 是使用 ARM C 库的程序的起点。将所有分散加载区重新定位到其执行地址后，会将控制权传递给 <strong>rt_entry 。如下图，在 </strong>rt_entry 中主要实现如下几个功能：</p><ul><li>1.设置用户的堆和堆栈</li><li>2.调用 __rt_lib_init 以初始化 C 库</li><li>3.调用 main()</li><li>4.调用 __rt_lib_shutdown 以关闭 C 库</li><li>5.退出</li></ul><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/C_library.jpg" alt=""></p><p><strong>rt_lib_init 函数是库函数初始化函数，它与 </strong>rt_lib_shutdown 配合使用。并且这个函数紧靠 __rt_stackheap_init() 后面调用，即紧跟堆和堆栈初始化后面调用，并且传递一个要用作堆的初始内存块。此函数是标准ARM库初始化函数，不能重新实现此函数。</p><p><strong>注意：最后两步是在程序退出 main() 函数的时候才会执行，而我们嵌入式程序一般都是死循环，所以基本上不会执行这两个过程。还有以上过程是针对使用标准 C Library 而言的，不包括使用 MDK 提供的 microlib 库的情况。</strong></p><p>在 <strong>rt_entry_main 中，用户程序就开始正式执行了（进入 C 的世界）。在此之前初始化 MSP 是必需的，因为可能第 1 条指令还没来得及执行，就发生了 NMI 或是其它 fault。 MSP 初始化好后就已经为它们的服务例程准备好了堆栈。这也就是 </strong>main 中做的事情。</p><h2 id="最后关于-microlib-库"><a href="#最后关于-microlib-库" class="headerlink" title="最后关于 microlib 库"></a>最后关于 microlib 库</h2><p>Microlib 是缺省 C 库的备选库。它旨在与需要装入到极少量内存中的深层嵌入式应用程序配合使用。这些应用程序不在操作系统中运行，因此 microlib 进行了高度优化以使代码变得很小，当然它的功能相比缺省 C 库少，并且根本不具备某些 ISO C 特性。某些库函数的运行速度也比较慢，比如 memcpy()。 </p><p>Microlib与缺省C库之间的主要差异是：</p><blockquote><p>Microlib 不符合 ISO C 库标准。不支持，某些 ISO 特性，并且其他特性具有的功能也比较少；<br>Microlib 不符合 IEEE754 二进制浮点算法标准；<br>Microlib 进行了高度优化以使代码变得很小；<br>无法对区域设置进行配置。缺省 C 区域设置是唯一可用的区域设置；<br>不能将 main() 声明为使用参数，并且不能返回内容；<br>不支持 stdio ，但未缓冲的 stdin、stdout 和 stderr 除外；<br>Microlib 对 C99 函数提供有限的支持；<br>Microlib 不支持操作系统函数；<br>Microlib 不支持与位置无关的代码；<br>Microlib 不提供互斥锁来防止非线程安全的代码；<br>Microlib 不支持宽字符或多字节字符串；<br>与stdlib 不同， microlib 不支持可选的单或双区内存模型。 Microlib 只提供双区内存模型，即单独的堆栈和堆区。</p></blockquote><h2 id="关于生成的-xxx-map-文件"><a href="#关于生成的-xxx-map-文件" class="headerlink" title="关于生成的 xxx.map 文件"></a>关于生成的 xxx.map 文件</h2><p>想要更好的了解启动代码的运行机制，我们就有必要了解一下由 Keil 的链接器“ armlink ”生成的描述文件，即 xxx.map 文件。</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/map%E6%96%87%E4%BB%B6.jpg" alt="目标文件的组成"></p><p>上图即是 armlink 的链接器为测试代码生成的 xxx.map 文件中的一部分，其描述了镜像文件的组成信息，其中可以明显看到其由两部分构成：</p><ul><li>User Code 生成的目标文件</li><li>C Library 生成的目标文件</li></ul><p>可见我们在上文中所描述的启动过程中看到的 <strong>main 、 </strong>rt_entry 、 <strong>scartterload 以及 </strong>rt_lib_init 等，就是 C library 中的代码。<br>所以，我们每次烧录的可执行的 ARM 的 bin 文件中不仅有开发者编写的代码，还有 C Library 的代码。</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/map%E4%B8%ADRW%E6%AE%B5.jpg" alt=""><br>上图为存放在RAM中的RW段。</p><h2 id="关于分散加载"><a href="#关于分散加载" class="headerlink" title="关于分散加载"></a>关于分散加载</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>由于 ARM Cortex-M3 系列是哈佛架构，哈佛架构是一种将程序指令存储和数据存储分开的存储器结构，所以它在运行时，指令存储在片内的 flash 上，数据存储在片内 SRAM 中。因此程序是可以直接在 flash 上运行的，而不是先将 flash 上的程序全部搬运到 RAM 在运行。<br>由此，我们也可以深入了解一下 ARM 映像（镜像）文件。 ARM 映像文件其实就是源文件经编译器生成的目标文件 .obj（object file）和相应的 C/C++ 运行时库（ Runtime Library ）经过连接器的处理后，生成的 axf 格式的映像文件，它可以直接烧录到目标设备的 ROM 中直接运行或加载后运行。</p><h3 id="映像文件的类型"><a href="#映像文件的类型" class="headerlink" title="映像文件的类型"></a>映像文件的类型</h3><p>常见的映像文件还包括 bin 、 hex 和 elf 文件，在 keil 调试过程中，调试器生成 axf 文件也是一种映像文件。<br>Bin 文件是纯粹的二进制机器代码，或者说是“顺序格式”。按照汇编代码顺序翻译成的二进制机器码，内部没有地址标记。 Bin 文件是直接的内存映像表示，二进制文件大小即为文件所包含的数据的实际大小。<br>Hex 文件是 Intel 标准的十六进制文件，通常用来保存单片机或其他处理器的目标程序代码。它保存物理程序存储区中的目标代码映像。一般的编程器都支持这种格式。就是机器代码的十六进制形式，并且是用一定文件格式的 ASCII 码来表示。在 Hex 文件里面，每一行代表一个记录。每条记录都由一个冒号“：”打头，其格式如下：<br><strong> :BBAAAATTHHHH…HHHHCC </strong></p><blockquote><p>BB:字节个数。<br>AAAA:数据记录的开始地址,高位在前,低位在后。<br>TT: Type<br>00 数据记录，用来记录数据。<br>01 记录结束，放在文件末尾，用来标识文件结束。<br>02 用来标识扩展段地址的记录<br>04 扩展地址记录(表示 32 位地址的前缀)<br>HHHH:一个字( Word )的数据记录,高字节在前,低字节在后。TT 之后共有 BB/2 个字的数据 。<br>CC: 占据一个 Byte 的 CheckSum </p></blockquote><p>ELF（ Executableand linking format ）文件是 x86 Linux 系统下的一种常用目标文件( objectfile )格式，有三种主要类型:</p><blockquote><p>(1)适于连接的可重定位文件( relocatablefile )，可与其它目标文件一起创建可执行文件和共享目标文件。<br>(2)适于执行的可执行文件( executable file )，用于提供程序的进程映像，加载到内存执行。<br>(3)共享目标文件( shared object file )，连接器可将它与其它可重定位文件和共享目标文件连接成其它的目标文件，动态连接器又可将它与可执行文件和其它共享目标文件结合起来创建一个进程映像。<br>Axf 文件由 ARM 编译器产生，除了包含 bin 的内容之外，还附加其他调试信息，这些调试信息加在可执行的二进制数据之前。调试时这些调试信息不会下载到 RAM 中，真正下载到 RAM 中的信息仅仅是可执行代码。因此，如果 ram 的大小小于 axf 文件的大小，程序是完全有可能在 ram 中调试的，只要 axf 除去调试信息后文件大小小于 ram 的大小即可。</p></blockquote><p><strong> 总结：</strong></p><ul><li>（1） axf 和 elf 都是编译器生成的可执行文件。区别是：ADS 编译出来的是 AXF 文件。gcc 编译出来的是 ELF 文件。两者虽然很像，但还是有差别的。这是文件格式的差别，不涉及调试格式。</li><li>（2）axf/elf 是带格式的映象，bin 是直接的内存映象的表示。</li><li>（3）Linux OS 下，ELF 通常就是可执行文件，通常 <code>gcc -o test test.c</code>，生成的 test 文件就是 ELF 格式的，在 Linux Shell 下输入 <code>./test</code> 就可以执行。在 Embedded 中，上电开始运行，没有 OS 系统，如果将 ELF 格式的文件烧写进去，包含一些 ELF 格式的东西，arm 运行碰到这些指令，就会导致失败，如果用 bin 文件，程序就可以一步一步运行。<br>所以最终放进 flash 的是 bin 文件。 elf 文件可转化为 hex 和 bin 两种文件， hex 也可以直接转换为 bin 文件，但是 bin 要转化为 hex 文件必须要给定一个基地址。而 hex 和 bin 不能转化为 elf 文件，因为 elf 的信息量要大。 Axf 文件可以转化为 bin 文件，KEIL 下可用以下命令 <code>fromelf -nodebug xx.axf -bin xx.bin</code> 即可。</li></ul><h3 id="映像文件的组成"><a href="#映像文件的组成" class="headerlink" title="映像文件的组成"></a>映像文件的组成</h3><p>镜像文件组成如下图所示：</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6.jpg" alt="镜像文件的组成"></p><p>可执行文件由映像、区（域）、输出节（段）和输入节（段）的层次结构构成：</p><blockquote><p>映像由一个或多个区组成。每个区由一个或多个输出节组成。<br>每个输出节包含一个或多个输入节。<br>输入节是对象文件中的代码和数据信息。<br>输入节：输入节包含代码、初始化数据，或描述未初始化的或在映像执行之前必须设定为 0 的内存片段。这些特性通过 RO 、 RW 和 ZI 这样的属性来表示。<br>输出节：一个输出节由若干个具有相同 RO 、 RW 或 ZI 属性的相邻输入节组成。输出节的属性与组成它的输入节的属性相同 。<br>区：一个区由一个、两个或者三个相邻的输出节组成。区中的输出节根据其属性排序。首先是 RO 输出节，然后是 RW 输出节，最后是 ZI 输出节。区通常映射到物理内存设备，如 ROM 、 RAM 或外围设备。</p></blockquote><p>有时候用户希望将不同代码放在不同存储空间，也就是通过编译器生成的映像文件需要包含多个域，每个域在加载和运行时可以有不同的地址。要生成这样的映像文件，必须通过某种方式告知编译器相关的地址映射关系。在 Keil/ADS/IAR 等编译工具中，可通过分散加载机制实现。分散加载通过配置文件实现，这样的文件就称为分散加载文件。<br>分散加载( scatter loading )为 *.scf 文件。它提供这样一种机制：可以将内存变量定位于不同的物理地址上的存储器或端口，通过访问内存变量即可达到访问外部存储器或外设的目的；同时通过分散加载，让大多数程序代码在高速的内部 RAM 中运行，从而使得系统的实时性大大增强。这样，定位在 RAM 存储器的代码和数据就在 RAM 存储器中运行，而不再从 ROM 存储器中取数据或取指令，从而大大提高了 CPU 的运行速率和效率。<br>编译过程<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.jpg" alt="编译过程"><br>加载过程<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E7%AE%80%E5%8D%95%E5%8A%A0%E8%BD%BD.jpg" alt="简单的加载过程"></p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E8%BE%93%E5%87%BA%E7%9A%84map%E5%A4%A7%E5%B0%8F.jpg" alt="输出的map文件"></p><p>ROM（Flash）size = Code + RO_Data + RW_Data = 0.5kb；<br>RAM size = RW_Data + ZI_Data = 4.1kb。</p><p>加载时域的描述<br>sct 文件<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sct%E6%96%87%E4%BB%B6.jpg" alt=".sct文件"></p><p>LR_IROM1 加载区域名，用于“ Linker ”区别不同的加载区域，最多 31 个字符；用来保存永久性数据（程序和只读变量）的区域；<br>ER_IROM1 执行区域名；程序执行时，从加载区域将数据复制到相应执行区后才能被正确执行；</p><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">LR_IROM1 0x00000000  0x00040000  &#123;    ; load region size_region</span><br><span class="line">  ER_IROM1 0x00000000  0x00010000  &#123;  ; load address = execution address</span><br><span class="line">   *.o (RESET, +First)</span><br><span class="line">   *(InRoot$$Sections)</span><br><span class="line">   .ANY (+RO)</span><br><span class="line">  &#125;</span><br><span class="line">  RW_IRAM1 0x20010000  0x00010000  &#123;  ; RW data</span><br><span class="line">   .ANY (+RW +ZI)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>LR_IROM1 0x00000000 0x00040000<br>定义一个加载时域，域基址：0x00000000，域大小为 0x00040000，对应实际 Flash 的大小<br>ER_IROM1 0x00000000 0x00010000<br>定义一个运行时域，第一个运行时域必须和加载时域起始地址相同，否则库不能加载到该时域的错误，其域大小一般也和加载时域大小相同，但是我们这里没有 flash ，只有 128k 的 RAM ，这里分配 64k 作为程序存储器，所以这里是 0x00010000 大小。</p><p>*.o (RESET, +First)<br>将 RESET 段最先加载到本域的起始地址外，即 RESET 的起始地址为 0，RESET 存储的是向量表</p><p>.ANY (+RO)<br>加载所有匹配目标文件的只读属性数据，包含：RW-Code、RO-Data。</p><p>RW_IRAM1 0x20010000 0x00010000<br>定义一个运行时域，域基址：0x20010000，域大小为 0x00010000 ，对应实际 RAM 大小，这时就不能从 0x20000000 开始了，因为实际 RAM 中前 64K 已经用于程序存储了，所以运行段向后偏移 0x00010000 大小，起始地址从 0x20010000 开始。之前就是因为这里的内存分配不对，地址从 0x20000000 开始，结果程序在搬运初始化过程中，把自己清零了，导致代码在进入 mian() 函数以后就跑飞了。</p><ul><li>(+RW +ZI)<br>加载所有区配目标文件的 RW-Data、ZI-Data 这里也可以用 .ANY 替代 * 号 </li></ul><p>下图为 STM32 的 sct 文件：</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/stm32sct.jpg" alt=""></p><p>下面为 OnSemiconductor RSL10 芯片的 sct 文件，编译环境为 eclipse 加 armlink。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">SECTIONS 0x00100000</span><br><span class="line">&#123;</span><br><span class="line">    ; For Cortex-M devices, the beginning of the startup code is stored in</span><br><span class="line">    ; the .interrupt_vector section, which goes to FLASH. All other code</span><br><span class="line">; follows this section.</span><br><span class="line">;对于 Cortex-M 设备，启动代码的开头存储在 .interrupt_vector 部分，该部分转到 FLASH 。 所有其他代码都在本节后面。</span><br><span class="line">    FLASH 0x00100000 0x60000 </span><br><span class="line">&#123;</span><br><span class="line">; Flash 起始地址为 0x00100000 大小为 0x60000  384k</span><br><span class="line"></span><br><span class="line">        * (RESET +FIRST)</span><br><span class="line">        </span><br><span class="line">        ; Remaining program code</span><br><span class="line">; 只读代码部分</span><br><span class="line">        * (+RO)</span><br><span class="line">      </span><br><span class="line">        ; All remaining DSP code </span><br><span class="line">; DSP 代码</span><br><span class="line">        * (.dsp, .dsp.*)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">; Define the data sections</span><br><span class="line">; 定义运行域</span><br><span class="line">    DRAM 0x20000000 (0x6000 - 2048) </span><br><span class="line">&#123;</span><br><span class="line">; DRAM 起始地址 0x20000000 大小 0x6000  大约 24k</span><br><span class="line">        ; Place the system clock variable first</span><br><span class="line">; 首先放置系统时钟变量</span><br><span class="line">        * (.systemclock +FIRST)</span><br><span class="line"></span><br><span class="line">        ; Place the defined data sections</span><br><span class="line">; 放置已定义的数据部分</span><br><span class="line">        * (.data_begin, .data_begin.*)</span><br><span class="line">        * (.data, .data.*)</span><br><span class="line">        * (.data_end, .data_end.*)</span><br><span class="line">    </span><br><span class="line">        ; Place all remaining read-write and zero-initialized data </span><br><span class="line">; 放置所有剩余的读写和零初始化数据</span><br><span class="line">        * (+RW)</span><br><span class="line">        * (+ZI)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">; Define a heap region</span><br><span class="line">; 定义堆区域 起始地址 0x20005800 大小 0x400  1k</span><br><span class="line">    ARM_LIB_HEAP 0x20005800 EMPTY 0x400</span><br><span class="line">    &#123; &#125;</span><br><span class="line"></span><br><span class="line">; Define a stack region</span><br><span class="line">; 定义栈区域 起始地址 0x20005C00  大小 0x400 1k</span><br><span class="line">    ARM_LIB_STACK 0x20005C00 EMPTY 0x400</span><br><span class="line">    &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于-ARM-Cortex-M3-的启动文件分析及分散加载&quot;&gt;&lt;a href=&quot;#关于-ARM-Cortex-M3-的启动文件分析及分散加载&quot; class=&quot;headerlink&quot; title=&quot;关于 ARM Cortex-M3 的启动文件分析及分散加载&quot;&gt;&lt;/a&gt;关于 ARM Cortex-M3 的启动文件分析及分散加载&lt;/h2&gt;&lt;p&gt;下面以 ARM Cortex-M3 裸核的启动代码为例，做一下简单的分析。首先，在启动文件中完成了三项工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;堆栈以及堆的初始化&lt;/li&gt;
&lt;li&gt;定位中断向量表&lt;/li&gt;
&lt;li&gt;调用 Reset Handler&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="嵌入式" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="ARM" scheme="https://blog.strongwong.top/tags/ARM/"/>
    
      <category term="CM3" scheme="https://blog.strongwong.top/tags/CM3/"/>
    
      <category term="启动文件" scheme="https://blog.strongwong.top/tags/%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6/"/>
    
      <category term="分散加载" scheme="https://blog.strongwong.top/tags/%E5%88%86%E6%95%A3%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>make 命令及 makefile 文件编写</title>
    <link href="https://blog.strongwong.top//posts/make-%E5%91%BD%E4%BB%A4%E5%8F%8A-makefile-%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99.html"/>
    <id>https://blog.strongwong.top//posts/make-命令及-makefile-文件编写.html</id>
    <published>2018-09-03T08:56:52.000Z</published>
    <updated>2018-10-13T05:25:50.718Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间因为工作需要简单学习了一下 make 命令以及 makefile 文件的编写，这里整理一篇在网上看到的比较简洁明了的教程。</p><blockquote><p>代码变成可执行文件，叫做 <a href="http://www.ruanyifeng.com/blog/2014/11/compiler.html" target="_blank" rel="noopener">编译</a>（ compile ）；先编译这个，还是先编译那个（即编译的安排），叫做 <a href="https://en.wikipedia.org/wiki/Software_build" target="_blank" rel="noopener">构建</a>（ build ）。</p><p><a href="https://en.wikipedia.org/wiki/Make_%28software%29" target="_blank" rel="noopener">Make</a> 是最常用的构建工具，诞生于 1977 年，主要用于 C 语言的项目。但是实际上 ，任何只要某个文件有变化，就要重新构建的项目，都可以用 Make 构建。</p><p>本文介绍 Make 命令的用法，从简单的讲起，不需要任何基础，只要会使用命令行，就能看懂。我的参考资料主要是 Isaac Schlueter 的<a href="https://gist.github.com/isaacs/62a2d1825d04437c6f08" target="_blank" rel="noopener">《 Makefile 文件教程》</a>和<a href="https://www.gnu.org/software/make/manual/make.html" target="_blank" rel="noopener">《 GNU Make 手册》</a>。</p><blockquote><p>来源： <a href="http://www.ruanyifeng.com/blog/2015/02/make.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/02/make.html</a><br>作者： 阮一峰</p></blockquote></blockquote><a id="more"></a><h2 id="Make-的概念"><a href="#Make-的概念" class="headerlink" title="Make 的概念"></a>Make 的概念</h2><p>Make 这个词，英语的意思是”制作”。Make 命令直接用了这个意思，就是要做出某个文件。比如，要做出文件 test.txt ，就可以执行下面的命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make test.txt</span><br></pre></td></tr></table></figure></p><p>但是，如果你真的输入这条命令，它并不会起作用。因为 Make 命令本身并不知道，如何做出 test.txt ，需要有人告诉它，如何调用其他命令完成这个目标。</p><p>比如，假设文件 test.txt 依赖于 a.txt 和 b.txt ，是后面两个文件连接（ cat 命令）的产物。那么， make 需要知道下面的规则。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test.txt: a.txt b.txt</span><br><span class="line">    cat a.txt b.txt &gt; test.txt</span><br></pre></td></tr></table></figure></p><p>也就是说， make test.txt 这条命令的背后，实际上分成两步：第一步，确认 a.txt 和 b.txt 必须已经存在，第二步使用 cat 命令 将这个两个文件合并，输出为新文件。</p><p>像这样的规则，都写在一个叫做 Makefile 的文件中， Make 命令依赖这个文件进行构建。 Makefile 文件也可以写为 makefile ， 或者用命令行参数指定为其他文件名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ make -f rules.txt</span><br><span class="line"># 或者</span><br><span class="line">$ make --file=rules.txt</span><br></pre></td></tr></table></figure></p><p>上面代码指定 make 命令依据 rules.txt 文件中的规则，进行构建。</p><p>总之， make 只是一个根据指定的 Shell 命令进行构建的工具。它的规则很简单，你规定要构建哪个文件、它依赖哪些源文件，当那些文件有变动时，如何重新构建它。</p><h2 id="Makefile-文件格式"><a href="#Makefile-文件格式" class="headerlink" title="Makefile 文件格式"></a>Makefile 文件格式</h2><p>构建规则都写在 Makefile 文件里面，要学会如何 Make 命令，就必须学会如何编写 Makefile 文件。</p><h3 id="Makefile-概述"><a href="#Makefile-概述" class="headerlink" title="Makefile 概述"></a>Makefile 概述</h3><p>Makefile 文件由一系列规则（ rules ）构成。每条规则的形式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;target&gt;: &lt;prerequisites&gt;</span><br><span class="line">[tab]&lt;commands&gt;</span><br></pre></td></tr></table></figure></p><p>上面第一行冒号前面的部分，叫做“目标”（ target ），冒号后面的部分叫做“前置条件”（ prerequisites ）；第二行必须由一个 tab 键起首，后面跟着“命令”（ commands ）。</p><p>“目标”是必需的，不可省略；“前置条件”和“命令”都是可选的，但是两者之中必须至少存在一个。</p><p>每条规则就明确两件事：构建目标的前置条件是什么，以及如何构建。下面就详细讲解，每条规则的这三个组成部分。</p><h3 id="目标（target）"><a href="#目标（target）" class="headerlink" title="目标（target）"></a>目标（target）</h3><p>一个目标（ target ）就构成一条规则。目标通常是文件名，指明 Make 命令所要构建的对象，比如上文的  test.txt 。目标可以是一个文件名，也可以是多个文件名，之间用空格分隔。</p><p>除了文件名，目标还可以是某个操作的名字，这称为“伪目标”（ phony target ）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clean:</span><br><span class="line">    rm *.o</span><br></pre></td></tr></table></figure></p><p>上面代码的目标是 clean ，它不是文件名，而是一个操作的名字，属于“伪目标”，作用是删除对象文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make clean</span><br></pre></td></tr></table></figure></p><p>但是，如果当前目录中，正好有一个文件叫做 clean ，那么这个命令不会执行。因为 Make 发现 clean 文件已经存在，就认为没有必要重新构建了，就不会执行指定的 rm 命令。</p><p>为了避免这种情况，可以明确声明 clean 是“伪目标”，写法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.PHONY:clean</span><br><span class="line">clean:</span><br><span class="line">    rm *.o temp</span><br></pre></td></tr></table></figure></p><p>声明 clean 是“伪目标”之后， make 就不会去检查是否存在一个叫做 clean 的文件，而是每次运行都执行对应的命令。像 .PHONY 这样的内置目标名还有不少，可以查看<a href="https://www.gnu.org/software/make/manual/html_node/Special-Targets.html#Special-Targets" target="_blank" rel="noopener">手册</a>。</p><p>如果 Make 命令运行时没有指定目标，默认会执行 Makefile 文件的第一个目标。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make</span><br></pre></td></tr></table></figure></p><p>上面代码执行 Makefile 文件的第一个目标。</p><h3 id="前置条件（-prerequisites"><a href="#前置条件（-prerequisites" class="headerlink" title="前置条件（ prerequisites )"></a>前置条件（ prerequisites )</h3><p>前置条件通常是一组文件名，之间用空格分隔。它指定了“目标”是否重新构建的判断标准：只要有一个前置文件不存在，或者有过更新（前置文件的 last-modification 时间戳比目标的时间戳新），“目标”就需要重新构建。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result.txt: source.txt</span><br><span class="line">    cp source.txt result.txt</span><br></pre></td></tr></table></figure></p><p>上面代码中，构建 result.txt 的前置条件是 source.txt 。如果当前目录中， source.txt 已经存在，那么 make result.txt 可以正常运行，否则必须再写一条规则，来生成 source.txt 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source.txt</span><br><span class="line">    echo &quot;this is the source&quot; &gt; source.txt</span><br></pre></td></tr></table></figure></p><p>上面代码中， source.txt 后面没有前置条件，就意味着它跟其他文件都无关，只要这个文件还不存在，每次调用 make source.txt ，它都会生成。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make result.txt</span><br><span class="line">$ make result.txt</span><br></pre></td></tr></table></figure></p><p>上面命令连续执行两次 make result.txt 。第一次执行会先新建 source.txt ，然后再新建 result.txt 。第二次执行， Make 发现 source.txt 没有变动（时间戳晚于 result.txt ），就不会执行任何操作， result.txt 也不会重新生成。</p><p>如果需要生成多个文件，往往采用下面的写法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source: file1 file2 file3</span><br></pre></td></tr></table></figure></p><p>上面代码中， source 是一个伪目标，只有三个前置文件，没有任何对应的命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make <span class="built_in">source</span></span><br></pre></td></tr></table></figure></p><p>执行 <code>make source</code> 命令后，就会一次性生成 file1 ， file2 ， file3 三个文件。这比下面的写法要方便很多:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ make file1</span><br><span class="line">$ make file2</span><br><span class="line">$ make file3</span><br></pre></td></tr></table></figure></p><h3 id="命令（-commands-）"><a href="#命令（-commands-）" class="headerlink" title="命令（ commands ）"></a>命令（ commands ）</h3><p>命令（ commands ）表示如何更新目标文件，由一行或多行的 Shell 命令组成。它是构建“目标”的具体指令，它的运行结果通常就是生成目标文件。</p><p>每行命令之前必须有一个 tab 键。如果想用其他键，可以用内置变量 .RECIPEPREFIX 声明。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.RECTPEPREFIX = &gt;</span><br><span class="line">all:</span><br><span class="line">&gt; echo Hello, world</span><br></pre></td></tr></table></figure></p><p>上面代码用 .RECIPEPREFIX 指定，大于号（ &gt; ）替代 tab 键。所以，每一行命令的起首变成了大于号，而不是 tab 键。</p><p>需要注意的是，每行命令在一个单独的 shell 中执行。这些 Shell 之间没有继承关系。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var-lost:</span><br><span class="line">    export foo=bar</span><br><span class="line">echo &quot;foo=[$$foo]&quot;</span><br></pre></td></tr></table></figure></p><p>上面代码执行后（<code>make var-lost</code>），取不到 foo 的值。因为两行命令在两个不同的进程执行。一个解决办法是将两行命令写在一行，中间用分号分隔。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var-kept:</span><br><span class="line">    export foo=bar; echo &quot;foo=[$$foo]&quot;</span><br></pre></td></tr></table></figure></p><p>另一个解决办法是在换行符前加反斜杠转义。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var-kept:</span><br><span class="line">    export foo=bar; \</span><br><span class="line">    echo &quot;foo=[$$foo]&quot;</span><br></pre></td></tr></table></figure></p><p>最后一个方法是加上 <code>.ONESHELL:</code>命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.ONESHELL:</span><br><span class="line">var-kept:</span><br><span class="line">    export foo=bar;</span><br><span class="line">    echo &quot;foo=[$$foo]&quot;</span><br></pre></td></tr></table></figure></p><h2 id="Makefile-文件语法"><a href="#Makefile-文件语法" class="headerlink" title="Makefile 文件语法"></a>Makefile 文件语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>井号（#）在 Makefile 中表示注释。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 这是注释</span><br><span class="line">result.txt: source.txt</span><br><span class="line">    # 这是注释</span><br><span class="line">    cp source.txt result.txt # 这是注释</span><br></pre></td></tr></table></figure></p><h3 id="回声（-echoing-）"><a href="#回声（-echoing-）" class="headerlink" title="回声（ echoing ）"></a>回声（ echoing ）</h3><p>正常情况下，make 会打印每条命令，然后再执行，这就叫做回声（echoing）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test:</span><br><span class="line">    # 这是测试</span><br></pre></td></tr></table></figure></p><p>执行上面的规则，会得到下面的结果。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 这是测试</span></span><br></pre></td></tr></table></figure></p><p>在命令的前面加上 @ ，就可以关闭回声。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test:</span><br><span class="line">    @# 这是测试</span><br></pre></td></tr></table></figure></p><p>现在再执行 <code>make test</code>，就不会有任何输出。</p><p>由于在构建过程中，需要了解当前在执行哪条命令，所以通常只在注释和纯显示的 echo 命令前面加上 @ 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test:</span><br><span class="line">    @# 这是测试</span><br><span class="line">    @echo TODO</span><br></pre></td></tr></table></figure></p><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>通配符（ wildcard ）用来指定一组符合条件的文件名。 Makefile 的通配符与 Bash 一致，主要有星号（*）、问号（？）和 [...] 。比如， *.o 表示所有后缀名为 .o 的文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clean:</span><br><span class="line">    rm -f *.o</span><br></pre></td></tr></table></figure></p><h3 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h3><p>Make 命令允许对文件名，进行类似正则运算的匹配，主要用到的匹配符是 %。比如，假定当前目录下有 f1.c 和 f2.c 两个源码文件，需要将它们编译为对应的对象文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%.o: %.c</span><br></pre></td></tr></table></figure></p><p>等同于下面的写法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f1.o: f1.c</span><br><span class="line">f2.o: f2.c</span><br></pre></td></tr></table></figure></p><p>使用通配符 %，可以将大量同类型的文件，只用一条规则就完成构建。</p><h3 id="变量和赋值符"><a href="#变量和赋值符" class="headerlink" title="变量和赋值符"></a>变量和赋值符</h3><p>Makefile 允许使用等号自定义变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">txt = Hello World</span><br><span class="line">test:</span><br><span class="line">    @echo $(txt)</span><br></pre></td></tr></table></figure></p><p>上面代码中，变量 txt 等于 Hello World 。调用时，变量需要放在 $( ) 之中。</p><p>调用 Shell 变量，需要在美元符号前，再加一个美元符号，这是因为 Make 命令会对美元符号转义。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test:</span><br><span class="line">    @echo $$HOME</span><br></pre></td></tr></table></figure></p><p>有时，变量的值可能指向另一个变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1 = $(v2)</span><br></pre></td></tr></table></figure></p><p>上面代码中，变量 v1 的值是另一个变量 v2 。这时会产生一个问题，v1 的值到底在定义时扩展（静态扩展），还是在运行时扩展（动态扩展）？如果 v2 的值是动态的，这两种扩展方式的结果可能会差异很大。</p><p>为了解决类似问题， Makefile 一共提供了四个赋值运算符 （=、:=、？=、+=），它们的区别请看 <a href="https://stackoverflow.com/questions/448910/what-is-the-difference-between-the-gnu-makefile-variable-assignments-a" target="_blank" rel="noopener">StackOverflow</a> 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">VARIABLE = value</span><br><span class="line"><span class="comment"># 在执行时扩展，允许递归扩展。</span></span><br><span class="line"></span><br><span class="line">VARIABLE := value</span><br><span class="line"><span class="comment"># 在定义时扩展。</span></span><br><span class="line"></span><br><span class="line">VARIABLE ?= value</span><br><span class="line"><span class="comment"># 只有在该变量为空时才设置值。</span></span><br><span class="line"></span><br><span class="line">VARIABLE += value</span><br><span class="line"><span class="comment"># 将值追加到变量的尾端。</span></span><br></pre></td></tr></table></figure></p><h3 id="内置变量（Implicit-Variables）"><a href="#内置变量（Implicit-Variables）" class="headerlink" title="内置变量（Implicit Variables）"></a>内置变量（Implicit Variables）</h3><p>Make 命令提供一系列内置变量，比如，$(CC) 指向当前使用的编译器，$(MAKE) 指向当前使用的 Make 工具。这主要是为了跨平台的兼容性，详细的内置变量清单见<a href="https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html" target="_blank" rel="noopener">手册</a>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output:</span><br><span class="line">    $(CC) -o output input.c</span><br></pre></td></tr></table></figure></p><h3 id="自动变量（Automatic-Variables）"><a href="#自动变量（Automatic-Variables）" class="headerlink" title="自动变量（Automatic Variables）"></a>自动变量（Automatic Variables）</h3><p>Make 命令还提供一些自动变量，它们的值与当前规则有关。主要有以下几个。<br><strong>(1) $@</strong><br>$@ 指代当前目标，就是 Make 命令当前构建的那个目标。 比如，<code>make foo</code>的 $@ 就指代 foo。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.txt b.txt:</span><br><span class="line">    touch $@</span><br></pre></td></tr></table></figure></p><p>等同于下面的写法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.txt:</span><br><span class="line">    touch a.txt</span><br><span class="line">b.txt:</span><br><span class="line">    touch b.txt</span><br></pre></td></tr></table></figure></p><p><strong>(2) $&lt;</strong><br>$&lt; 指代第一个前置条件。比如，规则为 t: p1 p2，那么 $&lt; 就指代 p1。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.txt: b.txt c.txt</span><br><span class="line">    cp $&lt; $@</span><br></pre></td></tr></table></figure></p><p>等同于下面的写法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.txt: b.txt c.txt</span><br><span class="line">    cp b.txt a.txt</span><br></pre></td></tr></table></figure></p><p><strong>(3) $?</strong><br>$? 指代比目标更新的所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，其中 p2 的时间戳比 t 新，$? 就指代 p2 。<br><strong>(4) $^</strong><br>$^ 指代所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，那么 $^ 就指代 p1 p2 。<br><strong>(5) $* </strong><br>$<em> 指代匹配符 % 匹配的部分， 比如 % 匹配 f1.txt 中的 f1 ，$\</em> 就表示 f1。<br><strong>(6) $(@D) 和 $(@F)</strong><br>$(@D) 和 $(@F) 分别指向 $@ 的目录名和文件名。比如，$@ 是 src/input.c，那么 $(@D) 的值为 src ，$(@F) 的值为 input.c。<br><strong>(7) $(&lt;D) 和 $(&lt;F)</strong><br>$(&lt;D) 和 $(&lt;F) 分别指向 $&lt; 的目录名和文件名。</p><p>所有的自动变量清单，请看<a href="https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html" target="_blank" rel="noopener">手册</a>。下面是自动变量的一个例子。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dest/%.txt: src/%.txt</span><br><span class="line">@[ -d dest ] || mkdir dest</span><br><span class="line">cp $&lt; $@</span><br></pre></td></tr></table></figure></p><p>上面代码将 src 目录下的 txt 文件，拷贝到 dest 目录下。首先判断 dest 目录是否存在，如果不存在就新建，然后，$&lt; 指代前置文件（src/%.txt）， $@ 指代目标文件（dest/%.txt）。</p><h3 id="判断和循环"><a href="#判断和循环" class="headerlink" title="判断和循环"></a>判断和循环</h3><p>Makefile 使用 Bash 语法，完成判断和循环。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ifeq ($(CC),gcc)</span><br><span class="line">  libs=$(libs_for_gcc)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  libs=$(normal_libs)</span><br><span class="line">endif</span><br></pre></td></tr></table></figure></p><p>上面代码判断当前编译器是否 gcc ，然后指定不同的库文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">LIST = one two three</span><br><span class="line">all:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> $(LIST); <span class="keyword">do</span> \</span><br><span class="line">        <span class="built_in">echo</span> $<span class="variable">$i</span>; \</span><br><span class="line">     <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line"></span><br><span class="line">all:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> one two three; <span class="keyword">do</span> \</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$i</span>; \</span><br><span class="line">    <span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>上面代码的运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">one</span><br><span class="line">two</span><br><span class="line">three</span><br></pre></td></tr></table></figure></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>Makefile 还可以使用函数，格式如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> arguments)</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="variable">$&#123;function arguments&#125;</span></span><br></pre></td></tr></table></figure></p><p>Makefile 提供了许多<a href="https://www.gnu.org/software/make/manual/html_node/Functions.html" target="_blank" rel="noopener">内置函数</a>，可供调用。下面是几个常用的内置函数。<br><strong>(1) shell 函数</strong><br>shell 函数用来执行 shell 命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srcfiles := $(shell <span class="built_in">echo</span> src/&#123;00..99&#125;.txt)</span><br></pre></td></tr></table></figure></p><p><strong>(2) wildcard 函数</strong><br>wildcard 函数用来在 Makefile 中，替换 Bash 的通配符。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srcfiles := $(wildcard src/*.txt)</span><br></pre></td></tr></table></figure></p><p><strong>(3) subst 函数</strong><br>subst 函数用来文本替换，格式如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(subst from,to,text)</span><br></pre></td></tr></table></figure></p><p>下面的例子将字符串”feet on the street”替换成”fEEt on the strEEt”。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(subst ee,EE,feet on the street)</span><br></pre></td></tr></table></figure></p><p>下面是一个稍微复杂的例子。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">comma:= ,</span><br><span class="line">empty:=</span><br><span class="line"><span class="comment"># space 变量用两个空变量作为标识符，当中是一个空格</span></span><br><span class="line">space:= $(empty) $(empty)</span><br><span class="line">foo:= a b c</span><br><span class="line">bar:= $(subst $(space),$(comma),$(foo))</span><br><span class="line"><span class="comment"># bar is now 'a,b,c'.</span></span><br></pre></td></tr></table></figure></p><p><strong>(4) patsubst 函数</strong><br>patsubst 函数用于模式匹配的替换，格式如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(patsubst pattern,replacement,text)</span><br></pre></td></tr></table></figure></p><p>下面的例子将文件名 “x.c.c bar.c”，替换成 “x.c.o bar.o”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(patsubst %.c,%.o,x.c.c bar.c)</span><br></pre></td></tr></table></figure></p><p><strong>(5) 替换后缀名</strong><br>替换后缀名函数的写法是：变量名 + 冒号 + 后缀名替换规则。它实际上 patsubst 函数的一种简写形式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">min: $(OUTPUT:.js=.min.js)</span><br></pre></td></tr></table></figure></p><p>上面代码的意思是，将变量 OUTPUT 中的后缀名 .js 全部替换成 .min.js 。</p><h2 id="Makefile-实例"><a href="#Makefile-实例" class="headerlink" title="Makefile 实例"></a>Makefile 实例</h2><p>(1) 执行多目标编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.PHONY: cleanall cleanobj cleandiff</span><br><span class="line"></span><br><span class="line">cleanall : cleanobj cleandiff</span><br><span class="line">        rm program</span><br><span class="line"></span><br><span class="line">cleanobj :</span><br><span class="line">        rm *.o</span><br><span class="line"></span><br><span class="line">cleandiff :</span><br><span class="line">        rm *.diff</span><br></pre></td></tr></table></figure></p><p>上面代码可以调用不同目标，删除不同后缀名的文件，也可以调用一个目标（ cleanall ），删除所有指定类型的文件。<br>(2) 编译 C 语言项目<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o </span><br><span class="line">    cc -o edit main.o kbd.o command.o display.o</span><br><span class="line"></span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">    cc -c main.c</span><br><span class="line">kbd.o : kbd.c defs.h command.h</span><br><span class="line">    cc -c kbd.c</span><br><span class="line">command.o : command.c defs.h command.h</span><br><span class="line">    cc -c command.c</span><br><span class="line">display.o : display.c defs.h</span><br><span class="line">    cc -c display.c</span><br><span class="line"></span><br><span class="line">clean :</span><br><span class="line">     rm edit main.o kbd.o command.o display.o</span><br><span class="line"></span><br><span class="line">.PHONY: edit clean</span><br></pre></td></tr></table></figure></p><p>Make 命令和Makefile文件的介绍就到这里。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间因为工作需要简单学习了一下 make 命令以及 makefile 文件的编写，这里整理一篇在网上看到的比较简洁明了的教程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;代码变成可执行文件，叫做 &lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/11/compiler.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;编译&lt;/a&gt;（ compile ）；先编译这个，还是先编译那个（即编译的安排），叫做 &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_build&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;构建&lt;/a&gt;（ build ）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Make_%28software%29&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Make&lt;/a&gt; 是最常用的构建工具，诞生于 1977 年，主要用于 C 语言的项目。但是实际上 ，任何只要某个文件有变化，就要重新构建的项目，都可以用 Make 构建。&lt;/p&gt;
&lt;p&gt;本文介绍 Make 命令的用法，从简单的讲起，不需要任何基础，只要会使用命令行，就能看懂。我的参考资料主要是 Isaac Schlueter 的&lt;a href=&quot;https://gist.github.com/isaacs/62a2d1825d04437c6f08&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《 Makefile 文件教程》&lt;/a&gt;和&lt;a href=&quot;https://www.gnu.org/software/make/manual/make.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《 GNU Make 手册》&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;来源： &lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/02/make.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.ruanyifeng.com/blog/2015/02/make.html&lt;/a&gt;&lt;br&gt;作者： 阮一峰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="make" scheme="https://blog.strongwong.top/tags/make/"/>
    
      <category term="makefile" scheme="https://blog.strongwong.top/tags/makefile/"/>
    
      <category term="脚本" scheme="https://blog.strongwong.top/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>ROS 基础知识</title>
    <link href="https://blog.strongwong.top//posts/ROS-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html"/>
    <id>https://blog.strongwong.top//posts/ROS-基础知识.html</id>
    <published>2018-09-01T02:59:46.000Z</published>
    <updated>2018-12-17T07:36:52.979Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ROS-基础知识"><a href="#ROS-基础知识" class="headerlink" title="ROS 基础知识"></a>ROS 基础知识</h3><p>上一篇，我们已经正确的安装好了 ROS ，但是在使用 ROS 进行机器人开发工作之前，我们先来了解一点 ROS 的基础知识，以便于后面的开发使用。当然我这里自然是没有 ROS wiki 上介绍的详细，要想学习更多的操作请先看 ROS wiki 上的<a href="http://wiki.ros.org/cn/ROS/StartGuide" target="_blank" rel="noopener">入门教程</a><br>这里我只简单介绍一下，在我的项目中会用到的一些操作。</p><a id="more"></a><h3 id="创建工作空间"><a href="#创建工作空间" class="headerlink" title="创建工作空间"></a>创建工作空间</h3><p>ROS 使用一个名为 catkin 的 ROS 专用构建系统。为了使用它，用户需要创建并初始化 catkin 工作空间，如下所示。除非用户创建新的工作空间，否则此设置只需设置一次。工作空间（ workspace ）简单来说就是一个存放工程开发相关文件的文件夹。主要目录结构如下：</p><ul><li>src: 代码空间 ( source space )</li><li>build: 编译空间 ( build space )</li><li>devel: 开发空间 ( development space )</li><li>install: 安装空间 ( install space )</li></ul><p><img src="https://ww3.sinaimg.cn/large/005YhI8igy1fuvaso3mffj30lf0jfq3c" alt="catkin 编译系统下的工作空间结构"></p><h4 id="创建工作空间-1"><a href="#创建工作空间-1" class="headerlink" title="创建工作空间"></a>创建工作空间</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p ~/catkin_ws/src   <span class="comment"># 创建工作空间机源码空间</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">$ catkin_init_workspace      <span class="comment"># 初始化工作空间</span></span><br></pre></td></tr></table></figure><h4 id="编译工作空间"><a href="#编译工作空间" class="headerlink" title="编译工作空间"></a>编译工作空间</h4><p>目前，只有 src 目录和 CMakeLists.txt 文件(运行初始化命令后就会生成)在 catkin 工作目录中，即使 src 目录中没有源代码，我们仍然可以使用 catkin_make 命令来进行构建。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/catkin_ws/</span><br><span class="line">$ catkin_make</span><br></pre></td></tr></table></figure></p><p>如果构建没有问题，运行 ls 命令。除了自己创建的 src 目录之外，还出现了一个新的 build 和 devel 目录。 catkin 的构建系统的相关文件保存在 build 目录中，构建后的可执行文件保存在 devel 目录中。</p><h4 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span><br></pre></td></tr></table></figure><h4 id="检查环境变量"><a href="#检查环境变量" class="headerlink" title="检查环境变量"></a>检查环境变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$ROS_PACKAGE_PATH</span></span><br><span class="line">/home/ubuntu/catkin_ws/src:/opt/ros/kinetic/share:/opt/ros/kinetic/stacks</span><br></pre></td></tr></table></figure><h3 id="创建功能包"><a href="#创建功能包" class="headerlink" title="创建功能包"></a>创建功能包</h3><p>一个功能包它是是构成 ROS 的基本单元。 ROS 应用程序是以功能包为单位开发的。功能包包括至少一个以上的节点或拥有用于运行其他功能包的节点的配置文件。它还包含功能包所需的所有文件，如用于运行各种进程的 ROS 依赖库、数据集和配置文件等。</p><h4 id="创建功能包-1"><a href="#创建功能包-1" class="headerlink" title="创建功能包"></a>创建功能包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line"><span class="comment"># 创建功能包命令格式如下：</span></span><br><span class="line">$ catkin_create_pkg [功能包名称] [依赖功能包 1] [依赖功能包 n]</span><br></pre></td></tr></table></figure><p>「catkin_create_pkg」命令在创建用户功能包时会生成 catkin 构建系统所需的 CMakeLists.txt 和 package.xml 文件的包目录。<br><strong>注：同一个工作空间下，不允许存在同名功能包；在不同工作空间下，允许存在同名功能包。</strong></p><h4 id="编译功能包"><a href="#编译功能包" class="headerlink" title="编译功能包"></a>编译功能包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line">$ catkin_make</span><br></pre></td></tr></table></figure><h3 id="ROS-通信"><a href="#ROS-通信" class="headerlink" title="ROS 通信"></a>ROS 通信</h3><p>为了最大化用户的可重用性，ROS 是以节点的形式开发的，而节点是根据其目的细分的可执行程序的最小单位。节点则通过消息（ message ）与其他的节点交换数据，最终成为一个大型的程序。这里的关键概念是节点之间的消息通信，它分为三种。单向消息发送/接收方式的话题（ topic ）；双向消息请求/响应方式的服务（ service ）；双向消息目标（ goal ）/结果（ result ）/反馈（ feedback ）方式的动作（ action ）。另外，节点中使用的参数可以从外部进行修改。这在大的框架中也可以被看作消息通信。如下图所示：<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E6%B6%88%E6%81%AF%E9%80%9A%E4%BF%A1.jpg" alt=""></p><table><thead><tr><th style="text-align:center">种类</th><th style="text-align:center">区别</th><th style="text-align:center">方向</th><th style="text-align:center">响应</th></tr></thead><tbody><tr><td style="text-align:center">话题</td><td style="text-align:center">异步</td><td style="text-align:center">单向</td><td style="text-align:center">连续单向地发送/接收数据的情况</td></tr><tr><td style="text-align:center">服务</td><td style="text-align:center">同步</td><td style="text-align:center">双向</td><td style="text-align:center">需要对请求给出即时响应的情况</td></tr><tr><td style="text-align:center">动作</td><td style="text-align:center">异步</td><td style="text-align:center">双向</td><td style="text-align:center">请求与响应之间需要太长的时间，所以难以使用服务的情况，或需要中途反馈值的情况</td></tr></tbody></table><h4 id="话题通信"><a href="#话题通信" class="headerlink" title="话题通信"></a>话题通信</h4><p>话题消息通信是指发送信息的发布者和接收信息的订阅者以话题消息的形式发送和接收信息。希望接收话题的订阅者节点接收的是与在主节点中注册的话题名称对应的发布者节点的信息。基于这个信息，订阅者节点直接连接到发布者节点来发送和接收消息。另外，单个发布者可以与多个订阅者进行通信，相反，一个订阅者可以在单个话题上与多个发布者进行通信。当然，这两家发布者都可以和多个订阅者进行通信。</p><h4 id="服务通信"><a href="#服务通信" class="headerlink" title="服务通信"></a>服务通信</h4><p>服务消息通信是指请求服务的服务客户端与负责服务响应的服务服务器之间的同步双向服务消息通信。前述的发布和订阅概念的话题通信方法是一种异步方法，是根据需要传输和接收给定数据的一种非常好的方法。然而，在某些情况下，需要一种同时使用请求和响应的同步消息交换方案。因此，ROS 提供叫做服务的消息同步方法。<br>一个服务被分成服务服务器和服务客户端，其中服务服务器只在有请求（ request ）的时候才响应（response），而服务客户端会在发送请求后接收响应。与话题不同，服务是一次性消息通信。因此，当服务的请求和响应完成时，两个连接的节点将被断开。该服务通常被用作请求机器人执行特定操作时使用的命令，或者用于根据特定条件需要产生事件的节点。由于它是一次性的通信方式，又因为它在网络上的负载很小，所以它也被用作代替话题的手段，因此是一种非常有用的通信手段。</p><h4 id="动作通信"><a href="#动作通信" class="headerlink" title="动作通信"></a>动作通信</h4><p>动作消息通信是在如下情况使用的消息通信方式：服务器收到请求后直到响应所需的时间较长，且需要中途反馈值。这与服务非常相似，服务具有与请求和响应分别对应的目标（ goal ）和结果（ result ）。除此之外动作中还多了反馈（ feedback ）。收到请求后需要很长时间才能响应，又需要中间值时，使用这个反馈发送相关的数据。消息传输方案本身与异步方式的话题（ topic ）相同。反馈在动作客户端（ action client ）和动作服务器（ action server ）之间执行异步双向消息通信，其中动作客户端设置动作目标（ goal ），而动作服务器根据目标执行指定的工作，并将动作反馈和动作结果发送给动作客户端。</p><h3 id="消息通信过程"><a href="#消息通信过程" class="headerlink" title="消息通信过程"></a>消息通信过程</h3><p>主节点管理节点信息，每个节点根据需要与其他节点进行连接和消息通信。以话题消息为例，具体通信步骤如下。</p><h4 id="运行主节点"><a href="#运行主节点" class="headerlink" title="运行主节点"></a>运行主节点</h4><p>节点之间的消息通信当中，管理连接信息的主节点是为使用 ROS 必须首先运行的必需元素。ROS 主节点使用 roscore 命令来运行，并使用 XMLRPC 运行服务器。主节点为了节点与节点的连接，会注册节点的名称、话题、服务、动作名称、消息类型、URI 地址和端口，并在有请求时将此信息通知给其他节点。<br>运行 <code>roscore</code> 命令就启动了主节点。</p><h4 id="运行订阅者节点"><a href="#运行订阅者节点" class="headerlink" title="运行订阅者节点"></a>运行订阅者节点</h4><p>订阅者节点使用 rosrun 或 roslaunch 命令来运行。订阅者节点在运行时向主节点注册其订阅者节点名称、话题名称、消息类型、URI 地址和端口。主节点和节点使用 XMLRPC 进行通信。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rosrun PACKAGE_NAME NODE_NAME</span><br><span class="line">$ roslaunch PACKAGE_NAME LAUNCH_NAME</span><br></pre></td></tr></table></figure></p><h4 id="运行发布者节点"><a href="#运行发布者节点" class="headerlink" title="运行发布者节点"></a>运行发布者节点</h4><p>发布者节点（与订阅者节点类似）使用 rosrun 或 roslaunch 命令来运行。发布者节点向主节点注册发布者节点名称、话题名称、消息类型、 URI 地址和端口。主节点和节点使用 XMLRPC 进行通信。</p><h4 id="通知发布者信息"><a href="#通知发布者信息" class="headerlink" title="通知发布者信息"></a>通知发布者信息</h4><p>主节点向订阅者节点发送此订阅者希望访问的发布者的名称、话题名称、消息类型、 URI 地址和端口等信息。主节点和节点使用 XMLRPC 进行通信。</p><h4 id="订阅者节点的连接请求"><a href="#订阅者节点的连接请求" class="headerlink" title="订阅者节点的连接请求"></a>订阅者节点的连接请求</h4><p>订阅者节点根据从主节点接收的发布者信息，向发布者节点请求直接连接。在这种情况下，要发送的信息包括订阅者节点名称、话题名称和消息类型。发布者节点和订阅者节点使用 XMLRPC 进行通信。</p><h4 id="发布者节点的连接响应"><a href="#发布者节点的连接响应" class="headerlink" title="发布者节点的连接响应"></a>发布者节点的连接响应</h4><p>发布者节点将 TCP 服务器的 URI 地址和端口作为连接响应发送给订阅者节点。发布者节点和订阅者节点使用 XMLRPC 进行通信。</p><h4 id="TCPROS-连接"><a href="#TCPROS-连接" class="headerlink" title="TCPROS 连接"></a>TCPROS 连接</h4><p>订阅者节点使用 TCPROS 创建一个与发布者节点对应的客户端，并直接与发布者节点连接。节点间通信使用一种称为 TCPROS 的 TCP/IP 方式。</p><h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><p>发布者节点向订阅者节点发送消息。节点间通信使用一种称为 TCPROS 的 TCP/IP 方式。<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E8%AF%9D%E9%A2%98%E6%B6%88%E6%81%AF%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B.jpg" alt=""><br>服务消息，服务服务器和客户端之间的连接与上述发布者和订阅者之间的 TCPROS 连接相同，但是与话题不同，服务只连接一次，在执行请求和响应之后彼此断开连接。如果有必要，需要重新连接。<br>动作消息，动作（ action ）在执行的方式上好像是在服务（ service ）的请求（ goal ）和响应( result ）之间仅仅多了中途反馈环节，但实际的运作方式与话题相同。事实上，如果使用 rostopic 命令来查阅话题，那么可以看到该动作的 goal、status、cancel、result 和 feedback 等五个话题。动作服务器和客户端之间的连接与上述发布者和订阅中的 TCPROS 连接相同，但某些用法略有不同。例如，动作客户端发送取消命令或服务器发送结果值会中断连接等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ROS-基础知识&quot;&gt;&lt;a href=&quot;#ROS-基础知识&quot; class=&quot;headerlink&quot; title=&quot;ROS 基础知识&quot;&gt;&lt;/a&gt;ROS 基础知识&lt;/h3&gt;&lt;p&gt;上一篇，我们已经正确的安装好了 ROS ，但是在使用 ROS 进行机器人开发工作之前，我们先来了解一点 ROS 的基础知识，以便于后面的开发使用。当然我这里自然是没有 ROS wiki 上介绍的详细，要想学习更多的操作请先看 ROS wiki 上的&lt;a href=&quot;http://wiki.ros.org/cn/ROS/StartGuide&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;入门教程&lt;/a&gt;&lt;br&gt;这里我只简单介绍一下，在我的项目中会用到的一些操作。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="毕业设计" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="ROS" scheme="https://blog.strongwong.top/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>在 Jetson TX2 上安装 ROS 机器人操作系统</title>
    <link href="https://blog.strongwong.top//posts/%E5%9C%A8-Jetson-TX2-%E4%B8%8A%E5%AE%89%E8%A3%85-ROS-%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.html"/>
    <id>https://blog.strongwong.top//posts/在-Jetson-TX2-上安装-ROS-机器人操作系统.html</id>
    <published>2018-08-26T13:17:26.000Z</published>
    <updated>2018-11-24T02:33:22.535Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ROS-机器人操作系统"><a href="#ROS-机器人操作系统" class="headerlink" title="ROS 机器人操作系统"></a>ROS 机器人操作系统</h3><p>关于 ROS ( Robot Operating System 机器人操作系统)，这里做一下简单的介绍。ROS 就是一个机器人软件平台，类似于个人电脑的操作系统( Windows、Linux、Mac OS 等)，智能手机的操作系统( Android、iOS 等)。机器人和电脑、手机一样可以通过各种硬件组合的硬件模块组成，自然就出现了用来管理这些硬件的操作系统。操作系统提供了基于硬件抽象的软件开发环境，存在提供各种服务的应用程序。<br>ROS 就是这样一个提供了类似操作系统的硬件抽象。在 ROS 维基中将 ROS 定义为 “ ROS 是一个开放源代码的机器人元操作系统。它提供了我们对操作系统期望的服务，包括硬件抽象、低级设备控制、常用功能的实现、进程之间的消息传递以及功能包管理。它还提供了用于在多台计算机之间获取、构建、编写和运行代码的工具和库。 ”<br>因此，ROS 并不是一种新的操作系统，确切的说，ROS 是一种元级操作系统。是基于现有操作系统的，利用应用程序和分布式计算资源之间的虚拟化层来运用分布式计算资源来执行调度、加载、监视、错误处理等任务的系统。同时提供一个或多个操作系统下的数据通信。</p><a id="more"></a><p>对于 ROS 的安装，之前官方网站上是没有中文教程的，对于我这种塑料英语，直接看官网英文教程还是蛮有难度的。不过好在现在 ROS 官网已经有中文版的安装教程了。直接参考官网上的教程安装就好了！<br>官网安装教程：<a href="http://wiki.ros.org/cn/kinetic/Installation" target="_blank" rel="noopener">http://wiki.ros.org/cn/kinetic/Installation</a></p><h3 id="ROS-版本"><a href="#ROS-版本" class="headerlink" title="ROS 版本"></a>ROS 版本</h3><p>虽然官方已经有了中文版本的安装教程，但是我这里还是简单记录一下。<br>首先，ROS 目前大家使用的主流版本还是 ROS 1.0 的版本，ROS 1.0 版本目前只支持 Linux 系统。而对 ROS 兼容性最好的就是 Ubuntu 操作系统了，恰好我们的 Jetson TX2 就是 Ubuntu 系统。</p><p>这里还要说明的是，我们在 TX2 上安装 ROS 系统，并不是要直接在 TX2 上来做开发的(虽然也可以)， TX2 主要是作为部署端的。因此，还需要有一台 Ubuntu 电脑也需要安装上 ROS 来进行开发工作，安装步骤相同。</p><p>其次， Ubuntu 和 ROS 都有很多版本，各版本之间是存在兼容性问题的。ROS 和 Ubuntu 之间的版本对应关系如下表：</p><table><thead><tr><th style="text-align:center">ROS 版本</th><th style="text-align:center">发布日期</th><th style="text-align:center">对应的 Ubuntu 版本</th><th style="text-align:center">停止支持日期</th></tr></thead><tbody><tr><td style="text-align:center">ROS Melodic</td><td style="text-align:center">2018.5.23</td><td style="text-align:center">Ubuntu 18.04(Bionic)/Ubuntu 17.10(Artful)</td><td style="text-align:center">2023.5</td></tr><tr><td style="text-align:center">ROS Lunar</td><td style="text-align:center">2017.5.23</td><td style="text-align:center">Ubuntu 17.04(Zesty)/Ubuntu 16.10(Yakkety)/Ubuntu16.04(Xenial)</td><td style="text-align:center">2019.5</td></tr><tr><td style="text-align:center">ROS Kinetic(推荐)</td><td style="text-align:center">2016.5.23</td><td style="text-align:center">Ubuntu 16.04(Xenial)/Ubuntu 15.10(Wily)</td><td style="text-align:center">2021.4</td></tr><tr><td style="text-align:center">ROS Jade</td><td style="text-align:center">2015.5.23</td><td style="text-align:center">Ubuntu 15.04(Wily)/Ubuntu LTS 14.04(Trusty)</td><td style="text-align:center">2017.5</td></tr><tr><td style="text-align:center">ROS Kinetic</td><td style="text-align:center">2014.7.22</td><td style="text-align:center">Ubuntu LTS 14.04(Trusty)</td><td style="text-align:center">2019.4</td></tr></tbody></table><p>目前主流版本还是 ROS Kinetic 且支持时间较长，今年新出的 Melodic 版资料相对较少。所以推荐安装 ROS Kinetic 版本。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="软件中心配置"><a href="#软件中心配置" class="headerlink" title="软件中心配置"></a>软件中心配置</h4><p>打开软件和更新对话框，配置你的 Ubuntu 软件仓库( repositories )以允许“restricted”，“universe”和“multiverse”这三种安装模式。如下图：<br><img src="https://photo.ishield.cn/pic/5b89420e9dc6d659595a1950" alt=""><br>配置完成关闭窗口。</p><h4 id="添加source-list"><a href="#添加source-list" class="headerlink" title="添加source.list"></a>添加source.list</h4><p>设置你的电脑可以从 packages.ros.org 接收软件。<br>打开一个 Terminal ( Ctrl+Alt+T )，输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sh -c &apos;echo “deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc)main”&gt; /etc/apt/sources.list.d/ros-latest.list&apos;</span><br></pre></td></tr></table></figure></p><p>这个镜像国内会比较慢，建议更换为国内镜像源，就是把上面的命令更换一下。官方<a href="http://wiki.ros.org/ROS/Installation/UbuntuMirrors" target="_blank" rel="noopener">镜像</a></p><h4 id="添加密钥"><a href="#添加密钥" class="headerlink" title="添加密钥"></a>添加密钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-key adv --keyserver hkp：//ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116</span><br></pre></td></tr></table></figure><p>如果你遇到连接到 keyserver 的问题，你可以在以上命令尝试替换 hkp://pgp.mit.edu:80 或 hkp://keyserver.ubuntu.com:80<br>密钥可以根据服务器的操作发生变更，如有变化，请参考<a href="http://wiki.ros.org/cn/kinetic/Installation/Ubuntu" target="_blank" rel="noopener">官方wiki</a>页面。</p><h4 id="安装-ROS"><a href="#安装-ROS" class="headerlink" title="安装 ROS"></a>安装 ROS</h4><p>首先，确保你的系统软件是最新版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure></p><p>接下来，就可以安装 ROS 了，但是 ROS Kinetic 也有好几个版本，这里我们安装全功能版本(包括ROS、rqt、RViz、机器人相关的库、仿真和导航等等。部署端一般基础版就可以了)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install ros-kinetic-desktop-full</span><br></pre></td></tr></table></figure></p><p>这里可能会要等待几分钟，因网速而定。如果一切顺利的话，那就安装完了。<br>安装完成后，可以使用下面的命令查看可使用的软件包(可以搜索到大约1600多个功能包)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-cache search ros-kinetic</span><br></pre></td></tr></table></figure></p><blockquote><p>如果想个别安装功能包，请使用如下命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; $ sudo apt-get install ros-kinetic-[功能包名称]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p>现在是安装完了，但是我们还需要初始化 ROS 以及配置环境变量</p><h4 id="初始化-rosdep"><a href="#初始化-rosdep" class="headerlink" title="初始化 rosdep"></a>初始化 rosdep</h4><p>在开始使用 ROS 之前还需要初始化 rosdep 。rosdep 可以方便地在需要编译某些源码的时候为其安装一些系统依赖，同时也是某些 ROS 核心功能组件所必需用到的工具。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rosdep init</span><br><span class="line">$ rosdep update</span><br></pre></td></tr></table></figure></p><h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><p>如果每次打开一个新的终端时 ROS 环境变量都能够自动配置好(即添加到 bash 会话中)，那将会方便很多：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;source /opt/ros/kinetic/setup.bash&quot; &gt;&gt; ~/.bashrc</span><br><span class="line">$ source ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>可以使用 gedit 或者 vi 等编辑器打开 bashrc 文件查看是否配置成功。在 bashrc 文件最底部我们可以看到已经有了很多设置。不要修改以前的设置，如果你需要修改的话在最底部添加就好了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set ROS Kinetic</span></span><br><span class="line"><span class="built_in">source</span> /opt/ros/kinetic/setup.bash</span><br><span class="line"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set ROS Network</span></span><br><span class="line"><span class="built_in">export</span> ROS_HOSTNAME=xxx.xxx.xxx.xxx</span><br><span class="line"><span class="built_in">export</span> ROS_MASTER_URI=http://<span class="variable">$&#123;ROS_HOSTNAME&#125;</span>:11311</span><br></pre></td></tr></table></figure></p><h4 id="安装构建依赖"><a href="#安装构建依赖" class="headerlink" title="安装构建依赖"></a>安装构建依赖</h4><p>到目前为止，已经安装了运行核心 ROS 包所需的内容。为了创建和管理自己的 ROS 工作区，有各种各样的工具和需求分别分布。例如：rosinstall 是一个经常使用的命令行工具，它能够轻松地从一个命令下载许多 ROS 包的源树。</p><p>要安装这个工具和其他构建 ROS 包的依赖项，请运行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></table></figure></p><p>好！到这里，ROS 就基本安装完成了。下面就来测试一下，看看是否可以正常运行。</p><h3 id="测试-ROS"><a href="#测试-ROS" class="headerlink" title="测试 ROS"></a>测试 ROS</h3><p>首先，启动 ROS 环境<br>输入 roscore 命令，测试测试结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ roscore</span><br><span class="line">... logging to /home/ubuntu/.ros/log/3e61b674-03cf-11e8-ac54-9cb70ddc3658/roslaunch-ubuntu-31481.log</span><br><span class="line">Checking log directory for disk usage. This may take awhile.</span><br><span class="line">Press Ctrl-C to interrupt</span><br><span class="line">Done checking log file disk usage. Usage is &lt;1GB.</span><br><span class="line">started roslaunch server http://ubuntu:11311/</span><br><span class="line">ros_comm version 1.12.12</span><br><span class="line">SUMMARY</span><br><span class="line">========</span><br><span class="line">PARAMETERS</span><br><span class="line"> * /rosdistro: kinetic</span><br><span class="line"> * /rosversion: 1.12.12</span><br><span class="line">NODES</span><br><span class="line">auto-starting new master</span><br><span class="line">process[master]: started with pid [31495]</span><br><span class="line">ROS_MASTER_URI=http://ubuntu:11311/</span><br><span class="line">setting /run_id to 3e61b674-03cf-11e8-ac54-9cb70ddc3658</span><br><span class="line">process[rosout-1]: started with pid [31508]</span><br><span class="line">started core service [/rosout]</span><br></pre></td></tr></table></figure></p><p>如果看到 started core service [/rosout] ，那就说明安装成功了！退出按『Ctrl+c』。</p><p>如果你安装过程中出现了问题，可以尝试换个网络，或者多试几次吧，有时候服务器就是连不上！*_*</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ROS-机器人操作系统&quot;&gt;&lt;a href=&quot;#ROS-机器人操作系统&quot; class=&quot;headerlink&quot; title=&quot;ROS 机器人操作系统&quot;&gt;&lt;/a&gt;ROS 机器人操作系统&lt;/h3&gt;&lt;p&gt;关于 ROS ( Robot Operating System 机器人操作系统)，这里做一下简单的介绍。ROS 就是一个机器人软件平台，类似于个人电脑的操作系统( Windows、Linux、Mac OS 等)，智能手机的操作系统( Android、iOS 等)。机器人和电脑、手机一样可以通过各种硬件组合的硬件模块组成，自然就出现了用来管理这些硬件的操作系统。操作系统提供了基于硬件抽象的软件开发环境，存在提供各种服务的应用程序。&lt;br&gt;ROS 就是这样一个提供了类似操作系统的硬件抽象。在 ROS 维基中将 ROS 定义为 “ ROS 是一个开放源代码的机器人元操作系统。它提供了我们对操作系统期望的服务，包括硬件抽象、低级设备控制、常用功能的实现、进程之间的消息传递以及功能包管理。它还提供了用于在多台计算机之间获取、构建、编写和运行代码的工具和库。 ”&lt;br&gt;因此，ROS 并不是一种新的操作系统，确切的说，ROS 是一种元级操作系统。是基于现有操作系统的，利用应用程序和分布式计算资源之间的虚拟化层来运用分布式计算资源来执行调度、加载、监视、错误处理等任务的系统。同时提供一个或多个操作系统下的数据通信。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="毕业设计" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="Jetson TX2" scheme="https://blog.strongwong.top/tags/Jetson-TX2/"/>
    
      <category term="ROS" scheme="https://blog.strongwong.top/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>Jetson TX2 重新编译内核添加usb等驱动</title>
    <link href="https://blog.strongwong.top//posts/Jetson-TX2-%E9%87%8D%E6%96%B0%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8%E6%B7%BB%E5%8A%A0usb%E7%AD%89%E9%A9%B1%E5%8A%A8.html"/>
    <id>https://blog.strongwong.top//posts/Jetson-TX2-重新编译内核添加usb等驱动.html</id>
    <published>2018-08-20T10:55:00.000Z</published>
    <updated>2018-11-24T02:24:49.183Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Jetson-TX2-重新编译内核添加usb驱动"><a href="#Jetson-TX2-重新编译内核添加usb驱动" class="headerlink" title="Jetson TX2 重新编译内核添加usb驱动"></a>Jetson TX2 重新编译内核添加usb驱动</h3><p>上一篇我们已经简单说明了怎么给 Jetson TX2 刷机，Jetson TX2 虽然已经成功完成刷机了，但是 Nvidia 的默认配置是禁用了一些驱动的，比如说板子上的 UART 串口就不可以用，需要用户自己安装，重新编译新的镜像。<br>本文这里就简单介绍一下，添加驱动并重新编译镜像。<br>在 GitHub 上有别人开源的编译新镜像的脚本文件，在 Jetsonhacks 的仓库里有。这里我们就使用他的脚本文件。</p><a id="more"></a><h3 id="下载脚本"><a href="#下载脚本" class="headerlink" title="下载脚本"></a>下载脚本</h3><p>首先从 GitHub 上下载编译脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/jetsonhacks/buildJetsonTX2Kernel.git</span><br></pre></td></tr></table></figure></p><p>如果你是 JetPack3.2.1 版本，直接使用 git 下载的话没有问题，因为目前他更新到的最新版本是 JetPack 3.2.1 内核版本为 28.2.1 (2018-8-20)。但是我安装的是 JetPack 3.1 对应的内核版本是 28.1 所以是不能直接使用的。因此需要下载对应的内核版本的脚本才可以使用。<br>JetPack 3.1 版本的话就需要下载这个。<br><code>https://github.com/jetsonhacks/buildJetsonTX2Kernel/archive/vL4T28.1.tar.gz</code></p><h3 id="解压，获取源码"><a href="#解压，获取源码" class="headerlink" title="解压，获取源码"></a>解压，获取源码</h3><p>下载好之后，解压缩，进入解压出来的文件夹，打开 Terminal 运行 getKernelSources.sh 脚本获取内核源码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./getKernelSources.sh</span><br></pre></td></tr></table></figure></p><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><p>下载完成之后就会打开一个 xconfig 配置界面。<br>设置你的镜像名称。打开设置 Genral Setup-&gt;Local version - append to kernel release，双击 Local version - append to kernel release<br>在文本框中输入名字，如我这里为 -jetsonbot-v0.1 ， 回车；如下图所示：<br><img src="https://photo.ishield.cn/pic/5b8269849dc6d6533b592669" alt=""></p><p>在 xconfig 中按 Ctrl+F ，会弹出一个搜索框，输入你想要添加的设备驱动，比如可以添加 USB ACM， CH341 和 cp210x 串口驱动等，在搜索结果中选择对应的驱动，选中框打上勾即可。<br>我这里搜索的是 ACM 驱动，如下图所示：<br><img src="https://photo.ishield.cn/pic/5b826b089dc6d6533b59266f" alt=""></p><p>设置好了之后，一定要保存你的设置， File-&gt;Save</p><h3 id="编译新内核"><a href="#编译新内核" class="headerlink" title="编译新内核"></a>编译新内核</h3><p>保存好设置，关闭 xconfig 配置窗口，准备开始编译内核，编译过程大约需要 20 分钟。<br>运行 makeKernel.sh 脚本，开始编译新的内核。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./makeKernel.sh</span><br></pre></td></tr></table></figure></p><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p>编译过程中，你可以去喝杯 coffee 放松一下，等待编译完成。<br>编译结束后，运行 copyImage.sh 脚本，将新编译的镜像文件拷贝到  /boot 目录下。拷贝完成重启 TX2 即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./copyImage.sh</span><br><span class="line">$ reboot</span><br></pre></td></tr></table></figure></p><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>至此，我们添加有 USB 串口相关驱动的镜像就在 TX2 上被安装好了，这样就可以愉快的使用串口了。快使用新镜像进行开发吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Jetson-TX2-重新编译内核添加usb驱动&quot;&gt;&lt;a href=&quot;#Jetson-TX2-重新编译内核添加usb驱动&quot; class=&quot;headerlink&quot; title=&quot;Jetson TX2 重新编译内核添加usb驱动&quot;&gt;&lt;/a&gt;Jetson TX2 重新编译内核添加usb驱动&lt;/h3&gt;&lt;p&gt;上一篇我们已经简单说明了怎么给 Jetson TX2 刷机，Jetson TX2 虽然已经成功完成刷机了，但是 Nvidia 的默认配置是禁用了一些驱动的，比如说板子上的 UART 串口就不可以用，需要用户自己安装，重新编译新的镜像。&lt;br&gt;本文这里就简单介绍一下，添加驱动并重新编译镜像。&lt;br&gt;在 GitHub 上有别人开源的编译新镜像的脚本文件，在 Jetsonhacks 的仓库里有。这里我们就使用他的脚本文件。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="毕业设计" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="Jetson TX2" scheme="https://blog.strongwong.top/tags/Jetson-TX2/"/>
    
      <category term="Nvidia" scheme="https://blog.strongwong.top/tags/Nvidia/"/>
    
      <category term="内核编译" scheme="https://blog.strongwong.top/tags/%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/"/>
    
      <category term="驱动" scheme="https://blog.strongwong.top/tags/%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>Nvidia Jetson TX2 刷机并安装JetPack3.1</title>
    <link href="https://blog.strongwong.top//posts/Nvidia-Jetson-TX2-%E5%88%B7%E6%9C%BA%E5%B9%B6%E5%AE%89%E8%A3%85JetPack3.1.html"/>
    <id>https://blog.strongwong.top//posts/Nvidia-Jetson-TX2-刷机并安装JetPack3.1.html</id>
    <published>2018-08-12T12:15:29.000Z</published>
    <updated>2018-11-24T02:24:46.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nvidia-Jetson-TX2-刷机并安装-JetPack3-1"><a href="#Nvidia-Jetson-TX2-刷机并安装-JetPack3-1" class="headerlink" title="Nvidia Jetson TX2 刷机并安装 JetPack3.1"></a>Nvidia Jetson TX2 刷机并安装 JetPack3.1</h2><p>上篇，我已经简单介绍了一下我的整个小车的物理框架和软件架构。下面我可能会分成几次推文，介绍一下搭建小车的具体过程。<br>本次主要记录一下给 Nvidia Jetson TX2 开发板刷机的过程。</p><a id="more"></a><h3 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h3><p>1.一块Jetson TX2 开发板</p><p>2.一台安装 Ubuntu 系统的独立主机(不建议使用虚拟机，推荐使用 Ubuntu 16.04)</p><p>3.一台路由器</p><p>4.两根网线，一根 micro usb 数据线</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1.首先需要从 Nvidia 的官方网站上下载 Jet Pack3.1 的安装包，使用 Ubuntu host 直接下载或者下载好拷贝到 host 上也可以。(我当时最新的是 Jet Pack3.1 ，现在已经到 3.3 了，你也可以使用最新的版本。下载的话需要 Nvidia 账号才可以)<br>下载网址：<a href="https://developer.nvidia.com/embedded/jetpack" target="_blank" rel="noopener">https://developer.nvidia.com/embedded/jetpack</a></p><p>2.将 TX2 开发板和主机都通过网线连接到一台路由器上。准备好 TX2 开发板和 Ubuntu Host 之后就可以开始刷机了。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载好 Jet Pack3.1 安装包后，打开 Terminal 进入到安装包所在的目录，执行下面这条命令运行安装包。运行效果如下图。(如果文件没有执行权限可以使用 chmod -x file 命令来改变执行权限)</p><p><code>$ ./JetPack-L4T-3.1-linux-x64.run</code></p><p>运行完会弹出 JetPack L4T 3.1 Installer, 一路 Next 就好，如下图：<br><img src="https://files.catbox.moe/n9dnwk.png" alt=""></p><p>注意选择 Jetson TX2 开发板<br><img src="https://photo.ishield.cn/pic/5b702af99dc6d6522bb72f67" alt=""></p><p>点击 Next 之后会提示输入密码，待安装完成后，就会进入 JetPack L4T Component Manager。(这里要注意，如果网络不好可能会要等很久也出不来安装包信息，所以一定要保证网络环境好，可能有一些包还需要科学上网。)<br>如果你的包加载好了，检查一下 CUDA Toolkit 和 OpenCV for Tegra 这两个包是否选择了，这两个一定要安装。选择好之后，点击 Next 。在弹出的弹框中勾选所有协议，等待各种包下载完成。<br><img src="https://photo.ishield.cn/pic/5b702c3e9dc6d6522bb72f6c" alt=""><br><img src="https://photo.ishield.cn/pic/5b702b289dc6d6522bb72f68" alt=""></p><p>下载完成后，选择 Host 和 TX2 的连接方式，我们选择第一项，通过同一路由器连接在同一网络。网口选择保持默认就好。<br><img src="https://files.catbox.moe/hvd0oi.png" alt=""></p><p>接下来就是将包移动到 TX2 开发板上。文件较大，可能要等一会。执行下一步后，会出现一个提示重启 TX2 的步骤。按照提示进行操作。</p><p>第一步，将 TX2 关机， 拔下电源，使用 micro usb 数据线将 TX2 与 Host 相连。</p><p>第二步，重新插上电源，启动 TX2 ，同时按住 rec 和 rst 两个按键两秒钟， 然后松开 rst 按键，按住 rec 按键 3 秒钟。</p><p>第三步，这时在 Host 端，重新打开一个 terminal，查看 usb 端口信息(使用命令 lsusb 就可以查看)，这时应该就可以看 ID 为 0955:7C18 的叫 Nvidia Corp 的端口，就说明 TX2 已经进入 REC 模式并和 host 连接好了，这时回到有重启步骤的窗口，按回车 Enter，就开始 TX2 固件更新了。<br><img src="https://photo.ishield.cn/pic/5b702bda9dc6d6522bb72f6a" alt=""><br><img src="https://photo.ishield.cn/pic/5b702bf19dc6d6522bb72f6b" alt=""></p><p>安装完成后 TX2 就会重新启动，然后接下来会进行 CUDA 等一些软件的安装。</p><p>至此，Nvidia TX2 的安装就基本完成了。就可以愉快的在 Jetson TX2 上进行开发啦！</p><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>在 TX2 上进行基本开发的环境就已经基本搭建好了，但是大型的开发可能 TX2 本身自带的 30 多个 G 内存可能是不够的，因此我们可能还需要一个容量较大的 SSD 来放系统。还有就是 TX2 开发板默认的镜像设置可能会有一些端口没有开放，为了跟好的开发，所以后面需要我们自己重新编译镜像。这些在后面我会继续介绍。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Nvidia-Jetson-TX2-刷机并安装-JetPack3-1&quot;&gt;&lt;a href=&quot;#Nvidia-Jetson-TX2-刷机并安装-JetPack3-1&quot; class=&quot;headerlink&quot; title=&quot;Nvidia Jetson TX2 刷机并安装 JetPack3.1&quot;&gt;&lt;/a&gt;Nvidia Jetson TX2 刷机并安装 JetPack3.1&lt;/h2&gt;&lt;p&gt;上篇，我已经简单介绍了一下我的整个小车的物理框架和软件架构。下面我可能会分成几次推文，介绍一下搭建小车的具体过程。&lt;br&gt;本次主要记录一下给 Nvidia Jetson TX2 开发板刷机的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="毕业设计" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="Jetson TX2" scheme="https://blog.strongwong.top/tags/Jetson-TX2/"/>
    
      <category term="Nvidia" scheme="https://blog.strongwong.top/tags/Nvidia/"/>
    
      <category term="刷机" scheme="https://blog.strongwong.top/tags/%E5%88%B7%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>我的毕业设计--基于ROS的移动机器人</title>
    <link href="https://blog.strongwong.top//posts/%E6%88%91%E7%9A%84%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1-%E5%9F%BA%E4%BA%8EROS%E7%9A%84%E7%A7%BB%E5%8A%A8%E6%9C%BA%E5%99%A8%E4%BA%BA.html"/>
    <id>https://blog.strongwong.top//posts/我的毕业设计-基于ROS的移动机器人.html</id>
    <published>2018-08-12T11:45:32.000Z</published>
    <updated>2018-11-24T02:19:53.853Z</updated>
    
    <content type="html"><![CDATA[<p>在做毕设的时候就有这个想法，想把毕设过程中学到的和遇到坑全都一点点的记录下来。但是由于毕设时间也比较紧张，又要上班，所以一直拖到现在也没有写些什么。好在最近毕设也答辩结束了，也毕业了，稍稍轻松了一些，准备最近花一些时间来整理一些毕设的东西，写几篇文字记录一下。接下来整体介绍一下这个机器人。</p><a id="more"></a><p>简单来说，我的毕设就是做一个可以进行室内 SLAM 建图的移动机器人。首先呢，我把我的机器人分为上层和底层两个部分。上层为决策层，主要是在 Jetson TX2 开发板上，运行 ROS 机器人操作系统以及 SLAM 算法。通过激光雷达或者深度相机获取深度数据，进行机器人的同时定位与地图构建。底层为具体的控制层，主要是 STM32 通过串口通讯与上层进行通信，接收决策层的速度控制指令，以及进行电机速度控制。机器人的系统框架如下图所示。</p><p><img src="https://ww3.sinaimg.cn/large/005YhI8igy1fugcmx4e46j30m90d8mys" alt=""><br><img src="https://ww3.sinaimg.cn/large/005YhI8igy1fugcnqpd93j30rk0g2ju9" alt=""></p><p>各部分的具体介绍，将在后面我有空的时候慢慢更新，哈哈哈~~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做毕设的时候就有这个想法，想把毕设过程中学到的和遇到坑全都一点点的记录下来。但是由于毕设时间也比较紧张，又要上班，所以一直拖到现在也没有写些什么。好在最近毕设也答辩结束了，也毕业了，稍稍轻松了一些，准备最近花一些时间来整理一些毕设的东西，写几篇文字记录一下。接下来整体介绍一下这个机器人。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="毕业设计" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="ROS" scheme="https://blog.strongwong.top/tags/ROS/"/>
    
      <category term="机器人" scheme="https://blog.strongwong.top/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>读书</title>
    <link href="https://blog.strongwong.top//posts/%E8%AF%BB%E4%B9%A6.html"/>
    <id>https://blog.strongwong.top//posts/读书.html</id>
    <published>2018-08-08T10:20:19.000Z</published>
    <updated>2018-10-21T07:57:24.388Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间，自己陆陆续续收集和整理了，好多电子书，还买了一个Kindle。也买了好些书，可是到现在也没看几本。下半年还是要多读书，多写字，多赚钱！</p><p>这里简单列一下我的书单，我兴趣爱好广泛，所以读的书也就比较杂，姑且就简单分为两类吧！技术类的和消遣的书吧。</p><a id="more"></a><h3 id="技术类："><a href="#技术类：" class="headerlink" title="技术类："></a>技术类：</h3><h4 id="已读"><a href="#已读" class="headerlink" title="已读"></a>已读</h4><ul><li style="list-style: none"><input type="checkbox" checked> OpenCV3编程入门</li><li style="list-style: none"><input type="checkbox" checked> 低功耗蓝牙开发权威指南</li><li style="list-style: none"><input type="checkbox" checked> Cortex-M3权威指南</li></ul><h4 id="在读"><a href="#在读" class="headerlink" title="在读"></a>在读</h4><ul><li style="list-style: none"><input type="checkbox"> C和指针</li><li style="list-style: none"><input type="checkbox"> C专家编程</li><li style="list-style: none"><input type="checkbox"> C陷阱与缺陷</li></ul><h4 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h4><ul><li style="list-style: none"><input type="checkbox"> C++沉思录</li><li style="list-style: none"><input type="checkbox"> 深入理解计算机系统</li><li style="list-style: none"><input type="checkbox"> 程序员的数学 1，2，3</li><li style="list-style: none"><input type="checkbox"> 信息简史</li><li style="list-style: none"><input type="checkbox"> 大话设计模式</li><li style="list-style: none"><input type="checkbox"> 计算机原理与设计：Verilog HDL版</li><li style="list-style: none"><input type="checkbox"> 经典算法大全</li><li style="list-style: none"><input type="checkbox"> 算法导论</li></ul><h3 id="消遣类："><a href="#消遣类：" class="headerlink" title="消遣类："></a>消遣类：</h3><h4 id="已读-1"><a href="#已读-1" class="headerlink" title="已读"></a>已读</h4><ul><li style="list-style: none"><input type="checkbox" checked> 他改变了中国</li><li style="list-style: none"><input type="checkbox" checked> 人类简史</li><li style="list-style: none"><input type="checkbox" checked> 三体 I</li><li style="list-style: none"><input type="checkbox" checked> 三体: 黑暗森林</li></ul><h4 id="在读-1"><a href="#在读-1" class="headerlink" title="在读"></a>在读</h4><ul><li style="list-style: none"><input type="checkbox"> 三体: 死神永生</li><li style="list-style: none"><input type="checkbox"> 浪潮之巅</li><li style="list-style: none"><input type="checkbox"> 太阳的距离</li><li style="list-style: none"><input type="checkbox"> 数学之美</li></ul><h4 id="TODO-1"><a href="#TODO-1" class="headerlink" title="TODO"></a>TODO</h4><ul><li style="list-style: none"><input type="checkbox"> 未来简史</li><li style="list-style: none"><input type="checkbox"> 宇宙最初三分钟</li><li style="list-style: none"><input type="checkbox"> 爱因斯坦传</li><li style="list-style: none"><input type="checkbox"> Alibaba 2017技术集锦</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间，自己陆陆续续收集和整理了，好多电子书，还买了一个Kindle。也买了好些书，可是到现在也没看几本。下半年还是要多读书，多写字，多赚钱！&lt;/p&gt;
&lt;p&gt;这里简单列一下我的书单，我兴趣爱好广泛，所以读的书也就比较杂，姑且就简单分为两类吧！技术类的和消遣的书吧。&lt;/p&gt;
    
    </summary>
    
      <category term="读书" scheme="https://blog.strongwong.top/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读书" scheme="https://blog.strongwong.top/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="学习" scheme="https://blog.strongwong.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
