<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Strongwong</title>
  
  <subtitle>个人小站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.strongwong.top/"/>
  <updated>2018-08-14T13:01:15.304Z</updated>
  <id>http://www.strongwong.top/</id>
  
  <author>
    <name>strongwong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>strongwongのdiary</title>
    <link href="http://www.strongwong.top/2028/08/08/strongwong%E3%81%AEdiary/"/>
    <id>http://www.strongwong.top/2028/08/08/strongwongのdiary/</id>
    <published>2028-08-08T06:58:54.000Z</published>
    <updated>2018-08-14T13:01:15.304Z</updated>
    
    <content type="html"><![CDATA[<p>简单记录一下我每天搞了什么。成长之路，点滴记录！</p><h3 id="2018-8-1-8-5"><a href="#2018-8-1-8-5" class="headerlink" title="2018-8-1~8-5"></a>2018-8-1~8-5</h3><p>1.搭建了博客，学习了 MarkDown 语法规则，学习用 MarkDown 来写作。<br>2.测试 UlpBench<br>3.移植 UlpBench 部分代码到 M3 上运行，测试功耗<br>4.测试单指令差异<br>5.整理分析测试数据</p><a id="more"></a><h3 id="2018-8-6"><a href="#2018-8-6" class="headerlink" title="2018-8-6"></a>2018-8-6</h3><p>1.阅读整理 Event Arbiter 代码，分析链路层和事件仲裁器之间的关系<br>2.看了很多大佬的博客，调整了博客的一些设置</p><h3 id="2018-8-8"><a href="#2018-8-8" class="headerlink" title="2018-8-8"></a>2018-8-8</h3><p>1.今天还是在看 Event Arbiter 的代码和文档资料。<br>2.尝试性的把 Event Arbiter 的部分代码进行了移植，但是没跑通，还要很多问题，明天继续解决。进展有点慢，测试方案还不知道怎么弄 <em>_</em><br>3.十年前的今天奥运会开幕了，我在家看奥运会；今天的我大学毕业了，在这里敲代码；十年后的我怎么样了，我会在干什么？<br>4.博客还是要坚持写，加油！</p><h3 id="2018-8-9"><a href="#2018-8-9" class="headerlink" title="2018-8-9"></a>2018-8-9</h3><p>1.今天还是搞 EA 这个东西，没什么进展，难受！<br>2.领导让写一个 CM3 进 sleep 的代码，写了，内存中对应的位也写入值了，但是 J-link 还是可以正常连接，有很多东西好像并没有关掉，怀疑是设计的 SOC 有问题。</p><h3 id="2018-8-10"><a href="#2018-8-10" class="headerlink" title="2018-8-10"></a>2018-8-10</h3><p>1.我昨天给领导写的代码应该是没问题的，只是 FPGA 上不能进行这样的调试。但是还是有一些问题，比如说中断使能没做，也没有 rtc 或者 wakeup 的功能，还需要增加。<br>2.EA 的大部分功能都已经移植好了，但是和底层相关的定时器我没有，还是有问题，不能进行正常调试。然后就是 EA 的整个测试流程怎么搞，我还不太明白，对单个函数的测好做，但是如果要测试多个事件的仲裁，测试 EA 的完整功能还不知道怎么弄。可能我需要有一个简单的任务切换，每个任务里请求一个事件，然后有 EA 来进行判断和仲裁。</p><h3 id="2018-8-13"><a href="#2018-8-13" class="headerlink" title="2018-8-13"></a>2018-8-13</h3><p>1.继续搞 EA ，底层的一些时间相关的寄存器我打算使用 Systick 和 Timer 结合起来模拟。但是还有一些问题，还需要解决。<br>2.今天戚博有给了一个另外的任务，需要我在服务器上使用 arm-none-eabi-gcc 来做开发。让我写一套 Makefile ，虽然我之前有简单使用过 Makefile 、make ，但是我还没弄过这种相对大一些的项目的编译、开发。我找了些 makefile 的文档来学习，看看 Makefile 该怎么写。</p><h3 id="2018-8-14"><a href="#2018-8-14" class="headerlink" title="2018-8-14"></a>2018-8-14</h3><p>1.学习 Linux 下面的开发，学习 Makefile 的编写。了解补充一些编译、链接相关的知识，熟悉一下 GUN 相关的工具链。<br>2.整理我之前写的代码，今天发现之前写的还是有一些问题，做了很多调整，今天主要调整了 UART 相关的代码。明天可能还需要把 timer 、 gpio 的代码做一些调整。然后往服务器上迁移。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单记录一下我每天搞了什么。成长之路，点滴记录！&lt;/p&gt;
&lt;h3 id=&quot;2018-8-1-8-5&quot;&gt;&lt;a href=&quot;#2018-8-1-8-5&quot; class=&quot;headerlink&quot; title=&quot;2018-8-1~8-5&quot;&gt;&lt;/a&gt;2018-8-1~8-5&lt;/h3&gt;&lt;p&gt;1.搭建了博客，学习了 MarkDown 语法规则，学习用 MarkDown 来写作。&lt;br&gt;2.测试 UlpBench&lt;br&gt;3.移植 UlpBench 部分代码到 M3 上运行，测试功耗&lt;br&gt;4.测试单指令差异&lt;br&gt;5.整理分析测试数据&lt;/p&gt;
    
    </summary>
    
      <category term="diary" scheme="http://www.strongwong.top/categories/diary/"/>
    
    
      <category term="diary" scheme="http://www.strongwong.top/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>Jetson TX2 重新编译内核添加usb等驱动</title>
    <link href="http://www.strongwong.top/2018/08/20/Jetson-TX2-%E9%87%8D%E6%96%B0%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8%E6%B7%BB%E5%8A%A0usb%E7%AD%89%E9%A9%B1%E5%8A%A8/"/>
    <id>http://www.strongwong.top/2018/08/20/Jetson-TX2-重新编译内核添加usb等驱动/</id>
    <published>2018-08-20T10:55:00.000Z</published>
    <updated>2018-08-26T09:26:32.591Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Jetson-TX2-重新编译内核添加usb驱动"><a href="#Jetson-TX2-重新编译内核添加usb驱动" class="headerlink" title="Jetson TX2 重新编译内核添加usb驱动"></a>Jetson TX2 重新编译内核添加usb驱动</h3><p>上一篇我们已经简单说明了怎么给 Jetson TX2 刷机，Jetson TX2 虽然已经成功完成刷机了，但是 Nvidia 的默认配置是禁用了一些驱动的，比如说板子上的 UART 串口就不可以用，需要用户自己安装，重新编译新的镜像。<br>本文这里就简单介绍一下，添加驱动并重新编译镜像。<br>在 GitHub 上有别人开源的编译新镜像的脚本文件，在 Jetsonhacks 的仓库里有。这里我们就使用他的脚本文件。</p><a id="more"></a><h3 id="下载脚本"><a href="#下载脚本" class="headerlink" title="下载脚本"></a>下载脚本</h3><p>首先从 GitHub 上下载编译脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/jetsonhacks/buildJetsonTX2Kernel.git</span><br></pre></td></tr></table></figure></p><p>如果你是 JetPack3.2.1 版本，直接使用 git 下载的话没有问题，因为目前他更新到的最新版本是 JetPack 3.2.1 内核版本为 28.2.1 (2018-8-20)。但是我安装的是 JetPack 3.1 对应的内核版本是 28.1 所以是不能直接使用的。因此需要下载对应的内核版本的脚本才可以使用。<br>JetPack 3.1 版本的话就需要下载这个。<br><code>https://github.com/jetsonhacks/buildJetsonTX2Kernel/archive/vL4T28.1.tar.gz</code></p><h3 id="解压，获取源码"><a href="#解压，获取源码" class="headerlink" title="解压，获取源码"></a>解压，获取源码</h3><p>下载好之后，解压缩，进入解压出来的文件夹，打开 Terminal 运行 getKernelSources.sh 脚本获取内核源码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./getKernelSources.sh</span><br></pre></td></tr></table></figure></p><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><p>下载完成之后就会打开一个 xconfig 配置界面。<br>设置你的镜像名称。打开设置 Genral Setup-&gt;Local version - append to kernel release，双击 Local version - append to kernel release<br>在文本框中输入名字，如我这里为 -jetsonbot-v0.1 ， 回车；如下图所示：<br><img src="https://photo.ishield.cn/pic/5b8269849dc6d6533b592669" alt=""></p><p>在 xconfig 中按 Ctrl+F ，会弹出一个搜索框，输入你想要添加的设备驱动，比如可以添加 USB ACM， CH341 和 cp210x 串口驱动等，在搜索结果中选择对应的驱动，选中框打上勾即可。<br>我这里搜索的是 ACM 驱动，如下图所示：<br><img src="https://photo.ishield.cn/pic/5b826b089dc6d6533b59266f" alt=""></p><p>设置好了之后，一定要保存你的设置， File-&gt;Save</p><h3 id="编译新内核"><a href="#编译新内核" class="headerlink" title="编译新内核"></a>编译新内核</h3><p>保存好设置，关闭 xconfig 配置窗口，准备开始编译内核，编译过程大约需要 20 分钟。<br>运行 makeKernel.sh 脚本，开始编译新的内核。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./makeKernel.sh</span><br></pre></td></tr></table></figure></p><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p>编译过程中，你可以去喝杯 coffee 放松一下，等待编译完成。<br>编译结束后，运行 copyImage.sh 脚本，将新编译的镜像文件拷贝到  /boot 目录下。拷贝完成重启 TX2 即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./copyImage.sh</span><br><span class="line">$ reboot</span><br></pre></td></tr></table></figure></p><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>至此，我们添加有 USB 串口相关驱动的镜像就在 TX2 上被安装好了，这样就可以愉快的使用串口了。快使用新镜像进行开发吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Jetson-TX2-重新编译内核添加usb驱动&quot;&gt;&lt;a href=&quot;#Jetson-TX2-重新编译内核添加usb驱动&quot; class=&quot;headerlink&quot; title=&quot;Jetson TX2 重新编译内核添加usb驱动&quot;&gt;&lt;/a&gt;Jetson TX2 重新编译内核添加usb驱动&lt;/h3&gt;&lt;p&gt;上一篇我们已经简单说明了怎么给 Jetson TX2 刷机，Jetson TX2 虽然已经成功完成刷机了，但是 Nvidia 的默认配置是禁用了一些驱动的，比如说板子上的 UART 串口就不可以用，需要用户自己安装，重新编译新的镜像。&lt;br&gt;本文这里就简单介绍一下，添加驱动并重新编译镜像。&lt;br&gt;在 GitHub 上有别人开源的编译新镜像的脚本文件，在 Jetsonhacks 的仓库里有。这里我们就使用他的脚本文件。&lt;/p&gt;
    
    </summary>
    
      <category term="毕业设计" scheme="http://www.strongwong.top/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="学习" scheme="http://www.strongwong.top/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Jetson TX2" scheme="http://www.strongwong.top/tags/Jetson-TX2/"/>
    
      <category term="Nvidia" scheme="http://www.strongwong.top/tags/Nvidia/"/>
    
      <category term="内核编译" scheme="http://www.strongwong.top/tags/%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/"/>
    
      <category term="驱动" scheme="http://www.strongwong.top/tags/%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>Nvidia Jetson TX2 刷机并安装JetPack3.1</title>
    <link href="http://www.strongwong.top/2018/08/12/Nvidia-Jetson-TX2-%E5%88%B7%E6%9C%BA%E5%B9%B6%E5%AE%89%E8%A3%85JetPack3.1/"/>
    <id>http://www.strongwong.top/2018/08/12/Nvidia-Jetson-TX2-刷机并安装JetPack3.1/</id>
    <published>2018-08-12T12:15:29.000Z</published>
    <updated>2018-08-20T10:50:08.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nvidia-Jetson-TX2-刷机并安装-JetPack3-1"><a href="#Nvidia-Jetson-TX2-刷机并安装-JetPack3-1" class="headerlink" title="Nvidia Jetson TX2 刷机并安装 JetPack3.1"></a>Nvidia Jetson TX2 刷机并安装 JetPack3.1</h2><p>上篇，我已经简单介绍了一下我的整个小车的物理框架和软件架构。下面我可能会分成几次推文，介绍一下搭建小车的具体过程。<br>本次主要记录一下给 Nvidia Jetson TX2 开发板刷机的过程。</p><a id="more"></a><h3 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h3><p>1.一块Jetson TX2 开发板</p><p>2.一台安装 Ubuntu 系统的独立主机(不建议使用虚拟机，推荐使用 Ubuntu 16.04)</p><p>3.一台路由器</p><p>4.两根网线，一根 micro usb 数据线</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1.首先需要从 Nvidia 的官方网站上下载 Jet Pack3.1 的安装包，使用 Ubuntu host 直接下载或者下载好拷贝到 host 上也可以。(我当时最新的是 Jet Pack3.1 ，现在已经到 3.3 了，你也可以使用最新的版本。下载的话需要 Nvidia 账号才可以)<br>下载网址：<a href="https://developer.nvidia.com/embedded/jetpack" target="_blank" rel="noopener">https://developer.nvidia.com/embedded/jetpack</a></p><p>2.将 TX2 开发板和主机都通过网线连接到一台路由器上。准备好 TX2 开发板和 Ubuntu Host 之后就可以开始刷机了。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载好 Jet Pack3.1 安装包后，打开 Terminal 进入到安装包所在的目录，执行下面这条命令运行安装包。运行效果如下图。(如果文件没有执行权限可以使用 chmod -x file 命令来改变执行权限)</p><p><code>$ ./JetPack-L4T-3.1-linux-x64.run</code></p><p>运行完会弹出 JetPack L4T 3.1 Installer, 一路 Next 就好，如下图：<br><img src="https://files.catbox.moe/n9dnwk.png" alt=""></p><p>注意选择 Jetson TX2 开发板<br><img src="https://photo.ishield.cn/pic/5b702af99dc6d6522bb72f67" alt=""></p><p>点击 Next 之后会提示输入密码，待安装完成后，就会进入 JetPack L4T Component Manager。(这里要注意，如果网络不好可能会要等很久也出不来安装包信息，所以一定要保证网络环境好，可能有一些包还需要科学上网。)<br>如果你的包加载好了，检查一下 CUDA Toolkit 和 OpenCV for Tegra 这两个包是否选择了，这两个一定要安装。选择好之后，点击 Next 。在弹出的弹框中勾选所有协议，等待各种包下载完成。<br><img src="https://photo.ishield.cn/pic/5b702c3e9dc6d6522bb72f6c" alt=""><br><img src="https://photo.ishield.cn/pic/5b702b289dc6d6522bb72f68" alt=""></p><p>下载完成后，选择 Host 和 TX2 的连接方式，我们选择第一项，通过同一路由器连接在同一网络。网口选择保持默认就好。<br><img src="https://files.catbox.moe/hvd0oi.png" alt=""></p><p>接下来就是将包移动到 TX2 开发板上。文件较大，可能要等一会。执行下一步后，会出现一个提示重启 TX2 的步骤。按照提示进行操作。</p><p>第一步，将 TX2 关机， 拔下电源，使用 micro usb 数据线将 TX2 与 Host 相连。</p><p>第二步，重新插上电源，启动 TX2 ，同时按住 rec 和 rst 两个按键两秒钟， 然后松开 rst 按键，按住 rec 按键 3 秒钟。</p><p>第三步，这时在 Host 端，重新打开一个 terminal，查看 usb 端口信息(使用命令 lsusb 就可以查看)，这时应该就可以看 ID 为 0955:7C18 的叫 Nvidia Corp 的端口，就说明 TX2 已经进入 REC 模式并和 host 连接好了，这时回到有重启步骤的窗口，按回车 Enter，就开始 TX2 固件更新了。<br><img src="https://photo.ishield.cn/pic/5b702bda9dc6d6522bb72f6a" alt=""><br><img src="https://photo.ishield.cn/pic/5b702bf19dc6d6522bb72f6b" alt=""></p><p>安装完成后 TX2 就会重新启动，然后接下来会进行 CUDA 等一些软件的安装。</p><p>至此，Nvidia TX2 的安装就基本完成了。就可以愉快的在 Jetson TX2 上进行开发啦！</p><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>在 TX2 上进行基本开发的环境就已经基本搭建好了，但是大型的开发可能 TX2 本身自带的 30 多个 G 内存可能是不够的，因此我们可能还需要一个容量较大的 SSD 来放系统。还有就是 TX2 开发板默认的镜像设置可能会有一些端口没有开放，为了跟好的开发，所以后面需要我们自己重新编译镜像。这些在后面我会继续介绍。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Nvidia-Jetson-TX2-刷机并安装-JetPack3-1&quot;&gt;&lt;a href=&quot;#Nvidia-Jetson-TX2-刷机并安装-JetPack3-1&quot; class=&quot;headerlink&quot; title=&quot;Nvidia Jetson TX2 刷机并安装 JetPack3.1&quot;&gt;&lt;/a&gt;Nvidia Jetson TX2 刷机并安装 JetPack3.1&lt;/h2&gt;&lt;p&gt;上篇，我已经简单介绍了一下我的整个小车的物理框架和软件架构。下面我可能会分成几次推文，介绍一下搭建小车的具体过程。&lt;br&gt;本次主要记录一下给 Nvidia Jetson TX2 开发板刷机的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="毕业设计" scheme="http://www.strongwong.top/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="学习" scheme="http://www.strongwong.top/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Jetson TX2" scheme="http://www.strongwong.top/tags/Jetson-TX2/"/>
    
      <category term="Nvidia" scheme="http://www.strongwong.top/tags/Nvidia/"/>
    
      <category term="刷机" scheme="http://www.strongwong.top/tags/%E5%88%B7%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>我的毕业设计--基于ROS的移动机器人</title>
    <link href="http://www.strongwong.top/2018/08/12/%E6%88%91%E7%9A%84%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1-%E5%9F%BA%E4%BA%8EROS%E7%9A%84%E7%A7%BB%E5%8A%A8%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>http://www.strongwong.top/2018/08/12/我的毕业设计-基于ROS的移动机器人/</id>
    <published>2018-08-12T11:45:32.000Z</published>
    <updated>2018-08-20T10:38:36.963Z</updated>
    
    <content type="html"><![CDATA[<p>在做毕设的时候就有这个想法，想把毕设过程中学到的和遇到坑全都一点点的记录下来。但是由于毕设时间也比较紧张，又要上班，所以一直拖到现在也没有写些什么。好在最近毕设也答辩结束了，也毕业了，稍稍轻松了一些，准备最近花一些时间来整理一些毕设的东西，写几篇文字记录一下。接下来整体介绍一下这个机器人。</p><a id="more"></a><p>简单来说，我的毕设就是做一个可以进行室内 SLAM 建图的移动机器人。首先呢，我把我的机器人分为上层和底层两个部分。上层为决策层，主要是在 Jetson TX2 开发板上，运行 ROS 机器人操作系统以及 SLAM 算法。通过激光雷达或者深度相机获取深度数据，进行机器人的同时定位与地图构建。底层为具体的控制层，主要是 STM32 通过串口通讯与上层进行通信，接收决策层的速度控制指令，以及进行电机速度控制。机器人的系统框架如下图所示。</p><p><img src="https://ww3.sinaimg.cn/large/005YhI8igy1fugcmx4e46j30m90d8mys" alt=""><br><img src="https://ww3.sinaimg.cn/large/005YhI8igy1fugcnqpd93j30rk0g2ju9" alt=""></p><p>各部分的具体介绍，将在后面我有空的时候慢慢更新，哈哈哈~~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做毕设的时候就有这个想法，想把毕设过程中学到的和遇到坑全都一点点的记录下来。但是由于毕设时间也比较紧张，又要上班，所以一直拖到现在也没有写些什么。好在最近毕设也答辩结束了，也毕业了，稍稍轻松了一些，准备最近花一些时间来整理一些毕设的东西，写几篇文字记录一下。接下来整体介绍一下这个机器人。&lt;/p&gt;
    
    </summary>
    
      <category term="毕业设计" scheme="http://www.strongwong.top/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="学习" scheme="http://www.strongwong.top/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="ROS" scheme="http://www.strongwong.top/tags/ROS/"/>
    
      <category term="机器人" scheme="http://www.strongwong.top/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>读书</title>
    <link href="http://www.strongwong.top/2018/08/08/%E8%AF%BB%E4%B9%A6/"/>
    <id>http://www.strongwong.top/2018/08/08/读书/</id>
    <published>2018-08-08T10:20:19.000Z</published>
    <updated>2018-08-08T11:37:24.763Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间，自己陆陆续续收集和整理了，好多电子书，还买了一个Kindle。也买了好些书，可是到现在也没看几本。下半年还是要多读书，多写字，多赚钱！</p><p>这里简单列一下我的书单，我兴趣爱好广泛，所以读的书也就比较杂，姑且就简单分为两类吧！技术类的和消遣的书吧。</p><a id="more"></a><h3 id="技术类："><a href="#技术类：" class="headerlink" title="技术类："></a>技术类：</h3><h4 id="已读"><a href="#已读" class="headerlink" title="已读"></a>已读</h4><ul><li style="list-style: none"><input type="checkbox" checked> OpenCV3编程入门</li><li style="list-style: none"><input type="checkbox" checked> 低功耗蓝牙开发权威指南</li><li style="list-style: none"><input type="checkbox" checked> Cortex-M3权威指南</li></ul><h4 id="在读"><a href="#在读" class="headerlink" title="在读"></a>在读</h4><ul><li style="list-style: none"><input type="checkbox"> C和指针</li><li style="list-style: none"><input type="checkbox"> C专家编程</li><li style="list-style: none"><input type="checkbox"> C陷阱与缺陷</li></ul><h4 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h4><ul><li style="list-style: none"><input type="checkbox"> C++沉思录</li><li style="list-style: none"><input type="checkbox"> 深入理解计算机系统</li><li style="list-style: none"><input type="checkbox"> 程序员的数学 1，2，3</li><li style="list-style: none"><input type="checkbox"> 信息简史</li><li style="list-style: none"><input type="checkbox"> 大话设计模式</li><li style="list-style: none"><input type="checkbox"> 计算机原理与设计：Verilog HDL版</li><li style="list-style: none"><input type="checkbox"> 经典算法大全</li><li style="list-style: none"><input type="checkbox"> 算法导论</li></ul><h3 id="消遣类："><a href="#消遣类：" class="headerlink" title="消遣类："></a>消遣类：</h3><h4 id="已读-1"><a href="#已读-1" class="headerlink" title="已读"></a>已读</h4><ul><li style="list-style: none"><input type="checkbox" checked> 他改变了中国</li><li style="list-style: none"><input type="checkbox" checked> 人类简史</li></ul><h4 id="在读-1"><a href="#在读-1" class="headerlink" title="在读"></a>在读</h4><ul><li style="list-style: none"><input type="checkbox"> 浪潮之巅</li><li style="list-style: none"><input type="checkbox"> 太阳的距离</li><li style="list-style: none"><input type="checkbox"> 数学之美</li></ul><h4 id="TODO-1"><a href="#TODO-1" class="headerlink" title="TODO"></a>TODO</h4><ul><li style="list-style: none"><input type="checkbox"> 未来简史</li><li style="list-style: none"><input type="checkbox"> 三体</li><li style="list-style: none"><input type="checkbox"> 宇宙最初三分钟</li><li style="list-style: none"><input type="checkbox"> 爱因斯坦传</li><li style="list-style: none"><input type="checkbox"> Alibaba 2017技术集锦</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间，自己陆陆续续收集和整理了，好多电子书，还买了一个Kindle。也买了好些书，可是到现在也没看几本。下半年还是要多读书，多写字，多赚钱！&lt;/p&gt;
&lt;p&gt;这里简单列一下我的书单，我兴趣爱好广泛，所以读的书也就比较杂，姑且就简单分为两类吧！技术类的和消遣的书吧。&lt;/p&gt;
    
    </summary>
    
      <category term="读书" scheme="http://www.strongwong.top/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读书" scheme="http://www.strongwong.top/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="学习" scheme="http://www.strongwong.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>使用 Hexo+Github Pages 搭建个人博客</title>
    <link href="http://www.strongwong.top/2018/08/02/%E4%BD%BF%E7%94%A8Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.strongwong.top/2018/08/02/使用Hexo-GitHub-Pages搭建个人博客记录/</id>
    <published>2018-08-02T13:22:50.000Z</published>
    <updated>2018-08-05T14:20:35.285Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用-Hexo-Github-Pages-搭建个人博客记录"><a href="#使用-Hexo-Github-Pages-搭建个人博客记录" class="headerlink" title="使用 Hexo+Github Pages 搭建个人博客记录"></a>使用 Hexo+Github Pages 搭建个人博客记录</h2><p>最近在学习的时候发现很多人都推荐说，要学会写作。很多大牛都会有自己的博客，或者微信公众号。不仅要学会学习，更要学会表达，而写作就是一个很好的方式。通过把自己学到的东西再次输出出来，才有价值，写作是一个人吸收知识，并增强记忆转化成自己东西的过程。很多人认为学校里出来了之后应该会很少写文字了，其实不然，在工作中经常会有各种各样的汇报和报告需要你去写。<br>如果你不经常去写一些文字，慢慢的也就生疏了，也就忘了该怎么通过书面方式更好的表达信息。比如我们领导让大家每周写一份周报，每到周五的时候大家总是在纠结，这周报该怎么写。还有做测试的时候要有测试方案，测试结果，测试报告（分析）都是要写文档的。跟文字打交道的时候还是很多的啊！所以啊，平时还得多写写！</p><a id="more"></a><p>我在看一些大牛的博客的时候，发现他们的博客，好像都很好看。我很羡慕，于是我也想搭建一个自己的个人博客，所以就有了本站！<br>我了解到建站的方法有很多，比如:</p><ul><li>Hexo + GitHub Pages</li><li>Jekyll + GitHub Pages </li><li>WordPress + 服务器 + 域名</li><li>DeDeCMS + 服务器 + 域名</li><li>……</li></ul><p>我选择了使用 Hexo + GitHub Pages + 域名 的方法来建站。<br>首先 Hexo 简约风格我很喜欢，其次利用 GitHub Pages 的免费存储空间不需要自己购买服务器，<br>有一个 GitHub 账号就 ok 了，然后域名其实是一个可选项，GitHub 会提供一个 <a href="http://xxxx.github.io/" target="_blank" rel="noopener">http://xxxx.github.io/</a> 这种形式的域名进行访问。</p><h2 id="下面来简单记录一下，本站的搭建过程"><a href="#下面来简单记录一下，本站的搭建过程" class="headerlink" title="下面来简单记录一下，本站的搭建过程"></a>下面来简单记录一下，本站的搭建过程</h2><p>安装 Hexo 很简单，但是在安装前需要配置一些环境，需要安装 Node.js 和 Git 。因为 Hexo 博客系统是基于 Node.js 写的，需要 Node.js 的环境才能运行。 Hexo 运行之后会在本地生成网页，所以我们需要使用 Git 把本地网页文件上传到 GitHub 上的远程仓库里。（当然使用 GitHub 桌面版也可以上传。）</p><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>在 Node.js 官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a> 下载最新的稳定版，安装时保持默认设置，一路 next 就好，等待安装完成。<br>安装好之后，按<code>Win+R</code>,输入 <code>cmd</code>，运行命令提示符，输入<code>node -v</code>和 <code>nmp -v</code>，如果出现版本号，那么就安装成功了。<br><img src="node_npm_v.jpg" alt="node -v npm -v"></p><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><p>去 Git 官网：<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a> 下载最新的稳定版的 git 安装包，直接默认配置安装就好了，一路 next 就好。<br><img src="git.png" alt="git"><br>安装完成后，在桌面右键，点击<code>Git Bush Here</code>，输入 <code>git --version</code>，如果成功出现 Git 的版本号，到这里 Git 的环境配置就完成了！（如果你对 Git 不太熟悉，不太会用 Git 来上传你的博客，你也可以考虑使用 GitHub 的桌面版。）<br><img src="youjian.jpg" alt=""></p><h2 id="注册-GitHub-和配置"><a href="#注册-GitHub-和配置" class="headerlink" title="注册 GitHub 和配置"></a>注册 GitHub 和配置</h2><p>身为一个程序员，怎么能不知道 GitHub！每个程序员都应该有一个 GitHub 账号！GitHub是一个大型的代码托管平台，上面有很多技术大牛，也有很多有趣的开源项目，像Google、FaceBook、Macrosoft 等大公司也都在使用 GitHub。我们的博客就是托管在 GitHub 上的。</p><p>GitHub Pages 是面向用户、组织和项目开放的公共静态页面搭建托管服务，站点可以被免费托管在 Github 上，你可以选择使用 Github Pages 默认提供的域名 github.io 或者使用自定义域名来发布站点。</p><p>如果你还没有 Github 账号的话，需要先到 GitHub 官网进行注册： <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a> </p><p>注册完成之后，我们需要创建一个仓库来存放我们的博客。新建一个项目，如下图所示：<br><img src="new.jpg" alt=""><br>仓库名称一般使用用户名加 <code>.github.io</code>后缀，如下图所示：<br><img src="Github.jpg" alt=""><br>最后，创建完成后，就可以直接访问 <a href="https://yourname.github.io/" target="_blank" rel="noopener">https://yourname.github.io/</a> ,如果可以正常访问，那么 GitHub 的配置就搞完了。<br>到这里环境就基本上搭好了，下面就开始安装 Hexo 正式搭建个人博客。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>Hexo 是什么？<br>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown (或者其他渲染引擎)解析文章，在几秒内，即可利用靓丽的主题生成静态网页。并且一条指令即可部署到 GitHub Pages 或者其他网站。想更多了解 Hexo 请阅读 Hexo 官方文档: <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a></p><p>首先，在你的电脑里，新建一个文件夹专门用来存放你的博客文件。比如我的都放在 D:\study\hexo 目录下。</p><p>然后在该目录下，右键点击 <code>Git Bush Here</code>，打开 Git 控制台窗口，接下来的操作都在 Git 控制台进行，反正我是挺喜欢敲命令行的感觉。</p><p>接下来，在该目录下，输入 <code>npm install -g hexo-cli</code>，安装 Hexo ，这里会有一个 <code>WARN</code>，不用担心这不会影响正常使用。然后在安装 Hexo 部署到 Github Pages 的 deployer。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p><img src="hexo_install.png" alt=""></p><p>查看 Hexo 的版本，输入 <code>hexo -v</code>，正确输入如下信息就表示 Hexo 安装成功了。<br><img src="hexo_v.png" alt=""></p><h2 id="Hexo基础配置"><a href="#Hexo基础配置" class="headerlink" title="Hexo基础配置"></a>Hexo基础配置</h2><p>Hexo 安装完成后，执行下面的命令来初始化 Hexo ，对应的用户名(文件夹名称)改成自己的。Hexo 会在指定的文件夹中新建博客系统，和安装必备组件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init strongwong.github.io</span><br><span class="line">cd strongwong.github.io</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="hexo_blog_init.png" alt=""></p><p>新建完成后，在本地运行 Hexo 查看效果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo generate<span class="comment">#或者运行 hexo g 根据配置生成博客</span></span><br><span class="line">hexo server<span class="comment">#或者运行 hexo s 在本地运行 Hexo 登录 localhost:4000 查看</span></span><br><span class="line"><span class="comment">#按 ctrl + c 即可关闭本地服务器</span></span><br></pre></td></tr></table></figure><p>这时我们到浏览器中输入 <code>localhost:4000</code> 就可以在本地端正常访问了(如下图)，这样的话就说明博客已经打起来了，但是现在只是在本地，别人还不能访问，接下来我们就要把本地博客部署到 GitHub 上，让别人也可以看到你的博客。<br><img src="Hexo_s.png" alt=""></p><h2 id="本地-Hexo-仓库与-GitHub-关联"><a href="#本地-Hexo-仓库与-GitHub-关联" class="headerlink" title="本地 Hexo 仓库与 GitHub 关联"></a>本地 Hexo 仓库与 GitHub 关联</h2><p>配置 GitHub 的 SSH 密钥，让本地项目通过 git 命令与远程 GitHub 仓库建立联系，我们在本地做了修改之后直接通过 git 命令就可以把博客同步到 GitHub 上。</p><p>1.首先，在 git 控制台中，输入如下命令，配置个人参数(你的名字，你的邮箱)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"yourname"</span></span><br><span class="line">git config --global user.email <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure></p><p>2.接下来生成 SSH key 根据提示进行操作(其实一路回车就好了。)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure></p><p>3.执行完之后就会在默认路径下生成 <code>id_rsa.pub</code>文件。默认路径是：<code>C:\Users\Administrator\.ssh\id_rsa.pub</code> 需要注意的是 .ssh 是隐藏文件夹。<br>使用记事本打开这个文件，复制文件内容，然后粘贴到 <a href="https://github.com/settings/ssh/" target="_blank" rel="noopener">https://github.com/settings/ssh/</a> 的 “new SSH key” 中。</p><p>4.输入下面的命令，查看 SSH 是否配置成功。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><p>如果是下面的反馈<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure></p><p>直接输入 yes 就好了，然后就会看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi strongwong! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></p><p>这样的话，我们 SSH key 就配置成功了。</p><p>5.配置 deploy 参数<br>在博客根目录下，找到 <code>__config.yml</code> 文件，找到 deploy 关键字，进行如下配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:strongwong/strongwong.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>6.将本地博客提交到 GitHub Pages<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo g<span class="comment">#根据你的改动生成新的静态文件(即 public 文件夹)</span></span><br><span class="line">hexo s<span class="comment">#启动本地预览 ctrl + c 关闭</span></span><br><span class="line">hexo d<span class="comment">#部署到远程站点</span></span><br><span class="line">hexo clean<span class="comment">#清除旧的静态文件(即 public 文件夹)</span></span><br></pre></td></tr></table></figure></p><p>7.这时在浏览器输入 <a href="https://strongwong.github.io/" target="_blank" rel="noopener">https://strongwong.github.io/</a> ，可以正常访问就说明 hexo 搭建的博客已经成功部署到 GitHub 了，小伙伴们都可以通过这个地址访问自己的博客了。</p><h2 id="将个人域名解析到-GitHub"><a href="#将个人域名解析到-GitHub" class="headerlink" title="将个人域名解析到 GitHub"></a>将个人域名解析到 GitHub</h2><p>看着这个 GitHub 下面的二级域名，总觉得让人不太爽，所以有很多小伙伴都买了自己的域名，然后将自己域名绑定到 GitHub Pages 的博客上。<br>于是我也就到阿里云上购买了一个万网域名，也不是很贵。<br>进入阿里云网站，打开阿里云域名控制台，点击管理，然后点击域名解析。<br><img src="yuming.jpg" alt=""><br><img src="jiexi.jpg" alt=""></p><p>在下图中点击添加记录，添加解析：</p><blockquote><p>记录类型选择<code>CNAME</code><br>主机记录填 <code>www</code><br>解析线路选择 <code>默认</code><br>记录值填 <code>yourname.github.io</code><br>TTL 值为 <code>10</code> 分钟<br>再添加一个解析，记录类型 <code>A</code><br>主机记录填 <code>@</code><br>解析线路选择 <code>默认</code><br>记录值填你 GitHub 的 IP 地址 (在 cmd 中 ping：<code>ping yourname.github.io</code>)<br><img src="dns.jpg" alt=""></p></blockquote><p>在本地博客的 source 目录下新建一个 CNAME 文件(没有扩展名)，用记事本打开填入购买的域名地址:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.strongwong.top</span><br></pre></td></tr></table></figure></p><p>将博客重新发布一次：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d#generate 和 deploy 的组合命令</span><br></pre></td></tr></table></figure></p><p>此时，在浏览器中输入你的个人域名(<a href="https://www.strongwong.top/">www.strongwong.top</a>)，如果正常访问你的博客就说明，域名绑定成功，域名解析成功啦！！在这伟大的互联网时代，终于拥有了自己的网站啦！</p><h3 id="发表一篇文章"><a href="#发表一篇文章" class="headerlink" title="发表一篇文章"></a>发表一篇文章</h3><p>运行下面的命令，就会创建一个文章文件，在本地博客的 source_posts 文件夹下就会有一个新建的 markdown 文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章标题&quot;   # hexo n &quot;文章标题&quot; 这种简写也可以</span><br></pre></td></tr></table></figure></p><p>文章编辑好之后，推送到 GitHub 上我们在站点上就可以看到新的文章了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g  #生成 </span><br><span class="line">$ hexo d  #部署</span><br></pre></td></tr></table></figure></p><h2 id="安装-Next-主题及个性化"><a href="#安装-Next-主题及个性化" class="headerlink" title="安装 Next 主题及个性化"></a>安装 Next 主题及个性化</h2><p>Hexo 有非常多的主题可以选择，可以到官方主题库进行选择： <a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a><br>我这里选择了资料相对详细、丰富的 Next 主题，前往 Next 主题发布页面下载：<a href="https://github.com/iisnan/hexo-theme-next/releases/" target="_blank" rel="noopener">https://github.com/iisnan/hexo-theme-next/releases/</a><br>下载最新版本的 Next 主题包，解压缩，将文件名称改为 next，放置到博客根目录的 themes 目录下。<br>打开站点配置文件 <code>_config.yml</code>，找到 themes 字段，修改为 next。<br>到此，next 主题安装完成。</p><p>关于 next 主题的一些配置请查阅 next 主题官方文档：<a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">https://theme-next.iissnan.com/</a></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>花了两天时间把博客搭起来，还是挺开心的。博客使用 Hexo 搭建，主题使用 Next，评论系统使用 Valine ，文章浏览统计使用 LeanCloud ，网站访客数量使用不蒜子，另外还使用了 Google 统计，方便自己查看数据。<br>我会坚持在工作之余，写点技术分享，记录一下我的学习历程。我也不知道我会分享哪些东西，但是我想可能还是嵌入式软件方面可能会比较多一些吧，其他方面也可能会分享一些学习、工作、生活中的经历和经验吧！祝我未来，越来越好！</p><p>strongwong</p><p>2018.8.2</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用-Hexo-Github-Pages-搭建个人博客记录&quot;&gt;&lt;a href=&quot;#使用-Hexo-Github-Pages-搭建个人博客记录&quot; class=&quot;headerlink&quot; title=&quot;使用 Hexo+Github Pages 搭建个人博客记录&quot;&gt;&lt;/a&gt;使用 Hexo+Github Pages 搭建个人博客记录&lt;/h2&gt;&lt;p&gt;最近在学习的时候发现很多人都推荐说，要学会写作。很多大牛都会有自己的博客，或者微信公众号。不仅要学会学习，更要学会表达，而写作就是一个很好的方式。通过把自己学到的东西再次输出出来，才有价值，写作是一个人吸收知识，并增强记忆转化成自己东西的过程。很多人认为学校里出来了之后应该会很少写文字了，其实不然，在工作中经常会有各种各样的汇报和报告需要你去写。&lt;br&gt;如果你不经常去写一些文字，慢慢的也就生疏了，也就忘了该怎么通过书面方式更好的表达信息。比如我们领导让大家每周写一份周报，每到周五的时候大家总是在纠结，这周报该怎么写。还有做测试的时候要有测试方案，测试结果，测试报告（分析）都是要写文档的。跟文字打交道的时候还是很多的啊！所以啊，平时还得多写写！&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://www.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="blog" scheme="http://www.strongwong.top/tags/blog/"/>
    
      <category term="教程" scheme="http://www.strongwong.top/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>关于</title>
    <link href="http://www.strongwong.top/2018/07/28/%E5%85%B3%E4%BA%8E/"/>
    <id>http://www.strongwong.top/2018/07/28/关于/</id>
    <published>2018-07-28T10:59:50.000Z</published>
    <updated>2018-08-14T13:06:05.284Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎您访问我的网站，希望我分享的东西会对您有一些帮助！<br>祝您 Coding 愉快！</p><a id="more"></a><p>关于我，你什么也不需要知道，哈哈哈~~</p><p>关于本站，我有时间就写点东西喽，嘿嘿~~，开心就好！</p><p>关于分享什么，聊一点技术、谈一点理想、做一点实事不枉来世一遭！</p><p>达则兼济天下，穷则独善其身~~</p><p>做一个快乐的程序员！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎您访问我的网站，希望我分享的东西会对您有一些帮助！&lt;br&gt;祝您 Coding 愉快！&lt;/p&gt;
    
    </summary>
    
      <category term="Testing" scheme="http://www.strongwong.top/categories/Testing/"/>
    
    
      <category term="Testing" scheme="http://www.strongwong.top/tags/Testing/"/>
    
      <category term="Another Tag" scheme="http://www.strongwong.top/tags/Another-Tag/"/>
    
  </entry>
  
</feed>
