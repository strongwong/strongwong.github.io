<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>StrongWong</title>
  
  <subtitle>Embedded Software Engineer. Blogging about tech and life.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.strongwong.top/"/>
  <updated>2021-03-21T07:53:02.454Z</updated>
  <id>https://blog.strongwong.top/</id>
  
  <author>
    <name>strongwong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>什么是超低功耗基准测试——ULPMark Benchmark</title>
    <link href="https://blog.strongwong.top//posts/%E4%BB%80%E4%B9%88%E6%98%AF%E8%B6%85%E4%BD%8E%E5%8A%9F%E8%80%97%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94ULPMark-Benchmark.html"/>
    <id>https://blog.strongwong.top//posts/什么是超低功耗基准测试——ULPMark-Benchmark.html</id>
    <published>2021-03-20T07:13:46.000Z</published>
    <updated>2021-03-21T07:53:02.454Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>说起嵌入式领域的一些基准测试，大家可能更了解的是 Coremark Benchmark，也就是大家常说的 CPU (中央处理器)性能基准测试。ULPMark Benchmark 也和 Coremark 类似，ULPMark 即<code>“Ultra-Low Power Mark”</code> 超低功耗评分；二者都是由 EEMBC (嵌入式微处理器基准测试联盟)开发的一套用 C 语言编写的、易于移植的标准测试程序。略有不同的是 Coremark 是专门为测试处理器核心性能而设计的，而 ULPMark 是为了评价一款 MCU 的低功耗性能而设计的。在嵌入式领域中对一款芯片的评价一般来说都会非常关心两个指标，一个就是性能，另一个就是功耗。所以性能就看 Coremark 评分，低功耗就看 ULPMark 评分。Coremark 网上资料有很多，这里我就不做过多介绍了，那么低功耗性能测试为什么是 ULPMark 呢？</p><a id="more"></a><h2 id="0x01-为什么低功耗-MCU-测评采用-ULPMark"><a href="#0x01-为什么低功耗-MCU-测评采用-ULPMark" class="headerlink" title="0x01 为什么低功耗 MCU 测评采用 ULPMark"></a>0x01 为什么低功耗 MCU 测评采用 ULPMark</h2><p>首先，ULPMark 的测试代码与 Coremark 一样，几乎是一套与硬件无关的算法，是一套很标准化的测试，在不同的厂商的不同处理器上都可以运行，且使用相同的电流测试板记录电流数据，所以说大家几乎都是在相同的平台下进行测试的，这样在不同的处理器之间就具有可比性。<br>第二，所有人发布的测试评分提交给 EEMBC 组织时，都需要提供完整的操作流程说明，及测试代码包括测 bin 文件。所以在 EEMBC 官网上可以看到的评分(尤其是 EEMBC check 过，打勾的评分)，你拿对应被测件，按照发布的流程使用对应的 bin 文件，你几乎都可以复现出厂商在 EEMBC 上发布的评分。<br>其次，著名的低功耗芯片厂商几乎都在使用 ULPMark 作为测试标准，包括 Ambiq、Analog、TI、Renesas、ST、On Semi、NXP 等著名的嵌入式芯片厂商。<br>最后， EEMBC 也是一个很可靠的组织，他们致力于开发基准测试，他们发布过很多的基准测试，广泛应用于电信、网络、汽车电子、消费电子等领域。</p><p>那么 ULPMark 怎么测，都测些什么呢？</p><h2 id="0x02-ULPMark-测试有什么"><a href="#0x02-ULPMark-测试有什么" class="headerlink" title="0x02 ULPMark 测试有什么"></a>0x02 ULPMark 测试有什么</h2><p>ULPMark 测试目前有三个部分，分别是 ULPMark-CoreProfile、ULPMark-PeripheralProfile 和 ULPMark-CoreMark。</p><table><thead><tr><th align="center">ULPMark 变体</th><th align="center">测什么</th></tr></thead><tbody><tr><td align="center">ULPMark-CoreProfile</td><td align="center">核心在深度睡眠模式下真正的能量消耗</td></tr><tr><td align="center">ULPMark-PeripheralProfile</td><td align="center">普通外围设备的能量对深度睡眠的影响</td></tr><tr><td align="center">ULPMark-CoreMark</td><td align="center">活跃功耗，使用 CoreMark 作为工作负载</td></tr></tbody></table><p>但在实际的测试对比中，大家一般都比较关心 CoreProfile 和 PeripheralProfile 两项评分，大多数情况下大家都是对比的 CoreProfile 的评分，简写 <code>ULPMark-CP</code>。也就是在深度睡眠下整个芯片的能量消耗；因为在低功耗的应用场景下，该芯片设备可能是单电池供电，需要运行长达 10 年的时间，所以芯片设备绝大部分时间应该都是处在深度睡眠的模式，偶尔唤醒处理部分任务。</p><p>因此，ULPMark-CP 的测试就是类似于这样的一个场景设计的。ULPMark-CP 基准测试在长时间睡眠中运行，然后短暂唤醒以执行最少的处理，从而模仿一个节能的边缘节点。如下图：</p><p><a href="https://imgtu.com/i/64lMyq" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/03/20/64lMyq.png" alt="ULPMark-CP"></a></p><p>从上图中可以看到 ULPMark-CP 测试中，主要测量的就是在睡眠状态下的能量消耗，以及与活跃模式之间的切换，活跃模式时会运行一组工作负载，整个测试是以一秒为周期运行的，将工作负载与较长时间的不活动相结合交替运行，从而使用芯片的低功耗模式。</p><p>虽然基准测试的活跃部分仅运行了总运行时间的约 3％，但它要求通过使用 “保留 RAM” 在深度睡眠期间保存数据。由于很少有休眠的边缘节点在每个睡眠周期之后都清除它的 RAM，因此保留 RAM ，减少 RAM 数据重新刷新的成本，才能体现睡眠模式的真正能量消耗。</p><p>所以 ULPMark-CP 的评分基本上就可以看出一颗芯片的低功耗应用场景下的低功耗性能。</p><p>说了这么多，那 ULPMark-CP 都运行了些什么呢？ 要想知道那就要看测试代码了，但是 ULPMark 测试程序是需要授权的。不过 ULPMark 可以通过学校申请免费的学术授权，不过也只能是学术团队内部使用。</p><p><a href="https://imgtu.com/i/64850x" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/03/21/64850x.png" alt="License 申请"></a></p><p>所以代码不宜直接公开，这里就简述一下其功能。</p><p>休眠时当然就是休眠了，那么在 Active 阶段，主要执行了以下操作：</p><blockquote><p>会运行两次 Workload，每个 Workload 都包含以下几个工作：<br>· 快速切换GPIO指示端口20次<br>· 运行 24 次 16-bit 的滤波器运算，并根据每次的运算结果来设置状态机<br>· 使用状态机的输出作为输入来运行 bin to LCD 转换功能，即模拟 LCD 显示器<br>· 在基于上一步选择的字符串上运行子字符串搜索<br>· 在搜索到的字符串上运行字节拷贝<br>· 然后对上一步结果进行一个小的冒泡排序<br>· 最后，根据输入和先前的状态对字符串的位进行排列<br>· 执行完就进入休眠，等待下一次被唤醒，每一秒一次，无限重复</p></blockquote><h2 id="0x03-ULPMark-如何使用"><a href="#0x03-ULPMark-如何使用" class="headerlink" title="0x03 ULPMark 如何使用"></a>0x03 ULPMark 如何使用</h2><p>如果你申请到了 ULPMark 的学术授权版本，那么应该怎么移植使用它呢？</p><p>通常你获得的 ULPMark-CP 的代码目录应该是这样的，如图。也有可能我这个版本比较老，和你新申请的可能会略有不同。但我想大体上应该是差不多的。</p><p><a href="https://imgtu.com/i/648XjA" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/03/21/648XjA.png" alt="ULPMark-CP TOC"></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── benchmarks</span><br><span class="line">│   └── CoreProfile   <span class="comment"># ULPMark-CP 核心代码</span></span><br><span class="line">├── Platforms         <span class="comment"># 相对应的芯片平台及开发板相关配置</span></span><br><span class="line">│   └── ARM</span><br><span class="line">│       ├── Board</span><br><span class="line">│       └── Platform</span><br><span class="line">├── TES               <span class="comment"># RTC 中断唤醒时的调度</span></span><br><span class="line">└── ulpbench.c</span><br></pre></td></tr></table></figure><p>通常你只需要去修改 Platforms 下的文件， porting 到你的芯片上即可。一般情况下包括 系统时钟的设置，Low Power 模式的设置，相应 GPIO 引脚的设置，以及低功耗 RTC 的设置，当然还包括 RTC 中断的设置。将这些接口设置好基本上就完成了移植工作。然后将代码编译，烧写进芯片中。<br>软件代码准备好了之后，就是测量 ULPMark 测试代码在芯片上运行时产生的功耗了。那么如何测量呢？</p><h2 id="0x04-ULPMark-测量使用的板子"><a href="#0x04-ULPMark-测量使用的板子" class="headerlink" title="0x04 ULPMark 测量使用的板子"></a>0x04 ULPMark 测量使用的板子</h2><p>测量我们的芯片在低功耗模式下的实际功耗，EEMBC 和 ST 合作，开发了一套标准的能量消耗监测板 EMON (Energy Monitor LPM01A)，Energy Monitor 能量监测板如下图，这块板子的详细信息可以在 ST 官网获取到，这里也就不做过多介绍了，链接：<a href="https://www.st.com/en/evaluation-tools/x-nucleo-lpm01a.html" target="_blank" rel="noopener">LPM01A</a></p><p><a href="https://imgtu.com/i/64TiPx" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/03/21/64TiPx.png" alt="EMON LPM01A"></a></p><p><a href="https://imgtu.com/i/64TTyD" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/03/21/64TTyD.png" alt="LPM01A top layout"></a></p><p>通常情况下，我们的被测板可能是不符合 Arduino Uno 和 Arduino Nano 接口的，所以我们一般直接使用 CN14 的基本插接口。<br>被测板的所有供电都由 Energy Monitor 提供，将 EMON CN14 接口中的 Vout 和 GND 分别连接到 DUT (被测件) 的 VDD 和 GND 上即可。如下图所示。</p><p><a href="https://imgtu.com/i/64HDrF" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/03/21/64HDrF.png" alt="EMON connect DUT"></a></p><p>这里还需要在 ST 官网下载并安装相应的上位机软件，安装完成后，在 PC 上启动 STM32CubeMonitor-Power 软件，打开窗口后如下图所示。</p><p><a href="https://imgtu.com/i/64qc1x" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/03/21/64qc1x.png" alt="ST Mon Pwr"></a></p><p>点击 <code>TAKE CONTROL</code> 连接能量监测板，在窗口中设置好需要的采样率、时间、电流、电压等参数后，点击 <code>START ACQUISITION</code> 按钮，就可以看到 DUT 运行时对应的电流消耗。<br>点击 <code>ULP BENCH</code> 标签栏后，同样设置好需要的参数后，点击运行，就可以直接获得 ULPMark 评分，如下图，评分越高代表低功耗性能越好。</p><p><a href="https://imgtu.com/i/64O4fA" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/03/21/64O4fA.png" alt="ULP BENCH"></a></p><h2 id="0x05-ULPMark-的评分是如何计算的？"><a href="#0x05-ULPMark-的评分是如何计算的？" class="headerlink" title="0x05 ULPMark 的评分是如何计算的？"></a>0x05 ULPMark 的评分是如何计算的？</h2><p>那么 ULP Benchmark 的评分是如何计算的呢？如果我们手上没有 Energy Monitor 这个能量监测板，我们有没有其他办法计算出我们的低功耗性能？<br>ULP Benchmark 的计算公式是这样的：</p><p><a href="https://imgtu.com/i/64XWuV" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/03/21/64XWuV.jpg" alt="ULP Score"></a></p><p>就是 1000 除以，在 10 次 ULP 周期中取其中 5 次的能量均值，计算出得分，所以这个评分的单位就是 <code>uJ/s</code> 即 μ焦/秒。</p><p>所以根据这个公式，我们只要知道了我们芯片在单位时间内的能量消耗，就可以计算我们的低功耗评分。那么如何知道消耗的能量呢，那当然就是测量在单位时间内，额定电压下的电流消耗值，这样我们就可以计算了。虽然这样说起来简单，但是要想精确的测量在睡眠模式下的电流是不容易的，因为一般的低功耗芯片在深度睡眠模式下的电流消耗都是以 <code>nA</code> 计算的，一般的电流源无法做到这么精确。但方法总是有的。</p><p>假设我们在 3V 的电压下，测量到了相应的电流消耗，那么我们计算公式就可以这样写了。</p><p><a href="https://imgtu.com/i/64zZVK" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/03/21/64zZVK.jpg" alt="3V ULP Score"></a></p><p>当然，这个地方的电流还是粗略的，如果你还想在更加精确的分析，那么还应该去把 Active Current 和 Sleep Current 分开计算，然后在计算总的能量消耗。除此之外，不同编译器不同优化选项编译出的代码对于电流的消耗也存在一些差异。</p><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><p>好了，到这里关于 ULPMark 的介绍就基本完成了，相信通过本文的简单介绍，你应该对 ULPMark 有了一定的认识，让我们一起学习进步，欢迎大家和我交流！<br>贴一张目前 ULPMark-CP 目前的评分排行榜(前 25 名)</p><p><a href="https://imgtu.com/i/65iQxg" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/03/21/65iQxg.png" alt="65iQxg.png"></a></p><p>参考链接：<br><a href="https://www.eembc.org/ulpmark/" target="_blank" rel="noopener">https://www.eembc.org/ulpmark/</a><br><a href="https://www.eembc.org/ulpmark/scores.php" target="_blank" rel="noopener">https://www.eembc.org/ulpmark/scores.php</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;说起嵌入式领域的一些基准测试，大家可能更了解的是 Coremark Benchmark，也就是大家常说的 CPU (中央处理器)性能基准测试。ULPMark Benchmark 也和 Coremark 类似，ULPMark 即&lt;code&gt;“Ultra-Low Power Mark”&lt;/code&gt; 超低功耗评分；二者都是由 EEMBC (嵌入式微处理器基准测试联盟)开发的一套用 C 语言编写的、易于移植的标准测试程序。略有不同的是 Coremark 是专门为测试处理器核心性能而设计的，而 ULPMark 是为了评价一款 MCU 的低功耗性能而设计的。在嵌入式领域中对一款芯片的评价一般来说都会非常关心两个指标，一个就是性能，另一个就是功耗。所以性能就看 Coremark 评分，低功耗就看 ULPMark 评分。Coremark 网上资料有很多，这里我就不做过多介绍了，那么低功耗性能测试为什么是 ULPMark 呢？&lt;/p&gt;
    
    </summary>
    
      <category term="EEMBC" scheme="https://blog.strongwong.top/categories/EEMBC/"/>
    
      <category term="嵌入式" scheme="https://blog.strongwong.top/categories/EEMBC/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="ULPMark" scheme="https://blog.strongwong.top/tags/ULPMark/"/>
    
      <category term="行业标准" scheme="https://blog.strongwong.top/tags/%E8%A1%8C%E4%B8%9A%E6%A0%87%E5%87%86/"/>
    
      <category term="EEMBC" scheme="https://blog.strongwong.top/tags/EEMBC/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 RISC-V 软件开发生态之 IDE</title>
    <link href="https://blog.strongwong.top//posts/%E6%B5%85%E8%B0%88-RISC-V-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%94%9F%E6%80%81%E4%B9%8B-IDE.html"/>
    <id>https://blog.strongwong.top//posts/浅谈-RISC-V-软件开发生态之-IDE.html</id>
    <published>2021-02-12T13:56:38.000Z</published>
    <updated>2021-02-12T14:44:16.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>今天简单谈一些关于 RISC-V 开发的软件生态相关，主要是关于 RISC-V 的开发 IDE，就是集成开发环境。集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的软件开发服务套（组）。</p><p>目前来看，RISC-V 的硬件生态已经在蓬勃发展，而 RISC-V 相关的软件生态还在日趋完善的过程中，这里就来浅谈一点我的个人认识，如有不对，请批评指正。</p><p>目前，RISC-V 的软件开发 IDE ，主要是有以下几种解决方案。</p><a id="more"></a><h2 id="0x01-eclipse-——-著名开源-IDE"><a href="#0x01-eclipse-——-著名开源-IDE" class="headerlink" title="0x01 eclipse —— 著名开源 IDE"></a>0x01 eclipse —— 著名开源 IDE</h2><p>全开源，需要自行集成 RISC-V Toolchains + eclipse + OpenOCD 来搭建开发环境。</p><p>优点：</p><blockquote><ol><li>全开源，自由，免费 的 IDE</li><li>有众多公司厂商，组织，支持维护</li><li>可扩展的插件功能</li></ol></blockquote><p>缺点：</p><blockquote><ol><li>庞大臃肿，而且需要 java 运行环境。现在的版本在安装过程中会自动安装一个 jre 的运行环境。但是目前国内用户如果自行安装会下载很慢，使用代理相对快很多。如果不使用安装版本，也可以使用 zip 包解压的版本</li><li>集成众多插件，插件数量多了之后会拖慢系统</li><li>需要自行集成编译器及仿真器，打包发布给用户使用</li></ol></blockquote><h2 id="0x02-IAR-for-RISC-V——-老牌商业-IDE"><a href="#0x02-IAR-for-RISC-V——-老牌商业-IDE" class="headerlink" title="0x02 IAR for RISC-V—— 老牌商业 IDE"></a>0x02 IAR for RISC-V—— 老牌商业 IDE</h2><p>IAR for RISC-V 版本目前已经正在和部分芯片厂商进行合作适配、授权支持。主要包括：SiFive、Andes Technology、Nuclei（芯来科技）、CloudBEAR、Syntacore、C-SKY（平头哥）、GigaDevice（兆易创新）、MicroChip。</p><p>优点：</p><blockquote><ol><li>IAR 有非常优秀的编译器，针对代码的大小和速度有很好的优化；从 coremark 跑分排行榜上的 ARM 芯片来看，相对来说 IAR 的代码性能更高一些，当然各版本之间也会存在差异。但目前 IAR for RISC-V 的版本还未开放下载，暂时还没有相关测评。</li><li>有很优秀的 Trace 工具进行调试</li></ol></blockquote><p><a href="https://imgchr.com/i/yNVlh6" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/07/yNVlh6.png" alt="coremark"></a></p><p><a href="https://imgchr.com/i/yNEwSU" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/02/07/yNEwSU.png" alt="IAR for RISC-V"></a></p><p>缺点：</p><blockquote><ol><li>纯商业 IDE，使用需要授权，相对来说用户不易获得授权使用，尤其是新版本更新了 License 授权方案</li><li>RISC-V 芯片需要通过其 i-jet 来调试</li></ol></blockquote><h2 id="0x03-Embedded-Studio-for-RISC-V-——-SEGGER-老牌嵌入式开发工具供应商"><a href="#0x03-Embedded-Studio-for-RISC-V-——-SEGGER-老牌嵌入式开发工具供应商" class="headerlink" title="0x03 Embedded Studio for RISC-V —— SEGGER 老牌嵌入式开发工具供应商"></a>0x03 Embedded Studio for RISC-V —— SEGGER 老牌嵌入式开发工具供应商</h2><p>Embedded Studio 目前正在适配支持 Andes Technology、Nuclei（芯来科技）、GigaDevice（兆易创新） 、SiFive、Syntacore、Western Digital 的 RISC-V 芯片开发。</p><p>优点：</p><blockquote><ol><li>个人用户免费，支持全功能， 跨平台支持含 Windows, macOS 和 Linux 版本。</li><li>优于 IAR 的编辑器</li><li>启动速度快，大工程启动速度相对较快</li><li>调试工具丰富，因为是传统嵌入式工具链厂商，有 J-link 系列工具支持</li><li>支持 RISC-V 内核</li></ol></blockquote><p>缺点：</p><blockquote><ol><li>目前只支持 J-link 进行 debug</li><li>设置选项较为烦锁</li></ol></blockquote><h2 id="0x04-VS-code-——-开发新秀"><a href="#0x04-VS-code-——-开发新秀" class="headerlink" title="0x04 VS code —— 开发新秀"></a>0x04 VS code —— 开发新秀</h2><p>VS code 在我看来就是一款优秀的开源跨平台代码编辑器，但由于其内置了标准 Debugger Adaptor Protocol，经过各路大神，一些组织，部分企业公司结合各自的需求，开发了各具特色的 Debug 插件。于是乎 VS Code 俨然变成了一款极具竞争力的 IDE，成功跨界抢各类 IDE 的市场，因为其灵活小巧，迅速成为了各路开发者的新宠。但也由于其开发调试功能不是本身内置，也给不同的开发需求带来了一定的门槛，需要开发者自行进行一些开发环境配置，对于新手小白不是特别友好。但还是有很多愿意折腾的大佬。</p><p>优点：</p><blockquote><ol><li>软件全开源免费，体积小，启动快，界面新颖，更新快，新兴的优秀编辑器代表</li><li>开源众多的插件</li><li>可跨平台使用</li></ol></blockquote><p>缺点：</p><blockquote><ol><li>其本身就是一个，优秀的开源编辑器，如果要进行 MCU 开发，需要开发插件，或者使用相应的工具链来自行配置，对用户不是很友好</li><li>目前没有支持 RISC-V 的通用插件</li><li>通过体验 cortex debug 、esp-idf、platformIO 等开发插件，体验也并不是很友好；但也是跟插件开发者的能力、需求和习惯相关</li><li>Cortex Debug 插件，代码在 bootrom 里运行时，反汇编窗口无法显示当前的 bootrom 代码，除非手动反汇编。它执行显示当前 elf 范围内的文件，regs 窗口没法设置显示格式；这些可能是 Cortex Debug 插件的局限。</li></ol></blockquote><h2 id="0x05-KendryteIDE-——-基于-VS-code-包装的-IDE-方案"><a href="#0x05-KendryteIDE-——-基于-VS-code-包装的-IDE-方案" class="headerlink" title="0x05 KendryteIDE —— 基于 VS code 包装的 IDE 方案"></a>0x05 KendryteIDE —— 基于 VS code 包装的 IDE 方案</h2><p>KendryteIDE 是嘉楠勘智，基于开源的 VS code 编辑器，自己定制的 RISC-V 芯片 IDE 解决方案，整体风格继承 VS code。</p><p>优点：</p><blockquote><ol><li>基于开源 VS code，二次开发，完全自主可控，轻量级</li><li>继承了 VS code 的优秀编辑器，及其优点</li></ol></blockquote><p>缺点：</p><blockquote><ol><li>目前不可以直接使用其 IDE，来进行其他的 RISC-V 芯片调试</li><li>需要重新适配自己的 MCU 来做开发，开发工作量和时间周期是不确定的</li><li>定制程度取决于开发人员的能力</li></ol></blockquote><h1 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h1><p>可能正是由于 RISC-V  硬件的自由更改的属性，各家厂商都可以有自己独特的 RISC-V 架构，所以这也导致了 RISC-V 的编译工具链会有各厂商自己定制，不能像 ARM 那样各个厂商都使用 MDK，只需要做一个 SDK or Pack 包集成到 MDK 中即可。于是乎，我们就看到了市面上的各大 RISC-V 芯片或 IP 公司，都在做自己的 IDE 用自己的工具链。<br>那么为什么各家都在做各自的工具链呢，<strong>我认为还是没有形成类似于 ARM 的 CMSIS 这样的嵌入式软件接口标准，来统一管理底层软件接口，于是乎就变成了各自玩各自的，没有统一</strong>。这也是导致 RISC-V 软件生态薄弱，碎片化的一个重要因素。</p><p>但我相信，<strong>未来应该也会出现类似于 CMSIS 的标准，来完成一统大业的工作</strong>。</p><p>于是乎现在就是八仙过海，各显神通的局面。但大部分的 RISC-V 厂商的开发 IDE，还是基于开源的 <strong>eclipse + gcc toolchains + openocd</strong> 的方案来开发和调试芯片产品，相对来说这可能是比较快和相对成熟的方案。</p><p>当然，我个人猜测，像 IAR、SEGGER 这种纯商业的第三方 IDE 、嵌入式工具供应商，也希望能够适配市面上的各型号 MCU 开发，稳固自己的工具链生态，所以 SEGGER 率先推出了支持 RISC-V 开发的 IDE，但可能也正是由于 RISC-V 的灵活性，致使全面支持 RISC-V 架构的 IAR 版本还迟迟没有正式推出。</p><p>个人认为，如果一个 RISC-V 芯片厂商需要尽快推出自己的 IDE ，那么可能使用 eclipse + gcc toolchains + openocd 的方案会比较快；如果时间不急的话，在目前商业 IDE 还不成熟的情况下，可能自行研发是比较好的选择，对其自己的芯片开发的适配程度也会更高；那么自行研发也有两个方向，一个就是基于 VS code 编辑器做二次开发，参考嘉楠勘智方案；另一个就是从头开发一款自己的 IDE，但由于自己定制调试器也是一个时间周期比较长的过程，所以大概率底层还是 gcc + openocd。当然了，这里也还有未列出的阿里平头哥发布的 <code>剑池 CDK</code> 开发环境，他们有中天微时期的基础，所以他们就是自己完全定制的 IDE，并且有自己的调试器 ck-link，是解决方案比较成熟的厂商了。</p><table><thead><tr><th></th><th>eclipse</th><th>VS code</th><th>IAR</th><th>Embedded Studio</th></tr></thead><tbody><tr><td>版权</td><td>开源，免费</td><td>开源，免费</td><td>商业授权</td><td>个人用户免费，合作厂商用户免费</td></tr><tr><td>是否支持 RISC-V</td><td>编辑器本身不支持，可定制</td><td>编辑器本身不支持，可定制</td><td>支持，但需要厂商和 IAR 合作开发</td><td>支持，需要厂商合作开发</td></tr><tr><td>是否插件拓展</td><td>有插件</td><td>有插件，没有 RISC-V 通用插件，需要厂商 or 第三方 or 开源社区自定义</td><td>不支持</td><td>不支持</td></tr><tr><td>是否可调试</td><td>使用开源 openocd 调试</td><td>使用开源 openocd 调试</td><td>支持 RISC-V 的版本需要使用 IAR 官方 I-jet 仿真器</td><td>支持 RISC-V，但仅支持 SEGGER 的 J-link 仿真器</td></tr><tr><td>快捷键调试</td><td>支持</td><td>各种调试插件使用方式不一致</td><td>支持</td><td>支持</td></tr><tr><td>汇编 Debug</td><td>支持</td><td>需要自定义插件支持</td><td>支持</td><td>支持</td></tr><tr><td>Mem 访问、读写</td><td>支持</td><td>需要自定义插件支持</td><td>支持</td><td>支持</td></tr><tr><td>寄存器访问、读写</td><td>支持</td><td>需要自定义插件支持</td><td>支持</td><td>支持</td></tr><tr><td>窗口中变量、数据的格式是否可更改</td><td>支持</td><td>不确定，可能需要自定义插件支持</td><td>支持</td><td>支持</td></tr><tr><td>用户界面</td><td>新版本有所改进，有颜色主题更改</td><td>新潮，有较多颜色主题，代码配色友好</td><td>新版本有有限主题更改</td><td>有限更改</td></tr><tr><td>……</td><td>……</td><td>……</td><td>……</td><td>……</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;今天简单谈一些关于 RISC-V 开发的软件生态相关，主要是关于 RISC-V 的开发 IDE，就是集成开发环境。集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的软件开发服务套（组）。&lt;/p&gt;
&lt;p&gt;目前来看，RISC-V 的硬件生态已经在蓬勃发展，而 RISC-V 相关的软件生态还在日趋完善的过程中，这里就来浅谈一点我的个人认识，如有不对，请批评指正。&lt;/p&gt;
&lt;p&gt;目前，RISC-V 的软件开发 IDE ，主要是有以下几种解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="RISC-V" scheme="https://blog.strongwong.top/categories/RISC-V/"/>
    
      <category term="嵌入式" scheme="https://blog.strongwong.top/categories/RISC-V/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="RISC-V" scheme="https://blog.strongwong.top/tags/RISC-V/"/>
    
      <category term="IDE" scheme="https://blog.strongwong.top/tags/IDE/"/>
    
      <category term="软件生态" scheme="https://blog.strongwong.top/tags/%E8%BD%AF%E4%BB%B6%E7%94%9F%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>简单了解一下小米 vela</title>
    <link href="https://blog.strongwong.top//posts/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%E5%B0%8F%E7%B1%B3-vela.html"/>
    <id>https://blog.strongwong.top//posts/简单了解一下小米-vela.html</id>
    <published>2021-01-12T07:12:11.000Z</published>
    <updated>2021-01-14T14:01:51.429Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-小米-vela"><a href="#0x00-小米-vela" class="headerlink" title="0x00 小米 vela"></a>0x00 小米 vela</h2><p>前段时间小米推出了 vela 物联网平台，vela 就是基于 NuttX 打造的物联网开发平台。</p><a id="more"></a><p>小米对 NuttX 的评价：</p><blockquote><ol><li>NuttX 对 POSIX 标准有原生兼容：NuttX 是可商用化 RTOS 中唯一一个对 POSIX API 有原生支持的实时操作系统，所以很多 Linux 社区的开源软件可以很方便的移植到 NuttX 上，这样可以极大的简化开源软件移植，方便代码复用，降低学习曲线，其它 RTOS 需要适配层把 POSIX API 转成内部 API，而且通常只兼容一小部分的 POSIX 接口。</li><li>完成度高：NuttX 集成了文件系统、网络协议栈、图形库和驱动框架，减少开发成本。</li><li>模块化设计：所有组件甚至组件内部特性，都可以通过配置 Kconfig 来调整或关闭，可按需对系统进行裁剪，适用于不同产品形态。</li><li>代码精简：所有组件都是从头编码，专门对代码和数据做了优化设计。</li><li>轻量级：虽然 NuttX 实现了传统操作系统的所有功能，但是最终生成的代码尺寸还是可以很小（最小配置不到 32KB，最大配置不超过 256KB）。</li><li>和 Linux 系统的兼容性：因为 NuttX 整体设计、代码组织，编译过程和 Linux 非常接近，将会极大地降低 Android/Linux 开发者的迁移成本。</li><li>活跃开放的社区：很多厂商（比如小米、Sony，乐鑫、NXP 等）和开源爱好者都在积极回馈社区。</li></ol></blockquote><p>不难看出小米对 NuttX 的评价很不错。所以我也来赶紧学习一波，做了一个简单的了解，作为自己的技术储备。</p><h2 id="0x01-安装配置"><a href="#0x01-安装配置" class="headerlink" title="0x01 安装配置"></a>0x01 安装配置</h2><p>环境： Ubuntu20.04 系统、ARM GUN 2019q4 版本 gcc、openocd 0.10 版本</p><p>安装  ARM gcc 工具链，如果开发板是用其他的架构 cpu 请去安装其他架构下相应的版本工具链，我这里是 ARM 的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /opt/gcc</span><br><span class="line">sudo chgrp -R users /opt/gcc</span><br><span class="line"><span class="built_in">cd</span> /opt/gcc</span><br><span class="line">wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/9-2019q4/gcc-arm-none-eabi-9-2019-q4-major-x86_64-linux.tar.bz2</span><br><span class="line">tar xf gcc-arm-none-eabi-9-2019-q4-major-x86_64-linux.tar.bz2</span><br></pre></td></tr></table></figure><p>配置工具链到系统环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"export PATH=/opt/gcc/gcc-arm-none-eabi-9-2019-q4-major/bin:<span class="variable">$PATH</span>"</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><p>下载 nuttx 、apps、tools 三个 nuttx 系统源码及构建工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir nuttxWS</span><br><span class="line"><span class="built_in">cd</span> nuttxWS</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/apache/incubator-nuttx.git nuttx</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/apache/incubator-nuttx-apps apps</span><br><span class="line">git <span class="built_in">clone</span> https://bitbucket.org/nuttx/tools.git tools</span><br></pre></td></tr></table></figure><p>安装 kconfig ，构建工具。注意：低于 ubuntu20 版本的安装要少许麻烦一些</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt install kconfig-frontends</span><br></pre></td></tr></table></figure><p>查看 nuttx 支持的板卡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> nuttxWS</span><br><span class="line">$ ./tools/configure.sh -L | less</span><br></pre></td></tr></table></figure><p>选择相应的板卡及其支持的应用程序进行配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> nuttxWS</span><br><span class="line">$ ./tools/configure.sh -l &lt;board-name&gt;:&lt;config-dir&gt;</span><br><span class="line"><span class="comment"># for instance:</span></span><br><span class="line">$ ./tools/configure.sh -l stm32f103-minimum:nsh</span><br></pre></td></tr></table></figure><p>运行 menuconfig 进行自定义配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make menuconfig</span><br></pre></td></tr></table></figure><h2 id="0x02-编译运行"><a href="#0x02-编译运行" class="headerlink" title="0x02 编译运行"></a>0x02 编译运行</h2><p>配置完成后编译 NuttX 系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make -j$(nproc)</span><br></pre></td></tr></table></figure><p>编译完成后会在 nuttx 目录下生成一个 nuttx.bin 文件，接下来把他下载到板子是运行<br>首先安装 openocd </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install openocd</span><br></pre></td></tr></table></figure><p>如果使用 apt 安装的 openocd 版本过低，就自己从源码安装一下 openocd 即可</p><p>Openocd 安装好之后，正确连接板卡和电脑，下载程序。<br>烧写程序之前可以先打开串口，当系统正常运行起来之后可以在串口中观察到 <code>nsh&gt;</code> 命令行。注意，我这边是 stlink 的虚拟串口所以是 ACM0，你的如果不是虚拟串口，可能是 USB0 之类的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  picocom -b 115200 /dev/ttyACM0</span><br></pre></td></tr></table></figure><p>下载程序需要注意正确选择你使用的下载器和板卡对应的 .cfg 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> nuttxWS</span><br><span class="line">$ openocd -f interface/stlink-v2-1.cfg -f target/stm32f1x.cfg -c <span class="string">'init'</span>  -c <span class="string">'program nuttx.bin 0x08000000 verify reset'</span> -c <span class="string">'shutdown'</span></span><br></pre></td></tr></table></figure><p>如果程序正常运行了就可以在中观察到信息，输入 help 命令就可以查看支持的命令列表。如果没有看到信息，reset 一下板子。</p><p>修改配置编译一个 blinking 控制 led 的程序</p><p>回到 nuttx 目录下清除原来的配置，重新生成，在 menuconfig 中检查 led 相关配置是否设置成功。在 NSH library 中使能 printf 功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> nuttxWS/nuttx</span><br><span class="line">$ make distclean</span><br><span class="line">$ ./tools/configure.sh -l stm32f103-minimum:userled</span><br><span class="line">$ make menuconfig</span><br><span class="line">$ make -j$(nproc)</span><br></pre></td></tr></table></figure><p>编译完成后下载到板卡上，打开串口，按一下 reset 连接上板子就可以在串口看到输出的信息了。直接执行 leds ，可以看到板卡上的 led 已经正常运行起来了。</p><p>今天就先点个灯了解一下，其他的内容，等我翻翻 NuttX 源码在学习一下。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-小米-vela&quot;&gt;&lt;a href=&quot;#0x00-小米-vela&quot; class=&quot;headerlink&quot; title=&quot;0x00 小米 vela&quot;&gt;&lt;/a&gt;0x00 小米 vela&lt;/h2&gt;&lt;p&gt;前段时间小米推出了 vela 物联网平台，vela 就是基于 NuttX 打造的物联网开发平台。&lt;/p&gt;
    
    </summary>
    
      <category term="嵌入式" scheme="https://blog.strongwong.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="NuttX" scheme="https://blog.strongwong.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/NuttX/"/>
    
    
      <category term="vela" scheme="https://blog.strongwong.top/tags/vela/"/>
    
      <category term="NuttX" scheme="https://blog.strongwong.top/tags/NuttX/"/>
    
      <category term="嵌入式" scheme="https://blog.strongwong.top/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>RISC-V 指令集特权架构</title>
    <link href="https://blog.strongwong.top//posts/RISC-V-%E6%8C%87%E4%BB%A4%E9%9B%86%E7%89%B9%E6%9D%83%E6%9E%B6%E6%9E%84.html"/>
    <id>https://blog.strongwong.top//posts/RISC-V-指令集特权架构.html</id>
    <published>2021-01-11T12:09:01.000Z</published>
    <updated>2021-02-02T14:52:35.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RISC-V-指令集手册"><a href="#RISC-V-指令集手册" class="headerlink" title="RISC-V 指令集手册"></a>RISC-V 指令集手册</h1><h3 id="第二卷：特权架构"><a href="#第二卷：特权架构" class="headerlink" title="第二卷：特权架构"></a>第二卷：特权架构</h3><p><strong>文档版本 20190608</strong></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文档介绍了 RISC-V 特权架构。此版本为 20190608-Priv-MSU-Ratified，表示已批准的 machine 和 supervisor 模块的指令集。</p><p>本文档包含以下版本的RISC-V ISA模块：</p><table><thead><tr><th align="center">Module</th><th align="center">Version</th><th align="center">Status</th></tr></thead><tbody><tr><td align="center">Machine ISA</td><td align="center">1.11</td><td align="center">Ratified</td></tr><tr><td align="center">Supervisor ISA</td><td align="center">1.11</td><td align="center">Ratified</td></tr></tbody></table><a id="more"></a><p>本版本文档的变更包括：</p><ul><li>将 Machine 和 Supervisor 规范更改到 <strong>Ratified</strong> 状态。</li><li>改进说明和注释。</li><li>增加了有关虚拟机监控程序扩展的草案。</li><li>规定哪些中断源保留供标准使用。</li><li>分配了一些同步异常源供自定义使用。</li><li>规定了同步异常的优先级顺序。</li><li>添加了规范，即如果支持 A 扩展，则 xRET 指令可以清除 LR 保留，但不是必须的。</li><li>无论 SUM 如何设置，虚拟内存系统不再允许超级用户（Supervisor）模式执行用户页面中的指令。</li><li>强烈建议软件在全局范围内分配 ASID（地址空间 ID），以便将来的扩展可以全局化ASID，以提高性能和硬件灵活性。</li><li>SFENCE.VMA 语义已阐明。</li><li>将 mstatus.MPP 字段设置为 <strong>WARL</strong>，而不是 <strong>WLRL</strong>。</li><li>将未使用的 xip 字段设置为 <strong>WPRI</strong>，而不是 <strong>WIRI</strong>。</li><li>将未使用的 misa 字段设置为 <strong>WLRL</strong>，而不是 <strong>WIRI</strong>。</li><li>将未使用的 pmpaddr 和 pmpcfg 字段设置为 <strong>WARL</strong>，而不是 <strong>WIRI</strong>。</li><li>要求系统中的所有 harts 都采用相同的 PTE-update 格式。</li><li>纠正了编辑错误，该错误错误描述了在发生异常时写入 mstatus.xIE 的机制。</li><li>描述了用于仿真未对齐 AMOs 的格式。</li><li>在可变 IALIGN 的系统中规定了 misa 和 xepc 寄存器的行为。</li><li>规定了向 misa 寄存器中写入自相矛盾的值的行为。</li><li>定义了 mcountinhibit CSR 寄存器，该寄存器可停止性能计数器的递增以减少功耗。</li><li>规定 PMP 区域的语义大于四个字节。</li><li>规定跨 XLEN 修改 CSRs 的内容。</li><li>将 PLIC 章节移至其自己的文档中。</li></ul><To do><p><strong>译者注：</strong></p><blockquote><p>这里不是完整版指令集的翻译，只是我个人在学习 RISC-V 实现过程中目前了解到的部分内容。主要关注机器模式（M-mode）的实现部分内容。不完整的地方可查阅 RISC-V 基金会官方文档。</p><p>在试译过程中为了便于理解将 RISC-V 架构中有关于<strong>异常</strong> (exception)、<strong>陷阱</strong> (trap) 和<strong>中断</strong> (interrupt)的描述做了一些简化。在 RISC-V 架构中，<strong>异常</strong>指在运行时发生的不寻常情况(包括地址异常、非法指令异常等)，且同步处理；<strong>陷阱</strong>指正常运行的 hart 由另一个hart 条件引起的异常(包括系统 timer、ecall 和 ebreak 等)，且同步的提升到特权模式；<strong>中断</strong>指由外部事件引发的异常(包括但不限于 TIM、GPIO 等外设引起的异常)，且异步地提升到特权模式。但相较于 cpu 在正常运行时的状态来说，这三类情况从广义上来说都属于异常。所以本文中一般情况下所指的异常是比较广义上的异常，必要的地方会有区分。</p></blockquote><h1 id="第一章-介绍"><a href="#第一章-介绍" class="headerlink" title="第一章 介绍"></a>第一章 介绍</h1><p>本文档介绍了 RISC-V 特权体系结构，它涵盖了非特权 ISA 以外的 RISCV 系统的所有方面，包括特权指令以及运行操作系统和连接外部设备所需的其他功能。</p><h2 id="1-1-RISC-V-特权软件堆栈术语"><a href="#1-1-RISC-V-特权软件堆栈术语" class="headerlink" title="1.1 RISC-V 特权软件堆栈术语"></a>1.1 RISC-V 特权软件堆栈术语</h2><p>本节描述了我们用来描述 RISC-V 的各种可能的特权软件栈组件的术语。</p><p>下图显示了 RISC-V 架构可以支持的一些可能的软件栈。左侧显示了一个简单的系统，该系统仅支持在应用程序执行环境（AEE）上运行的单个应用程序。该应用程序以一个特定的应用程序二进制接口（ABI）来编码来运行。ABI 包括受支持的用户级 ISA+ 和一组与 AEE 进行交互的 ABI 调用。ABI 在应用程序中隐藏了 AEE 的详细信息，以便在实现 AEE 时具有更大的灵活性。相同的 ABI 可以在多个不同的主机 OS 上原生实现，也可以支持在具有不同本机 ISA 的机器上通过用户模式（U-mode）模拟环境来运行。</p><img src="https://s3.ax1x.com/2021/01/03/spxovQ.png" alt="图片1.1" style="zoom:50%;" /><p><em>图1.1 支持各种特权执行形式的不同实现栈</em></p><p>中间配置显示了可以支持多个应用程序的多程序执行的常规操作系统（OS）。每个应用程序通过 ABI 与提供 AEE 的 OS 进行通信。就像应用程序接口通过 ABI 与 AEE 进行通信一样，RISC-V 操作系统也通过管理员二进制接口（SBI）与管理员执行环境（SEE）进行通信。一个 SBI 包括用户级和管理员级 ISA 以及一组 SBI 函数调用。在所有 SEE 实现中使用单个 SBI 可使单个 OS 二进制镜像在任何 SEE 上运行。SEE 可以是低端硬件平台中的简单引导加载程序和 BIOS 风格的 IO 系统，也可以是高端服务器中由管理程序提供的虚拟机，或者在体系结构模拟中可以是主机操作系统上的单薄转换层环境。</p><hr><p><strong>注</strong>: <em>大多数管理员级别的 ISA 定义并未将 SBI 与执行环境和 / 或硬件平台分开，从而使虚拟化变得复杂，并带来了新的硬件平台。</em></p><p>最右边的配置显示了一个虚拟机监视器配置，其中单个虚拟机管理程序支持多个多任务 OS。每个 OS 都通过 SBI 与提供 SEE 的虚拟机管理程序进行通信。虚拟机管理程序使用虚拟层二进制接口（HBI）与虚拟层执行环境（HEE）通信，以将虚拟机管理程序与硬件平台的详细信息隔离开。</p><hr><p><strong>注</strong>: <em>ABI，SBI 和 HBI 仍在开发中，但是我们现在优先考虑对 Type-2 虚拟机管理程序的支持，其中 SBI 由 S 模式 OS 递归地提供。</em></p><p>RISC-V ISA 的硬件实现通常还需要特权 ISA 以外的其他特性来支持各种执行环境（AEE，SEE或HEE）。</p><h2 id="1-2-特权等级"><a href="#1-2-特权等级" class="headerlink" title="1.2 特权等级"></a>1.2 特权等级</h2><p>任何时候，RISC-V 硬件线程（hart）都以某种特权级别运行，该特权级别被编码为一个或多个 CSR（控制和状态寄存器）中的一种模式。 当前定义了三个 RISC-V 特权级别，如表1.1所示。</p><table><thead><tr><th align="center">Level</th><th align="center">Encoding</th><th align="center">Name</th><th align="center">Abbreviation</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">00</td><td align="center">User/Application</td><td align="center">U</td></tr><tr><td align="center">1</td><td align="center">01</td><td align="center">Supervisor</td><td align="center">S</td></tr><tr><td align="center">2</td><td align="center">10</td><td align="center"><em>Reserved(Hypervisor)</em></td><td align="center">(H)</td></tr><tr><td align="center">3</td><td align="center">11</td><td align="center">Machine</td><td align="center">M</td></tr></tbody></table><p><em>表1.1 RISC-V 特权级别</em></p><p>特权级别用于在软件堆栈的不同组件之间提供保护，并且尝试执行当前特权模式不允许的操作将导致引发异常。 这些异常通常会导致进入底层执行环境的陷阱。</p><hr><p><strong>注</strong>: <em>在描述中，我们尝试将编写代码的特权级别与运行代码的特权模式区分开，尽管两者通常是捆绑在一起的。例如，管理员级别的操作系统可以在具有三种特权模式的系统上以管理员模式运行，但是也可以在具有两种或多种特权模式的系统上的经典虚拟机监视器下以运行用户模式。在这两种情况下，都可以使用相同的管理员级别的操作系统二进制代码，将其编码为管理员级别的 SBI，因此期望能够使用管理员级别的特权指令和 CSR。在用户模式下运行访客 OS 时，所有具有管理员权限的操作都将被以较高特权级别运行的 SEE 捕获并模拟。</em></p><p>机器级别具有最高特权，并且是 RISC-V 硬件平台的唯一强制特权级别。在机器模式（M-mode）下运行的代码通常天生就受信任，因为它具有对机器实现的低级访问权限。M-mode 可以用来管理 RISC-V 上的安全执行环境。用户模式（U-mode）和超级用户模式（S-mode）分别用于常规应用程序和操作系统。</p><p>每个特权级别都有一组核心的特权 ISA 扩展，以及可选的扩展和变体。 例如，机器模式支持用于内存保护的可选标准扩展。</p><p>实现可以提供 1 到 3 种特权模式，以权衡减少隔离度以降低实现成本，如表1.2所示。</p><table><thead><tr><th align="center">Number of levels</th><th align="left">Supported Modes</th><th align="left">Intended Usage</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">M</td><td align="left">Simple embedded systems</td></tr><tr><td align="center">2</td><td align="left">M，U</td><td align="left">Secure embedded systems</td></tr><tr><td align="center">3</td><td align="left">M，S，U</td><td align="left">Systems running Unix-like operating systems</td></tr></tbody></table><p><em>表1.2 支持的特权模式组合。</em></p><p>所有硬件实现都必须提供 M-mode，因为这是唯一可以不受限制地访问整个计算机的模式。 最简单的 RISC-V 实现可能仅提供 M-mode，尽管这将无法防止错误或恶意的应用程序代码。</p><p><strong>注</strong>: <em>可选的 PMP功能的锁定特性，即使只实现 M-mode，可以提供一些有限的保护。</em></p><p>许多 RISC-V 实现也将至少支持用户模式（U-mode），以保护系统的其余部分免受应用程序代码的侵害。 可以添加管理员模式（S-mode），以在管理员级别的操作系统和 SEE 之间提供隔离。</p><p>Hart 通常以 U-mode 运行应用程序代码，直到某些异常（例如，管理员调用或计时器中断）强制将开关切换到异常处理程序，该异常处理程序通常以更高的特权模式运行。然后，hart 将执行异常处理程序，应用程序最终将在 U-mode 中原异常指令处或之后恢复执行。提高特权级别的 Traps 称为 <strong><em>vertical traps</em></strong>，而保持相同特权级别的 Traps 称为 <strong><em>horizontal traps</em></strong>。RISC-V 特权体系结构可将异常灵活路由到不同的特权层。</p><hr><p><strong>注</strong>: <em>horizontal traps 可以实现为 vertical traps，在较低特权模式下将控制权返回给 horizontal traps 处理程序。</em></p><h2 id="1-3-调试模式"><a href="#1-3-调试模式" class="headerlink" title="1.3 调试模式"></a>1.3 调试模式</h2><p>一个实现还可以包括一个调试模式，以支持片外调试和/或生产测试。调试模式（D-mode）可以被认为是一种额外的特权模式，其访问权限比 M-mode 更大。单独的调试规范建议描述了RISC-V hart 在调试模式下的操作。调试模式保留一些只能在 D-mode 下访问的 CSR 地址，并且还可能保留平台上物理地址空间的某些部分。</p><h1 id="第二章-控制和状态寄存器（CSRs"><a href="#第二章-控制和状态寄存器（CSRs" class="headerlink" title="第二章 控制和状态寄存器（CSRs)"></a>第二章 控制和状态寄存器（CSRs)</h1><p>SYSTEM 主操作码用于编码 RISC-V ISA 中的所有特权指令。这些可分为两大类：控制和状态寄存器（CSRs）的原子操作（read-modify-write），以及所有其他特权指令。除了本手册第一卷中描述的用户级别状态外，一个实现还可以包含其他 CSRs，这些特权可以通过使用用户级别手册中描述的 CSR 指令的某些特权级别子集来访问。在本章中，我们规划出 CSR 地址空间。以下各章节根据特权级别描述了每个 CSRs 的功能，以及通常与特定特权级别紧密相关的其他特权指令。请注意，尽管 CSRs 和指令与一个特权级别相关联，但是它们也可以在所有更高的特权级别下访问。</p><h2 id="2-1-CSR-地址映射规则"><a href="#2-1-CSR-地址映射规则" class="headerlink" title="2.1 CSR 地址映射规则"></a>2.1 CSR 地址映射规则</h2><p>标准的 RISC-V ISA 留出 12 位编码空间（csr [11:0]），最多可存储 4096 个 CSRs。</p><p>按照惯例，CSR 地址的高 4 位（csr [11:8]）用于根据权限级别对 CSRs 的读写可访问性进行编码，如表 2.1 所示。前两位（csr [11:10]）指示寄存器是读/写（00、01 or 10）还是只读（11）。接下来的两位（csr [9:8]）编码可以访问 CSR 的最低特权级别。</p><hr><p><strong>注</strong>: <em>CSR 地址约定使用 CSR 地址的高位来编码默认访问权限。这简化了硬件中的错误检查，并提供了更大的 CSR 空间，但确实限制了 CSR 到地址空间的映射。实现可能允许更高级别的特权捕获较低级别特权允许的 CSR 访问，以允许拦截这些访问。这个变化应该对特权较少的软件是明晰的。</em></p><p>尝试访问不存在的 CSR 会引发一个非法指令异常。尝试在没有适当特权级别的情况下访问 CSR 或写入只读寄存器也会引发非法指令异常。读/写寄存器可能还包含一些只读位，在这种情况下，对只读位的写操作将被忽略。</p><p>表 2.1 还列出了在标准用途和自定义用途之间分配CSR地址的约定。保留用于自定义用途的 CSR 地址不会在以后的标准扩展中重新定义。</p><p>机器模式标准读写 CSRs 0x7A0–0x7BF 保留供调试系统使用。在这些 CSRs 中，机器模式可访问 0x7A0-0x7AF，而调试模式仅可见 0x7B0-0x7BF。实现应在机器模式访问后一组寄存器时引发非法指令异常。</p><hr><p><strong>注</strong>: <em>有效的虚拟化要求在虚拟化环境中尽可能多地在本机上运行指令，而任何特权访问都会 trap到虚拟机监视器[1]。如果将具有较低特权级别的只读 CSR 设为具有较高特权级别的读写，则它们将被映射到单独的 CSR 地址中。这样可以避免在允许低特权访问的同时引发 trap，同时仍然导致对非法访问的 trap。 当前，计数器是仅有的影子 CSRs。</em></p><h2 id="2-2-CSR-寄存器清单"><a href="#2-2-CSR-寄存器清单" class="headerlink" title="2.2 CSR 寄存器清单"></a>2.2 CSR 寄存器清单</h2><p>表 2.2–2.5 列出的 CSRs 寄存器是当前已分配了 CSR 地址的。timers，counters 和浮点 CSRs 是标准的用户级 CSRs，以及由 N 扩展添加的其他用户 trap 寄存器。其他寄存器由特权代码使用，如以下各章节所述。 请注意，并非所有实现都需要所有寄存器。</p><table border=0 cellpadding=0 cellspacing=0 width=704 style='border-collapse: collapse;table-layout:fixed;width:477pt'> <col width=72 span=3 style='width:62pt'> <col width=180 style='mso-width-source:userset;mso-width-alt:3584;width:96pt'> <col width=236 style='mso-width-source:userset;mso-width-alt:7552;width:208pt'> <col width=72 style='width:54pt'> <tr height=19 style='height:14.25pt'>  <td colspan=3 height=19 width=216 align="center" style='border-right:none;  height:14.25pt;width:162pt'>CSR Address</td>  <td rowspan=2  width=180 align="center" style='border-bottom:none;  width:90pt'>Hex</td>  <td rowspan=2  width=236 style='border-bottom:none;  width:177pt'>Use and Accessibility</td> </tr> <tr height=19 style='height:14.25pt'>  <td height=19  align="center" style='height:14.25pt;border-top:none'>[11:10]</td>  <td  align="center" style='border-top:none;border-left:none'>[9:8]</td>  <td  align="center" style='border-top:none;border-left:none'>[7:4]</td> </tr> <tr height=19 style='height:14.25pt'>  <td colspan=5 height=19  align="center" style='border-right:none;  height:14.25pt'>User CSRs</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>00</td>  <td align="center" style='border-top:none;border-left:none'>00</td>  <td align="center" style='border-top:none;border-left:none'>XXXX</td>  <td align="center" style='border-top:none;border-left:none'>0x000-0x0FF</td>  <td  style='border-top:none;border-left:none'>Standard read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>01</td>  <td align="center" style='border-left:none'>00</td>  <td align="center" style='border-left:none'>XXXX</td>  <td align="center" style='border-left:none'>0x400-0x4FF</td>  <td  style='border-left:none'>Standard read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>10</td>  <td align="center" style='border-left:none'>00</td>  <td align="center" style='border-left:none'>XXXX</td>  <td align="center" style='border-left:none'>0x800-0x8FF</td>  <td  style='border-left:none'>Custom read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>11</td>  <td align="center" style='border-left:none'>00</td>  <td align="center" style='border-left:none'>0XXX</td>  <td align="center" style='border-left:none'>0xC00-0xC7F</td>  <td  style='border-left:none'>Standard read-only</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>11</td>  <td align="center" style='border-left:none'>00</td>  <td align="center" style='border-left:none'>10XX</td>  <td align="center" style='border-left:none'>0xC80-0xCBF</td>  <td  style='border-left:none'>Standard read-only</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>11</td>  <td align="center" style='border-left:none'>00</td>  <td align="center" style='border-left:none'>11XX</td>  <td align="center" style='border-left:none'>0xCC0-0xCFF</td>  <td  style='border-left:none'>Custom read-only</td> </tr> <tr height=19 style='height:14.25pt'>  <td colspan=5 height=19  align="center" style='border-right:none;  height:14.25pt'>Supervisor CSRs</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>00</td>  <td align="center" style='border-left:none'>01</td>  <td align="center">XXXX</td>  <td align="center" style='border-left:none'>0x100-0x1FF</td>  <td >Standard read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>01</td>  <td align="center" style='border-left:none'>01</td>  <td align="center">0XXX</td>  <td align="center" style='border-left:none'>0x500-0x57F</td>  <td >Standard read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>01</td>  <td align="center" style='border-left:none'>01</td>  <td align="center">10XX</td>  <td align="center">0x580-0x5BF</td>  <td >Standard read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>01</td>  <td align="center" style='border-left:none'>01</td>  <td align="center">11XX</td>  <td align="center">0x5C0-0x5FF</td>  <td >Custom read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>10</td>  <td align="center" style='border-left:none'>01</td>  <td align="center">0XXX</td>  <td align="center">0x900-0x97F</td>  <td >Standard read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>10</td>  <td align="center" style='border-left:none'>01</td>  <td align="center">10XX</td>  <td align="center">0x980-0x9BF</td>  <td >Standard read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>10</td>  <td align="center" style='border-left:none'>01</td>  <td align="center">11XX</td>  <td align="center">0x9C0-0x9FF</td>  <td >Custom read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>11</td>  <td align="center" style='border-left:none'>01</td>  <td align="center">0XXX</td>  <td align="center">0xD00-0xD7F</td>  <td >Standard read-only</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>11</td>  <td align="center" style='border-left:none'>01</td>  <td align="center">10XX</td>  <td align="center">0xD80-0xDBF</td>  <td >Standard read-only</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>11</td>  <td align="center" style='border-left:none'>01</td>  <td align="center">11XX</td>  <td align="center">0xDC0-0xDFF</td>  <td >Custom read-only</td> </tr> <tr height=19 style='height:14.25pt'>  <td colspan=5 height=19  align="center" style='border-right:none;  height:14.25pt'>Hypervisor CSRs</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt;border-top:none'>00</td>  <td align="center" style='border-top:none;border-left:none'>10</td>  <td align="center" style='border-top:none;border-left:none'>XXXX</td>  <td align="center">0x200-0x2FF</td>  <td  style='border-top:none'>Standard read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>01</td>  <td align="center" style='border-left:none'>10</td>  <td align="center" style='border-left:none'>0XXX</td>  <td align="center">0x600-0x67F</td>  <td >Standard read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>01</td>  <td align="center" style='border-left:none'>10</td>  <td align="center" style='border-left:none'>10XX</td>  <td align="center">0x680-0x6BF</td>  <td >Standard read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>01</td>  <td align="center" style='border-left:none'>10</td>  <td align="center" style='border-left:none'>11XX</td>  <td align="center">0x6C0-0x6FF</td>  <td >Custom read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>10</td>  <td align="center" style='border-left:none'>10</td>  <td align="center" style='border-left:none'>0XXX</td>  <td align="center">0xA00-0xA7F</td>  <td >Standard read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>10</td>  <td align="center" style='border-left:none'>10</td>  <td align="center" style='border-left:none'>10XX</td>  <td align="center">0xA80-0xABF</td>  <td >Standard read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>10</td>  <td align="center" style='border-left:none'>10</td>  <td align="center" style='border-left:none'>11XX</td>  <td align="center">0xAC0-0xAFF</td>  <td >Custom read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>11</td>  <td align="center" style='border-left:none'>10</td>  <td align="center" style='border-left:none'>0XXX</td>  <td align="center">0xE00-0xE7F</td>  <td >Standard read-only</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>11</td>  <td align="center" style='border-left:none'>10</td>  <td align="center" style='border-left:none'>10XX</td>  <td align="center">0xE80-0xEBF</td>  <td >Standard read-only</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>11</td>  <td align="center" style='border-left:none'>10</td>  <td align="center" style='border-left:none'>11XX</td>  <td align="center">0xEC0-0xEFF</td>  <td >Custom read-only</td> </tr> <tr height=19 style='height:14.25pt'>  <td colspan=5 height=19  align="center" style='border-right:none;  height:14.25pt'>Machine CSRs</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt;border-top:none'>00</td>  <td align="center" style='border-top:none;border-left:none'>11</td>  <td align="center" style='border-top:none;border-left:none'>XXXX</td>  <td align="center" style='border-top:none;border-left:none'>0x300-0x3FF</td>  <td  style='border-top:none;border-left:none'>Standard read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>01</td>  <td align="center" style='border-left:none'>11</td>  <td align="center" style='border-left:none'>0XXX</td>  <td align="center" style='border-left:none'>0x700-0x77F</td>  <td  style='border-left:none'>Standard read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>01</td>  <td align="center" style='border-left:none'>11</td>  <td align="center" style='border-left:none'>100X</td>  <td align="center" style='border-left:none'>0x780-0x79F</td>  <td  style='border-left:none'>Standard read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>01</td>  <td align="center" style='border-left:none'>11</td>  <td align="center" style='border-left:none'>1010</td>  <td align="center" style='border-left:none'>0x7A0-0x7AF</td>  <td  style='border-left:none'>Standard read/write debug CSRs</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>01</td>  <td align="center" style='border-left:none'>11</td>  <td align="center" style='border-left:none'>1011</td>  <td align="center" style='border-left:none'>0x7B0-0x7BF</td>  <td  style='border-left:none'>Debug-mode-only CSRs</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>01</td>  <td align="center" style='border-left:none'>11</td>  <td align="center" style='border-left:none'>11XX</td>  <td align="center" style='border-left:none'>0x7C0-0x7FF</td>  <td  style='border-left:none'>Custom read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>10</td>  <td align="center" style='border-left:none'>11</td>  <td align="center" style='border-left:none'>0XXX</td>  <td align="center" style='border-left:none'>0xB00-0xB7F</td>  <td  style='border-left:none'>Standard read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19  style='height:14.25pt'>10</td>  <td align="center"style='border-left:none'>11</td>  <td align="center"style='border-left:none'>10XX</td>  <td align="center"style='border-left:none'>0xB80-0xBBF</td>  <td style='border-left:none'>Standard read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19 style='height:14.25pt'>10</td>  <td align="center"style='border-left:none'>11</td>  <td align="center"style='border-left:none'>11XX</td>  <td align="center"style='border-left:none'>0xBC0-0xBFF</td>  <td style='border-left:none'>Custom read/write</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19 style='height:14.25pt'>11</td>  <td align="center"style='border-left:none'>11</td>  <td align="center"style='border-left:none'>0XXX</td>  <td align="center"style='border-left:none'>0xF00-0xF7F</td>  <td style='border-left:none'>Standard read-only</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19 style='height:14.25pt'>11</td>  <td align="center"style='border-left:none'>11</td>  <td align="center"style='border-left:none'>10XX</td>  <td align="center"style='border-left:none'>0xF80-0xFBF</td>  <td style='border-left:none'>Standard read-only</td> </tr> <tr height=19 style='height:14.25pt'>  <td align="center"height=19 style='height:14.25pt'>11</td>  <td align="center"style='border-left:none'>11</td>  <td align="center"style='border-left:none'>11XX</td>  <td align="center"style='border-left:none'>0xFC0-0xFFF</td>  <td style='border-left:none'>Custom read-only</td> </tr></table><p><em>表 2.1 RISC-V CSR地址范围的分配</em></p><p><a href="https://imgchr.com/i/sM7OiD" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/09/sM7OiD.png" alt="sM7OiD.png"></a></p><p><em>表 2.2 目前分配的 RISC-V 用户级 CSR 地址</em></p><p><a href="https://imgchr.com/i/sMHtyR" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/09/sMHtyR.png" alt="sMHtyR.png"></a></p><p><em>表 2.3 目前分配的 RISC-V 管理员级 CSR 地址</em></p><p><a href="https://imgchr.com/i/sMH7lj" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/09/sMH7lj.png" alt="sMH7lj.png"></a></p><p><em>表 2.4 目前分配的 RISC-V 机器级 CSR 地址。</em></p><p><a href="https://imgchr.com/i/sMbyNT" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/09/sMbyNT.png" alt="sMbyNT.png"></a></p><p><em>表 2.5 目前分配的 RISC-V 机器级 CSR 地址。</em></p><h2 id="2-3-CSR-字段规范"><a href="#2-3-CSR-字段规范" class="headerlink" title="2.3 CSR 字段规范"></a>2.3 CSR 字段规范</h2><p>以下定义和缩写用于指定 CSR 中字段的行为。</p><h4 id="Reserved-Writes-Preserve-Values-Reads-Ignore-Values-WPRI-（写保留原值，读忽略值）"><a href="#Reserved-Writes-Preserve-Values-Reads-Ignore-Values-WPRI-（写保留原值，读忽略值）" class="headerlink" title="Reserved Writes Preserve Values, Reads Ignore Values (WPRI)（写保留原值，读忽略值）"></a>Reserved Writes Preserve Values, Reads Ignore Values (WPRI)（写保留原值，读忽略值）</h4><p>一些完整的读/写字段保留供将来使用。 当将值写入同一寄存器的其他字段时，软件应忽略从这些字段读取的值，并应保留这些字段中保存的值。 为了向前兼容，不提供这些字段的实现时必须将其硬接线为零。 这些字段在寄存器描述中标记为 WPRI。</p><h4 id="Write-Read-Only-Legal-Values-WLRL-（只写或者只写合法值）"><a href="#Write-Read-Only-Legal-Values-WLRL-（只写或者只写合法值）" class="headerlink" title="Write/Read Only Legal Values (WLRL)（只写或者只写合法值）"></a>Write/Read Only Legal Values (WLRL)（只写或者只写合法值）</h4><p>一些读/写 CSR 字段仅为可能的位编码的子集指定行为，而保留其他位编码。软件不应该向这样的字段写入任何合法值以外的内容，并且不应该假定读取将返回合法值，除非最后一次写入是合法值，或者由于另一次操作将寄存器设置为合法值，寄存器还没有被写入。这些字段在寄存器描述中标记为 WLRL。</p><p>如果指令试图将不支持的值写入 WLRL 字段，则允许实现，但不要求引发非法指令异常。 当最后一次写入具有非法值时，实现可以在读取WLRL字段时返回任意位模式，但是返回的值应确定性地取决于非法写入值和写入前的字段值。</p><h4 id="Write-Any-Values-Reads-Legal-Values-WARL-（写任意值，读合法值）"><a href="#Write-Any-Values-Reads-Legal-Values-WARL-（写任意值，读合法值）" class="headerlink" title="Write Any Values, Reads Legal Values (WARL)（写任意值，读合法值）"></a>Write Any Values, Reads Legal Values (WARL)（写任意值，读合法值）</h4><p>一些读/写 CSR 字段仅针对位编码的子集定义，但允许写入任何值，同时保证每次读取时均返回合法值。 假设编写 CSR 没有其他副作用，则可以通过尝试写入所需的设置然后读取以查看是否保留该值来确定支持值的范围。 这些字段在寄存器说明中标记为 WARL。</p><p>在将不支持的值写入 WARL 字段时，实现不会引发异常。 当最后一次写入具有非法值时，实现可以在读取 WARL 字段时返回任何合法值，但是返回的合法值应确定性地取决于非法写入值和写入之前的字段值。</p><h2 id="2-4-CSR-宽度调整"><a href="#2-4-CSR-宽度调整" class="headerlink" title="2.4 CSR 宽度调整"></a>2.4 CSR 宽度调整</h2><p>如果更改了 CSR 的宽度（例如，如第 3.1.6.2 节中所述，通过更改 MXLEN 或 UXLEN），则除非另有说明，否则新宽度CSR的可写字段和位是由先前宽度 CSR 确定的，就像通过以下算法确定一样：</p><ol><li><p>将先前宽度的 CSR 的值复制到相同宽度的临时寄存器中。</p></li><li><p>对于先前宽度的CSR的只读位，临时寄存器中相同位置的位设置为零。</p></li><li><p>临时寄存器的宽度更改为新的宽度。 如果新宽度 W 窄于先前宽度，则保留临时寄存器的最低有效 W 位，并丢弃较高有效位。 如果新宽度比以前的宽度宽，则将临时寄存器零扩展到较宽的宽度。</p></li><li><p>新宽度 CSR 的每个可写字段都采用临时寄存器中相同位置的位值。</p></li></ol><p>更改 CSR 的宽度不是对 CSR 的读取或写入，因此不会触发任何副作用。</p><h1 id="第三章-机器级-ISA（Machine-Level-ISA），-版本-1-1"><a href="#第三章-机器级-ISA（Machine-Level-ISA），-版本-1-1" class="headerlink" title="第三章 机器级 ISA（Machine-Level ISA）， 版本 1.1"></a>第三章 机器级 ISA（Machine-Level ISA）， 版本 1.1</h1><p>本章介绍了机器模式（M-mode）下提供的机器级操作，该模式是 RISC-V 系统中的最高特权模式。M-mode 用于对硬件平台的低级别访问，并且是复位时进入的第一个模式。M-mode 也可以用来完成那些在硬件上直接实现太困难或太昂贵的功能。RISC-V 机器级 ISA 包含一个公共核心，该核心可以根据所支持的其他特权级别以及硬件实现的其他详细信息进行扩展。</p><h2 id="3-1-Machine-Level-CSRs-机器级-CSRs"><a href="#3-1-Machine-Level-CSRs-机器级-CSRs" class="headerlink" title="3.1 Machine-Level CSRs (机器级 CSRs)"></a>3.1 Machine-Level CSRs (机器级 CSRs)</h2><p>除了本节中描述的机器级 CSRs 外，M-mode 代码还可以访问较低特权级别的所有 CSRs。</p><h3 id="3-1-1-机器指令集-ISA-寄存器-misa"><a href="#3-1-1-机器指令集-ISA-寄存器-misa" class="headerlink" title="3.1.1 机器指令集(ISA)寄存器: misa"></a>3.1.1 机器指令集(ISA)寄存器: misa</h3><p>misa CSR 是 WARL 读写寄存器，报告硬件(hart)支持的 ISA。该寄存器在任何实现中都必须是可读的，但是可以返回零值以指示未实现 misa 寄存器，这就需要通过一个单独的非标准机制确定 CPU 功能。</p><p><a href="https://imgchr.com/i/sMOvr9" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/09/sMOvr9.png" alt="sMOvr9.png"></a></p><p><em>图 3.1 机器 ISA 寄存器（misa）</em></p><p>MXL（机器 XLEN）字段编码本机基本整数 ISA 宽度，如表 3.1 所示。MXL 字段在支持多个基本 ISA 宽度的实现中可能是可写的。M-mode 下的有效 XLEN, MXLEN，由 MXL 的设置给出，如果 misa 为零，则有一个固定的值。重置时，MXL 字段始终设置为最广泛支持的 ISA 变种。</p><table><thead><tr><th align="center">MXL</th><th align="center">XLEN</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">32</td></tr><tr><td align="center">2</td><td align="center">64</td></tr><tr><td align="center">3</td><td align="center">128</td></tr></tbody></table><p>misa CSR 为 MXLEN 位宽。如果从 misa 读取的值不为零，该值的 MXL 字段总是表示当前的 MXLEN。如果对 misa 的写操作导致 MXLEN 发生更改，则 MXL 的位置将以新的宽度移动到 misa 的最高有效两位。</p><hr><p><strong>注</strong>: <em>可以使用返回的 misa 值的符号上的分支，以及可能在符号上左移一个分支和第二个分支，来快速确定基本宽度。这些检查可以用汇编代码编写，而无需知道机器的寄存器宽度（XLEN）。 基本宽度由 XLEN = 2^(MXL + 4) 给出。         如果 misa 为零，则可以通过将立即数 4 放置在一个寄存器中，然后一次将寄存器左移 31位来找到基本宽度。如果在一次移位后为零，则该机器为 RV32。 如果两次移位后为零，则机器为 RV64，否则为 RV128。</em></p><p>Extensions 字段对标准扩展的存在进行编码，每个字母都有一个比特（bit 0 编码扩展名“ A” 存在，bit 1 编码扩展名“ B” 存在，直到 bit 25 编码“ Z”）。RV32I，RV64I，RV128I 基本 ISA 的“ I”位置 1，而 RV32E 的“ E”位置 1。Extensions 字段是 WARL 字段，可以包含可写位，其中实现允许修改支持的 ISA。重置时，“Extensions ”字段应包含支持的扩展名的最大集合，并且如果两者均可用，则 “I” 应该被选择而不是 E 。</p><p>RV128I 基本 ISA 尚未冻结，尽管本规范的其余大部分有望应用于 RV128，但这个版本的文档仅关注 RV32 和 RV64。</p><p>“ G” 位用作转义符，以允许扩展到更大的标准扩展名空间。</p><hr><p><strong>注</strong>: <em>G 用于指示 IMAFD 组合，因此在 misa CSR 中是多余的，因此我们保留该位以指示存在其他标准扩展。</em></p><p>如果分别支持用户和管理员模式，则将设置“ U”和“ S”位。</p><p>如果存在任何非标准扩展名，则将设置“ X”位。</p><hr><p><strong>注</strong>: <em>misa CSR 将 CPU 功能的基本目录暴露给机器模式代码。可以在机器模式中通过探测其他机器寄存器，并检查系统中的其他 ROM 存储器，作为引导过程的一部分来获得更多的信息。                   我们要求较低特权级别执行环境调用，而不是读取 CPU 寄存器来确定每个特权级别可用的功能。这使虚拟化层可以更改在任何级别观察到的 ISA，并支持更丰富的命令界面，而不会增加硬件设计的负担。</em></p><p>“ E”位是只读的。 除非将 misa 硬连线为零，否则“ E”位始终读取为“ I”位的补码（<em>补集？</em>）。同时支持 RV32E 和 RV32I 的实现可以通过清除“ I”位来选择 RV32E。</p><p><a href="https://imgchr.com/i/sQmQJO" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/09/sQmQJO.png" alt="sQmQJO.png"></a></p><p><em>表 3.2 misa 中 Extensions 字段的编码。 保留供将来使用的所有位在读取时必须返回零。</em></p><p>如果 ISA 功能 x 取决于 ISA 功能 y，则尝试启用功能 x 但禁用功能 y 会导致两个功能都被禁用。 例如，设置 “ F” = 0 和 “ D” = 1 会导致同时清除“ F”和“ D”。</p><p>一个实现可能会对两个或多个 misa 字段的集合设置施加其他约束，在这种情况下，它们将共同充当单个 WARL 字段。 尝试写入不受支持的组合会导致将这些位设置为某些受支持的组合。</p><p>写 misa 可能会增加 IALIGN，例如，通过禁用 C 扩展。如果要写入 misa 的指令增加了 IALIGN，而后一条指令的地址未按 IALIGN 位对齐，则将抑制对 misa 的写入，从而使 misa 保持不变。</p><h3 id="3-1-2-机器厂商-ID-寄存器-mvendorid"><a href="#3-1-2-机器厂商-ID-寄存器-mvendorid" class="headerlink" title="3.1.2  机器厂商 ID 寄存器: mvendorid"></a>3.1.2  机器厂商 ID 寄存器: mvendorid</h3><p>mvendorid CSR 是一个 32 位只读寄存器，提供核心提供者的 JEDEC 制造商 ID。该寄存器在任何实现中都必须是可读的，但是可以返回 0 值指示该字段未实现或这是非商业实现。</p><p><a href="https://imgchr.com/i/sQn1A0" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/09/sQn1A0.png" alt="sQn1A0.png"></a></p><p><em>图3.2 Vendor ID 寄存器（mvendorid）</em></p><p>JEDEC 制造商 ID 通常编码为单字节连续的 0x7f 代码的序列，以不等于 0x7f 的单字节 ID 终止，并且在每个字节的最高有效位中带有奇校验位。mvendorid 在 Bank 字段中编码单字节的连续代码，并在 Offset 字段中编码最后一个字节，丢弃奇偶校验位。例如，JEDEC 制造商ID 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x8a（十二个连续代码，后跟 0x8a）将在 mvendorid 字段中编码为 0x60a。</p><hr><p><strong>注</strong>: <em>以前，供应商 ID 是 RISC-V 基金会分配的编号，但这与 JEDEC 在维护制造商 ID 标准方面的工作重复。 在撰写本文时，向 JEDEC 注册制造商 ID 的一次性费用为 500 美元。</em></p><h3 id="3-1-3-机器架构-ID-寄存器-marchid"><a href="#3-1-3-机器架构-ID-寄存器-marchid" class="headerlink" title="3.1.3 机器架构 ID 寄存器: marchid"></a>3.1.3 机器架构 ID 寄存器: marchid</h3><p>marchid CSR 是 MXLEN 位的只读寄存器，用于编码 hart 的基本微体系结构。该寄存器在任何实现中都必须是可读的，但是可以返回 0 值以指示未实现该字段。 mvendorid 和 marchid 的组合应该唯一地标识所实现的 hart 微体系结构的类型。</p><p><a href="https://imgchr.com/i/sQMCnJ" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/09/sQMCnJ.png" alt="sQMCnJ.png"></a></p><p><em>图 3.3 机器架构 ID 寄存器（marchid）</em></p><p>开源项目体系结构 IDs 由 RISC-V 基金会全局分配，并且具有非零体系结构 IDs，其中最高有效位（MSB）为零。商业体系结构 IDs 由每个商业供应商独立分配，但是必须设置 MSB，并且在其余 MXLEN-1 位中不能包含零。</p><hr><p><strong>注</strong>: *</p><h3 id="3-1-4-机器实现-ID-寄存器-mimpid"><a href="#3-1-4-机器实现-ID-寄存器-mimpid" class="headerlink" title="3.1.4 机器实现 ID 寄存器: mimpid"></a>3.1.4 机器实现 ID 寄存器: mimpid</h3><To do><h3 id="3-1-5-Hart-ID-寄存器-mhartid"><a href="#3-1-5-Hart-ID-寄存器-mhartid" class="headerlink" title="3.1.5 Hart ID 寄存器: mhartid"></a>3.1.5 Hart ID 寄存器: mhartid</h3><To do><h3 id="3-1-6-机器状态寄存器：mstatus"><a href="#3-1-6-机器状态寄存器：mstatus" class="headerlink" title="3.1.6 机器状态寄存器：mstatus"></a>3.1.6 机器状态寄存器：mstatus</h3><p>mstatus 寄存器是一个 MXLEN 位读/写寄存器，其格式在 RV32 上的如图 3.6 和在 RV64 如图 3.7 所示。mstatus 寄存器跟踪并控制 hart 的当前操作状态。 mstatus 寄存器的受限视图分别在 S 级和 U 级 ISA 中显示为 sstatus 和 ustatus 寄存器。</p><p><a href="https://imgchr.com/i/sQINkD" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/10/sQINkD.png" alt="sQINkD.png"></a></p><p><em>图 3.6 RV32下机器模式状态寄存器 (mstatus)</em></p><p><a href="https://imgchr.com/i/sQIUte" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/10/sQIUte.png" alt="sQIUte.png"></a></p><p><em>图 3.7 RV64 下机器模式状态寄存器 (mstatus)</em></p><h4 id="3-1-6-1-mstatus-寄存器中的特权和全局中断使能栈"><a href="#3-1-6-1-mstatus-寄存器中的特权和全局中断使能栈" class="headerlink" title="3.1.6.1 mstatus 寄存器中的特权和全局中断使能栈"></a>3.1.6.1 mstatus 寄存器中的特权和全局中断使能栈</h4><p>为每种特权模式提供了全局中断使能位 MIE，SIE 和 UIE。这些位主要用于保证当前特权模式下中断处理程序的原子性。</p><hr><p><strong>注</strong>: <em>全局 xIE 位位于 mstatus 的低位，因此可以通过一条 CSR 指令自动设置或清除它们。</em></p><p>当 hart 在 x 特权模式中执行时，当 xIE = 1 时中断被全局启用，当 xIE = 0 时中断被全局禁用。无论低特权模式的全局 wIE 位如何设置，w &lt; x，较低特权模式的中断总是会全局禁用。无论高特权模式的全局 yIE 位如何设置，y &gt; x，始终会全局启用高特权模式的中断。特权级别较高的代码可以使用单独的每个中断启用位来禁用选定的较高级别的特权模式中断，然后再将控制权移交给较低级别的特权模式。</p><hr><p><strong>注</strong>: <em>较高特权模式 y 可以在将控制权移交给较低特权模式之前禁用其所有中断，但这将是不寻常的，因为它将仅留下同步异常 (trap)，不可屏蔽的中断或重置以重新获得对 hart 的控制。</em></p><p>为了支持异常 (traps) 嵌套，每个 x 特权模式都有一个两级的堆栈，其中包括中断使能位和特权模式。xPIE 保留异常之前活动的中断使能位的值，而 xPP 保留先前的特权模式。xPP 字段最多只能保留 x 的特权模式，因此 MPP 为 2 位宽，SPP 为 1 位宽，UPP 隐式为 0。当异常从特权模式 y 进入特权模式 x 时，xPIE 设置为 xIE 的值； xIE 设置为 0；并且 xPP 设置为 y。</p><hr><p><strong>注</strong>: <em>对于低特权模式，任何异常（同步或者异步）通常都以更高的特权模式进行，进入时禁用中断。更高级别的 trap 处理程序要么为 trap 提供服务，然后使用堆栈的信息返回，要么（如果没有立即返回到被中断的上下文）在重新启用中断之前保存特权堆栈，因此每个堆栈只需要一个入口。</em></p><p>MRET，SRET 或 URET 指令分别用于从 M-mode，S-mode 或 U-mode 的异常返回。当执行 xRET 指令时，假设 xPP 保持值 y，则 xIE 设置为 xPIE； 特权模式更改为 y； xPIE 设置为 1； 并且 xPP 设置为 U（如果不支持用户模式，则为 M）。</p><p>xPP 字段是 WARL 字段，只能包含 x 特权模式 和任何低于 x 的已实现特权模式。 如果未实现 x 特权模式，则必须将 xPP 硬接线为 0。</p><hr><p><strong>注</strong>: <em>M-mode 软件可以通过将特权模式写入 MPP 然后将其读回来确定是否实现了特权模式。      如果机器仅提供 U 和 M 模式，则仅需要单个硬件存储位即可表示 MPP 中的 00 或 11。</em></p><p>用户级中断是可选的扩展，并已分配 ISA 扩展字母 N。 如果省略了用户级中断，则 UIE 和 UPIE 位被硬接线为零。对于所有其他受支持的 x 特权模式，不得对 xIE 和 xPIE 进行硬接线。</p><hr><p><strong>注</strong>: <em>用户级中断的主要目的是支持仅包含 M-mode 和 U-mode 的安全嵌入式系统，但也可以在运行类 Unix 操作系统的系统中支持的用户级中断，以支持用户级异常处理。</em></p><h4 id="3-1-6-2-mstatus-寄存器中基本-ISA-控制"><a href="#3-1-6-2-mstatus-寄存器中基本-ISA-控制" class="headerlink" title="3.1.6.2 mstatus 寄存器中基本 ISA 控制"></a>3.1.6.2 mstatus 寄存器中基本 ISA 控制</h4><p>对于 RV64 系统，SXL 和 UXL 字段是 WARL 字段，分别控制 S-mode 和 U-mode  的 XLEN 值。这些字段的编码与 misa 的 MXL 字段相同，如表 3.1 所示。 S-mode 和 U-mode  下的有效 XLEN 分别称为 SXLEN 和 UXLEN。</p><p>对于 RV32 系统，SXL 和 UXL 字段不存在，并且 SXLEN = 32 和 UXLEN = 32。</p><p>对于 RV64 系统，如果不支持 S-mode，则 SXL 硬接线为零。 否则，它是一个 WARL 字段，对 SXLEN 的当前值进行编码。 特别地，该实现可以硬连线 SXL，使得 SXLEN = MXLEN。</p><p>对于 RV64 系统，如果不支持 U-mode，则 UXL 硬接线为零。 否则，它是一个 WARL 字段，对 UXLEN 的当前值进行编码。 特别地，该实现可以硬编码 UXL，使得 UXLEN = MXLEN 或 UXLEN = SXLEN。</p><p>只要在任何模式下将 XLEN 的值设置为小于支持的最大 XLEN 的值，所有操作都必须忽略配置的 XLEN 上方的源操作数寄存器位，并且必须对结果进行符号扩展以填充目标寄存器中整个支持的最大 XLEN。</p><p>如果 MXLEN 从 32 更改为更宽的宽度，则 mstatus 字段 SXL 和 UXL 中的每个（如果未硬接线为强制值）将获得与最大支持宽度对应的值，该宽度不比新 MXLEN 宽。</p><h4 id="3-1-6-3-mstatus-寄存器中内存特权"><a href="#3-1-6-3-mstatus-寄存器中内存特权" class="headerlink" title="3.1.6.3 mstatus 寄存器中内存特权"></a>3.1.6.3 mstatus 寄存器中内存特权</h4><To do><h4 id="3-1-6-4-mstatus-寄存器中虚拟化支持"><a href="#3-1-6-4-mstatus-寄存器中虚拟化支持" class="headerlink" title="3.1.6.4 mstatus 寄存器中虚拟化支持"></a>3.1.6.4 mstatus 寄存器中虚拟化支持</h4><To do><h4 id="3-1-6-5-mstatus-寄存器中扩展上下文状态-Extension-Context-Status"><a href="#3-1-6-5-mstatus-寄存器中扩展上下文状态-Extension-Context-Status" class="headerlink" title="3.1.6.5 mstatus 寄存器中扩展上下文状态(Extension Context Status)"></a>3.1.6.5 mstatus 寄存器中扩展上下文状态(Extension Context Status)</h4><p>支持大量扩展是 RISC-V 的主要目标之一，因此，我们定义了一个标准接口，以允许不变的特权模式代码（尤其是管理员级别的 OS）支持任意的用户模式状态扩展。</p><To do><p>FS [1：0] WARL字段和XS [1：0]只读字段分别用于通过设置和跟踪浮点单元和任何其他用户模式扩展的当前状态来减少上下文保存和还原的成本。</p><To do><h3 id="3-1-7-机器异常向量-Trap-Vector-基地址寄存器-mtvec"><a href="#3-1-7-机器异常向量-Trap-Vector-基地址寄存器-mtvec" class="headerlink" title="3.1.7 机器异常向量(Trap-Vector)基地址寄存器: mtvec"></a>3.1.7 机器异常向量(Trap-Vector)基地址寄存器: mtvec</h3><p>mtvec 寄存器是 MXLEN 位的读/写寄存器，用于保存异常向量配置， 由向量基址（BASE）和向量模式（MODE）组成。</p><p><img src="C:%5CUsers%5CBH6BAO%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210111141718084.png" alt="image-20210111141718084"></p><p><em>图 3.8 机器异常向量基地址寄存器 (mtvec)</em></p><p>mtvec 寄存器必须始终实现，但可以包含硬连线的只读值。 如果 mtvec 是可写的，则寄存器可能保存的一组值可能因实现而异。 BASE 字段中的值必须始终在 4 字节边界上对齐，并且 MODE 设置可能会对 BASE 字段中的值施加其他对齐约束。</p><hr><p><strong>注</strong>: <em>我们在实现 trap 向量基址时具有相当大的灵活性。 一方面，我们不希望负担大量状态位给底层实现带来负担，但另一方面，我们希望为更大的系统提供灵活性。</em></p><p><a href="https://imgchr.com/i/s37vLj" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/11/s37vLj.png" alt="s37vLj.png"></a></p><p><em>表 3.5 mtvec MODE 字段编码</em></p><p>表 3.5 中显示了 MODE 字段的编码。 当 MODE = Direct 时，所有进入机器模式的 trap 都会导致将 pc 设置为 BASE 字段中的地址。当 MODE = Vectored 时，进入机器模式的所有同步异常都将 pc 设置为 BASE 字段中的地址，而中断将 pc 设置为 BASE 字段中的地址加上四倍的中断 cause 编号。例如，机器模式计时器中断导致将 PC 设置为 BASE + 0x1c（请参阅表 3.6）。</p><hr><p><strong>注</strong>: <em>启用向量中断后，与用户模式软件中断相对应的中断 cause 0 被向量到与同步异常相同的位置。 由于用户模式软件中断被禁用或委托给特权较少的模式，因此在实践中不会出现这种歧义。</em></p><p>对于不同的模式，实现可能具有不同的对齐约束。 特别的是，MODE = Vectored 可能比 MODE = Direct 更严格的对齐约束。</p><h3 id="3-1-8-机器异常-Trap-委托寄存器-medeleg-and-mideleg"><a href="#3-1-8-机器异常-Trap-委托寄存器-medeleg-and-mideleg" class="headerlink" title="3.1.8 机器异常(Trap)委托寄存器:(medeleg and mideleg)"></a>3.1.8 机器异常(Trap)委托寄存器:(medeleg and mideleg)</h3><h3 id="3-1-9-机器中断寄存器-mip-和-mie"><a href="#3-1-9-机器中断寄存器-mip-和-mie" class="headerlink" title="3.1.9 机器中断寄存器:(mip 和 mie)"></a>3.1.9 机器中断寄存器:(mip 和 mie)</h3><p>mip 寄存器是 MXLEN 位读/写寄存器，包含有关挂起的中断的信息，而 mie 是对应的 MXLEN 位读/写寄存器，包含中断使能位。通过该 CSR 地址只能写入 mip 中的低特权软件中断（USIP，SSIP），定时器中断（UTIP，STIP）和外部中断（UEIP，SEIP）所对应的位； 其余位是只读的。</p><hr><p><strong>注</strong>: <em>机器级中断寄存器处理一些根中断源，为简单起见，这些中断源被分配了固定的服务优先级，而单独的外部中断控制器可以对更大的一组中断实施更复杂的优先级排序方案，然后将这些中断混和到机器级 中断源。</em></p><p>mip 和 mie 寄存器的受限视图分别以 sip / sie 和 uip / uie 寄存器的形式出现在 S-mode 和 U-mode 下。 如果通过在 mideleg 寄存器中设置一个位将中断委托给 x 特权模式，则该中断在 x ip 寄存器中可见，并且可以使用 x ie 寄存器屏蔽。否则，x ip 和 x ie 中的相应位呈现硬连接为零。</p><p><a href="https://imgchr.com/i/sGp4Dx" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/11/sGp4Dx.png" alt="sGp4Dx.png"></a></p><p><em>图 3.11 机器中断挂起寄存器</em></p><p>MTIP，STIP，UTIP 位对应于机器级，管理员级和用户级的定时器中断。MTIP 位是只读的，可通过写入内存映射的机器模式定时器比较寄存器来清除。UTIP 和 STIP 位可以由 M-mode 软件写入，以将计时器中断传递到较低的特权级别。 用户和管理员层软件可以分别通过调用 AEE 和 SEE 来清除 UTIP 和 STIP 位。</p><p><a href="https://imgchr.com/i/sG9jW4" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/11/sG9jW4.png" alt="sG9jW4.png"></a></p><p><em>图 3.12 机器中断使能寄存器</em></p><p>有一个单独的定时器中断使能位，分别称为 MTIE，STIE 和 UTIE，分别用于 M 模式，S 模式和 U 模式定时器中断使能。</p><p>每个较低的权限级别都有一个单独的软件挂起中断位( SSIP、USIP )， CSR 访问本地 hart 上运行的代码可以在相关的权限级别或任何更高的权限级别上读写该位。机器级别的 MSIP 位是通过访问内存映射的控制寄存器来写入的，远程 harts 使用这些寄存器来提供机器模式的处理器间中断。较低特权级别的处理器间中断是通过特定于实现的机制来实现的，例如，通过对 AEE 或 SEE 的调用，这可能最终导致对接收方 hart 的机器模式写操作是 MSIP 位。 hart 可以使用相同的内存映射控制寄存器写入自己的 MSIP 位。</p><p>mie CSR 中的 MSIE，SSIE 和 USIE 字段分别启用M模式软件中断，S 模式软件中断和 U 模式软件中断。</p><hr><p><strong>注</strong>: <em>当以适当的模式运行时，我们仅允许 hart 直接写入自己的 SSIP 或 USIP 位，因为其他 hart 可能会被虚拟化，并可能被更高的特权级别调度。因此，我们依靠对 AEE 和 SEE 的调用来提供处理器间中断。机器模式的 hart 不是虚拟化的，可以通过设置它们的 MSIP 位直接中断其他 hart，通常根据平台规范使用未缓存的 I/O 写入内存映射控制寄存器。</em></p><p>mip 中的 MEIP 字段是一个只读位，指示机器模式外部中断正在处理中。 MEIP 由特定于平台的中断控制器设置和清除。 设置时，mie 中的 MEIE 字段启用机器外部中断。 </p><p>mip 中的 SEIP 字段包含单个读写位。 SEIP 可由 M 模式软件编写，以指示 S 模式外部中断正在处理。 此外，平台级别的中断控制器可能会生成主管级别的外部中断。 软件可写位的逻辑或与来自外部中断控制器的信号用于生成对管理程序的外部中断。 当使用 CSRRW，CSRRS 或 CSRRC 指令读取 SEIP 位时，在第一个目标寄存器中返回的值包含软件可写位的逻辑或，以及来自中断控制器的中断信号。 但是，在 CSRRS 或 CSRRC 指令的读-修改-写序列中使用的值只是软件可写 SEIP 位，而忽略了来自外部中断控制器的中断值。 </p><h3 id="3-1-10-机器时间寄存器-mtime-和-mtimecmp"><a href="#3-1-10-机器时间寄存器-mtime-和-mtimecmp" class="headerlink" title="3.1.10 机器时间寄存器:(mtime 和 mtimecmp)"></a>3.1.10 机器时间寄存器:(mtime 和 mtimecmp)</h3><h3 id="3-1-11-硬件性能监控器"><a href="#3-1-11-硬件性能监控器" class="headerlink" title="3.1.11 硬件性能监控器"></a>3.1.11 硬件性能监控器</h3><h3 id="3-1-12-计数器使能寄存器-m-s-counteren"><a href="#3-1-12-计数器使能寄存器-m-s-counteren" class="headerlink" title="3.1.12 计数器使能寄存器:([m|s]counteren)"></a>3.1.12 计数器使能寄存器:([m|s]counteren)</h3><h3 id="3-1-13-机器计数器禁止-CSR-寄存器-mcountinhibit"><a href="#3-1-13-机器计数器禁止-CSR-寄存器-mcountinhibit" class="headerlink" title="3.1.13 机器计数器禁止 CSR 寄存器:(mcountinhibit)"></a>3.1.13 机器计数器禁止 CSR 寄存器:(mcountinhibit)</h3><h3 id="3-1-14-机器暂存寄存器-mscratch"><a href="#3-1-14-机器暂存寄存器-mscratch" class="headerlink" title="3.1.14 机器暂存寄存器:(mscratch)"></a>3.1.14 机器暂存寄存器:(mscratch)</h3><h3 id="3-1-15-机器异常程序计数器-mepc-——指向发生异常PC地址"><a href="#3-1-15-机器异常程序计数器-mepc-——指向发生异常PC地址" class="headerlink" title="3.1.15 机器异常程序计数器:(mepc) ——指向发生异常PC地址"></a>3.1.15 机器异常程序计数器:(mepc) ——指向发生异常PC地址</h3><h3 id="3-1-16-机器异常源寄存器-mcause-——-异常源-or-中断号-or-异常种类？"><a href="#3-1-16-机器异常源寄存器-mcause-——-异常源-or-中断号-or-异常种类？" class="headerlink" title="3.1.16 机器异常源寄存器:(mcause)——(异常源 or 中断号 or 异常种类？)"></a>3.1.16 机器异常源寄存器:(mcause)——(异常源 or 中断号 or 异常种类？)</h3><h3 id="3-1-17-机器异常值寄存器-mtval"><a href="#3-1-17-机器异常值寄存器-mtval" class="headerlink" title="3.1.17 机器异常值寄存器:(mtval)"></a>3.1.17 机器异常值寄存器:(mtval)</h3><h2 id="3-2-机器模式-M-mode-特权指令"><a href="#3-2-机器模式-M-mode-特权指令" class="headerlink" title="3.2 机器模式(M-mode)特权指令"></a>3.2 机器模式(M-mode)特权指令</h2><h3 id="3-2-1-环境调用和断点-ECALL-和-EBREAK"><a href="#3-2-1-环境调用和断点-ECALL-和-EBREAK" class="headerlink" title="3.2.1 环境调用和断点:(ECALL 和 EBREAK)"></a>3.2.1 环境调用和断点:(ECALL 和 EBREAK)</h3><h3 id="3-2-2-异常返回指令-Trap-return"><a href="#3-2-2-异常返回指令-Trap-return" class="headerlink" title="3.2.2  异常返回指令(Trap-return)"></a>3.2.2  异常返回指令(Trap-return)</h3><h3 id="3-2-3-等待中断指令-WFI"><a href="#3-2-3-等待中断指令-WFI" class="headerlink" title="3.2.3  等待中断指令:(WFI)"></a>3.2.3  等待中断指令:(WFI)</h3><h2 id="3-3-复位-Reset"><a href="#3-3-复位-Reset" class="headerlink" title="3.3 复位(Reset)"></a>3.3 复位(Reset)</h2><h2 id="3-4-不可屏蔽中断-NMI"><a href="#3-4-不可屏蔽中断-NMI" class="headerlink" title="3.4 不可屏蔽中断(NMI)"></a>3.4 不可屏蔽中断(NMI)</h2><h2 id="3-5-物理内存特性-PMA"><a href="#3-5-物理内存特性-PMA" class="headerlink" title="3.5 物理内存特性(PMA)"></a>3.5 物理内存特性(PMA)</h2><h3 id="3-5-1-主内存对-I-O-设备和空白区域"><a href="#3-5-1-主内存对-I-O-设备和空白区域" class="headerlink" title="3.5.1 主内存对 I/O 设备和空白区域"></a>3.5.1 主内存对 I/O 设备和空白区域</h3><h3 id="3-5-2-PMAs-支持的访问类型"><a href="#3-5-2-PMAs-支持的访问类型" class="headerlink" title="3.5.2 PMAs 支持的访问类型"></a>3.5.2 PMAs 支持的访问类型</h3><h3 id="3-5-3-PMAs-的原子操作"><a href="#3-5-3-PMAs-的原子操作" class="headerlink" title="3.5.3 PMAs 的原子操作"></a>3.5.3 PMAs 的原子操作</h3><h3 id="3-5-4-PMAs-内存排序操作"><a href="#3-5-4-PMAs-内存排序操作" class="headerlink" title="3.5.4 PMAs 内存排序操作"></a>3.5.4 PMAs 内存排序操作</h3><h3 id="3-5-5-PMAs-的一致性和可缓存性"><a href="#3-5-5-PMAs-的一致性和可缓存性" class="headerlink" title="3.5.5 PMAs 的一致性和可缓存性"></a>3.5.5 PMAs 的一致性和可缓存性</h3><h3 id="3-5-6-PMAs-幂等性"><a href="#3-5-6-PMAs-幂等性" class="headerlink" title="3.5.6 PMAs 幂等性"></a>3.5.6 PMAs 幂等性</h3><h2 id="3-6-物理内存保护-PMP"><a href="#3-6-物理内存保护-PMP" class="headerlink" title="3.6 物理内存保护(PMP)"></a>3.6 物理内存保护(PMP)</h2><h3 id="3-6-1-CSRs-的物理内存保护寄存器-PMP-CSR"><a href="#3-6-1-CSRs-的物理内存保护寄存器-PMP-CSR" class="headerlink" title="3.6.1 CSRs 的物理内存保护寄存器(PMP CSR)"></a>3.6.1 CSRs 的物理内存保护寄存器(PMP CSR)</h3><h3 id="3-6-2-物理内存保护和分页"><a href="#3-6-2-物理内存保护和分页" class="headerlink" title="3.6.2 物理内存保护和分页"></a>3.6.2 物理内存保护和分页</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RISC-V-指令集手册&quot;&gt;&lt;a href=&quot;#RISC-V-指令集手册&quot; class=&quot;headerlink&quot; title=&quot;RISC-V 指令集手册&quot;&gt;&lt;/a&gt;RISC-V 指令集手册&lt;/h1&gt;&lt;h3 id=&quot;第二卷：特权架构&quot;&gt;&lt;a href=&quot;#第二卷：特权架构&quot; class=&quot;headerlink&quot; title=&quot;第二卷：特权架构&quot;&gt;&lt;/a&gt;第二卷：特权架构&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;文档版本 20190608&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文档介绍了 RISC-V 特权架构。此版本为 20190608-Priv-MSU-Ratified，表示已批准的 machine 和 supervisor 模块的指令集。&lt;/p&gt;
&lt;p&gt;本文档包含以下版本的RISC-V ISA模块：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;Module&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Version&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Machine ISA&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1.11&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Ratified&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Supervisor ISA&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1.11&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Ratified&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="RISC-V" scheme="https://blog.strongwong.top/categories/RISC-V/"/>
    
    
      <category term="RISC-V" scheme="https://blog.strongwong.top/tags/RISC-V/"/>
    
      <category term="指令集" scheme="https://blog.strongwong.top/tags/%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    
      <category term="特权架构" scheme="https://blog.strongwong.top/tags/%E7%89%B9%E6%9D%83%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>wujian100 的 PWM 周期问题</title>
    <link href="https://blog.strongwong.top//posts/wujian100-%E7%9A%84-PWM-%E5%91%A8%E6%9C%9F%E9%97%AE%E9%A2%98.html"/>
    <id>https://blog.strongwong.top//posts/wujian100-的-PWM-周期问题.html</id>
    <published>2020-08-02T00:56:18.000Z</published>
    <updated>2020-08-02T03:11:20.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PWM-波形发生器实验结果"><a href="#PWM-波形发生器实验结果" class="headerlink" title="PWM 波形发生器实验结果"></a>PWM 波形发生器实验结果</h2><p>在 wujian100 的样例程序代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int32_t</span>  <span class="title">pwm_signal_test</span><span class="params">(<span class="keyword">uint32_t</span> pwm_idx, <span class="keyword">uint8_t</span> pwm_ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int32_t</span> ret;</span><br><span class="line">    <span class="keyword">pwm_handle_t</span> pwm_handle;</span><br><span class="line"></span><br><span class="line">    example_pin_pwm_init();</span><br><span class="line"></span><br><span class="line">    pwm_handle = csi_pwm_initialize(pwm_idx);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pwm_handle == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"csi_pwm_initialize error\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = csi_pwm_config(pwm_handle, pwm_ch, <span class="number">3000</span>, <span class="number">1500</span>); <span class="comment">//设置pwm周期3ms</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"csi_pwm_config error\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    csi_pwm_start(pwm_handle, pwm_ch);</span><br><span class="line">    mdelay(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    ret = csi_pwm_config(pwm_handle, pwm_ch, <span class="number">200</span>, <span class="number">150</span>); <span class="comment">//设置pwm周期200us</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"csi_pwm_config error\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mdelay(<span class="number">20</span>);</span><br><span class="line">    csi_pwm_stop(pwm_handle, pwm_ch);</span><br><span class="line"></span><br><span class="line">    csi_pwm_uninitialize(pwm_handle);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中有两句配置函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = csi_pwm_config(pwm_handle, pwm_ch, <span class="number">3000</span>, <span class="number">1500</span>); <span class="comment">//设置pwm周期3ms，占空比1500/3000</span></span><br><span class="line">ret = csi_pwm_config(pwm_handle, pwm_ch, <span class="number">200</span>, <span class="number">150</span>); <span class="comment">//设置pwm周期200us占空比50/200</span></span><br></pre></td></tr></table></figure><p>这两句都是用来配置 pwm 周期的，是实际测试中 pwm 周期和占空比都没有问题。但是如果设置 pwm 周期为 5ms 时，需要修改这句话为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret = csi_pwm_config(pwm_handle, pwm_ch, <span class="number">5000</span>, <span class="number">2500</span>);</span><br></pre></td></tr></table></figure><p>在实际测试过程中会发现，他的周期实际是 2.5ms 并不是预期的 5ms，如果设置为 100ms 会发现 pwm 的实际输出周期是 2.5ms。实际输出是有问题的。</p><a id="more"></a><h2 id="查找问题"><a href="#查找问题" class="headerlink" title="查找问题"></a>查找问题</h2><h3 id="检查软件问题"><a href="#检查软件问题" class="headerlink" title="检查软件问题"></a>检查软件问题</h3><p>跟踪 <code>csi_pwm_config</code>  函数，发现在函数中会根据设置的周期进行时钟配置：<br><code>drv_pwm_config_clockdiv(handle, channel, cnt_div[count_div]);</code> 由于 pwm 计数器是 16 位，所以软件会根据设置的周期值计算出要配置的数值，如果该数值超过 0xffff，就会设置分频系数，直到需要计数的值小于 0xffff 为止。</p><p>继续跟踪<br><code>drv_pwm_config_clockdiv(handle, channel, cnt_div[count_div]);</code><br>我们可以看到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drv_pwm_config_clockdiv</span><span class="params">(<span class="keyword">pwm_handle_t</span> handle, <span class="keyword">uint8_t</span> channel, <span class="keyword">uint32_t</span> div)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PWM_NULL_PARAM_CHK_NORETVAL(handle);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">wj_pwm_priv_t</span> *pwm_priv = handle;</span><br><span class="line">    <span class="keyword">wj_pwm_reg_t</span> *addr = (<span class="keyword">wj_pwm_reg_t</span> *)(pwm_priv-&gt;base);</span><br><span class="line">    addr-&gt;PWMCFG &amp;= ~(<span class="number">7</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (div) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            addr-&gt;PWMCFG &amp;= ~(PWM_CFG_CNTDIV_EN);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            addr-&gt;PWMCFG |= PWM_CFG_CNTDIV_EN | PWM_CFG_CNTDIV_2;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            addr-&gt;PWMCFG |= PWM_CFG_CNTDIV_EN | PWM_CFG_CNTDIV_5;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    ........</span><br></pre></td></tr></table></figure><p>这个函数会对寄存器 PWMCFG 的第 25 位到第 27 位进行了赋值操作，查找数据手册发现</p><p><img src="https://verimake.com/uploads/images/202007/27/48/drATAcOLiI.png" alt="PWMCFG"></p><p>第 28 位是分频使能，第 26 到 24 位是分频系数设置。</p><p>在 csi 库里提供了一个函数可以读取这几位的值来查看分频的设置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  \brief       get pwm clock division.</span></span><br><span class="line"><span class="comment">  \param[in]   handle   pwm handle to operate.</span></span><br><span class="line"><span class="comment">  \param[in]   channel  channel num.</span></span><br><span class="line"><span class="comment">  \return      div      clock div.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint33_t</span> <span class="title">drv_pwm_get_clockdiv</span><span class="params">(<span class="keyword">pwm_handle_t</span> handle, <span class="keyword">uint8_t</span> channel)</span></span></span><br></pre></td></tr></table></figure><p>通过这个函数可以得到 PWMCFG 寄存器里的分频系数 cntdiv 的值。通过实验我们发现分频系数的值配置到寄存器里了，并且读回来的值也是配置的值。</p><p><strong>总结：所以软件上对于 pwm 的配置是没有问题的，配置 pwm 周期不是预期值不是软件问题。</strong></p><h3 id="检查硬件问题"><a href="#检查硬件问题" class="headerlink" title="检查硬件问题"></a>检查硬件问题</h3><p>排除软件问题，那么出现 pwm 周期非预期值他的问题就只可能是 pwm 外设在设计时的硬件问题了。我们查找 wujian100 内部设计的问题，为了方便查看我们使用 verdi 来查看跟踪模块设计，这样效率高。</p><p>首先第一步配置 wujian100 工作路径：在 linux 系统中利用 source 将 wujian100 工作目录添加到系统环境变量。</p><p>第二步 tb 目录下的 tb_file.list 文件，这个文件里加载的顶层文件是 wujian100_open_top.v，并不是我们生成bit文件时的 wujian100_open_fpga_top.v 文件（该文件在 fpga 目录下），我们首先赋值 fpga 目录下的 wujian100_open_fpga_top.v 到 soc 目录下。修改文件 tb_file.list 里的第 3 行，将 wujian100_open_top.v 替换为 wujian100_open_fpga_top.v</p><p>第三步进入 tb 目录。使用 verdi -f tb_file.list 打开软件 verdi 并加载 tb_file.list 里列出的文件。（前提是你的 linux 系统安装了 verdi 软件）。</p><p>以上三步正确就会打开 wujian100 设计的模块图。</p><p><img src="https://verimake.com/uploads/images/202007/27/48/paS1BXFlZo.png" alt="wujian100 top"></p><p>查看选中打开该文件，查看文件名是不是wujian100_open_fpga_top.v</p><p><img src="https://verimake.com/uploads/images/202007/27/48/1upWxy2aYy.png" alt="wujian100_open_fpga_top.v"></p><p>然后打开原理图。点击如图按钮：</p><p><img src="https://verimake.com/uploads/images/202007/27/48/I1AGOAB2Pp.png" alt="原理图">))</p><p>打开 wujian100 的设计如图：</p><p><img src="https://verimake.com/uploads/images/202007/27/48/uAD9prEoAg.png" alt="wujian100"></p><p>接下来可以按文件查找相应模块，也可以双击原理图上的模块一层一层进入。</p><p>pwm 模块位于 PDU 下的 ahb1 上。一层一层进入查看下，定位到 pwm：</p><p><img src="https://verimake.com/uploads/images/202007/27/48/b4JYC9MGas.png" alt="pwm_sec_top"></p><p>继续进入 pwm_sec_top ,再进入 pwm 就是 pwm 外设的内部了。</p><p><img src="https://verimake.com/uploads/images/202007/27/48/tlqqmNBeeZ.png" alt="pwm_ctrl &amp; pwm_aphif"></p><p>在这里有两部分，一个是 aphif 负责总线，ctrl 就是 pwm 的实际实现了。<br>进入 pwm_ctrl:</p><p><img src="https://verimake.com/uploads/images/202007/27/48/TUl7lfX16U.png" alt="pwm_ctrl"></p><p>我们发现有六个 pwm_gen。和数据手册上介绍的一样。</p><p><img src="https://verimake.com/uploads/images/202007/27/48/2WyAXpAnmE.png" alt="6 pwm_gen"></p><p>我们现在定位到左下角，放大看，这部分就是pwm的时钟部分：</p><p><img src="https://verimake.com/uploads/images/202007/28/48/5Z0ZnHCJkP.png" alt="pwm_gen"><br>我们在 view 菜单下打开端口名称显示和模块内部端口名称显示。在图上我们可以看到 cntdiv[3:0] 控制了分频系数，分频系数会通过分频器（图上的 f）对 pclk 系统时钟进行分频，然后通过 gated_clk_cell 控制时钟的通过然后通过 clk_mux2 选择器送到后续的 pwm 发生器上作为发生器的时钟。我们双击模块就能够查看各自对应的 verilog 代码。我们在逐个查找时发现 gated_clk_cell（如下图）它的结构有问题：</p><p><img src="https://verimake.com/uploads/images/202007/28/48/TKowhWEMnu.png" alt="gated_clk_cell"></p><p>双击它，查看它内部结构：</p><p><img src="https://verimake.com/uploads/images/202007/28/48/8FjG7fLa9J.png" alt="gated_clk_cell"></p><p>如图这样一个很奇怪的结构，<strong>直接就是 clk_in 输入，直接送到 clk_out 输出上去了</strong>。结合上一张图我们可以看出 clk_in 就是 pclk 系统时钟，这样导致前面的分频没有任何作用，pclk 将会直接送到 pwm 发生器上作为 pwm 的时钟。这样不论你有没有设置分频，pwm 就只有系统时钟 pclk（21M)。这样 pwm 的信号周期无法修改。</p><p>反过来推到下，我们之前的实验设置周期 6ms 是得到的结果是 2.5ms，其实我们的分频系数是 2，由于时钟没有分频，导致我们的输出周期是 2.5ms，如果分频成功我们的周期就会是 2.5*2=5ms，同理，10ms 时的分频系数是 4。有兴趣的可以根据 sdk 提供的代码推到下，也可以用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint33_t</span> <span class="title">drv_pwm_get_clockdiv</span><span class="params">(<span class="keyword">pwm_handle_t</span> handle, <span class="keyword">uint8_t</span> channel)</span></span></span><br></pre></td></tr></table></figure><p>这个函数查看分频系数，然后分析下。</p><p>我们直到了问题出在模块 gated_clk_cell 上了，我们定位到模块对应的 verilog 文件，查找到代码位于 pwm.v 文件的 4186 行例化了一个叫做 gated_clk_cell 的模块，我们双击 gated_clk_cell 进入内部，双击模块定位到了 common.v 文件的 66 行，代码如下：</p><figure class="highlight v"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="meta-keyword">ifdef</span> FPGA</span></span><br><span class="line"><span class="keyword">assign</span> clk_out = clk_in;</span><br><span class="line"><span class="meta">`<span class="meta-keyword">else</span></span></span><br><span class="line">Standard_Cell_CLK_GATE x_gated_clk_cell(</span><br><span class="line">             <span class="variable">.CK</span>  (clk_in),</span><br><span class="line">             <span class="variable">.SE</span>  (SE),</span><br><span class="line">             <span class="variable">.EN</span>   (clk_en_bf_latch),</span><br><span class="line">             <span class="variable">.Q</span>   (clk_out)</span><br><span class="line">             );</span><br><span class="line"><span class="meta">`<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这下一目了然了，由于定义了 FPGA 这个量，导致 assign clk_out=clk_in; 而下面的模块没有实现，所以最主要原因就是定义了 FPGA 这个量，这个量在哪里定义的呢，就是在 wujian100_open_fpga_top.v 这个文件的最开头定义的（第 37 行）：</p><p><img src="https://verimake.com/uploads/images/202007/28/48/LRN8UJPFgJ.png" alt="wujian100_open_fpga_top.v"></p><p>将这行用 // 注释，然后在 verdi 中点击 file 下选择 reload 设计，重新加载文件，我们再查看 geted_clk_cell 模块，得到如下图：</p><p><img src="https://verimake.com/uploads/images/202007/28/48/1czH3wBd8y.png" alt="geted_clk_cell 改"></p><p>这样 clk_in 不会直接送到 clk_out 输出了。</p><p>修改后用 vivado 重新分析综合生成 bit，下载到开发板上，我们发现输出的 pwm 的周期输出正确了。6ms，10ms 的周期也能生成了。</p><p>这里有一点注意，修改后源码用 vivado 建立工程，用 vivado 去 Synthesis，不要用官方方法，用 Synplify_pro 去 Synthesis。不然生成的 bit 下载开发板，输出的 pwm 周期会小一半。例如 11ms 周期只能输出 5ms。有兴趣的可以试下。</p><h2 id="后续问题"><a href="#后续问题" class="headerlink" title="后续问题"></a>后续问题</h2><p>查看这张结构图</p><p><img src="https://verimake.com/uploads/images/202007/27/48/TUl7lfX16U.png" alt="PWM"></p><p>仔细查看，不难发现，它的六个 pwm_gen 都是用的一个时钟源，都是 pclk 通过分频之后的时钟直接连接在了每一个 pwn_gen 的时钟上，六个时钟都是一个源，那么就会造成一个问题，他的六组 pwm 发生器只能同时产生一个频率（周期）的信号，例如 ch1 产生了 5ms，那个这时 ch2 也只能产生 5ms，没法产生 10ms 周期的 pwm，所有通道的周期都会被最后那个设置改成同一个频率，就是因为他们的时钟是同一个。这将怎么解决，有一个思路，就是每一个 pwm_gen 有各自的分频模块。怎么解决下一篇介绍。</p><p>本文转自 Verimake 论坛：<br><a href="https://verimake.com/topics/122" target="_blank" rel="noopener">https://verimake.com/topics/122</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PWM-波形发生器实验结果&quot;&gt;&lt;a href=&quot;#PWM-波形发生器实验结果&quot; class=&quot;headerlink&quot; title=&quot;PWM 波形发生器实验结果&quot;&gt;&lt;/a&gt;PWM 波形发生器实验结果&lt;/h2&gt;&lt;p&gt;在 wujian100 的样例程序代码如下：&lt;/p&gt;
&lt;!--�19--&gt;

&lt;p&gt;其中有两句配置函数&lt;/p&gt;
&lt;!--�20--&gt;

&lt;p&gt;这两句都是用来配置 pwm 周期的，是实际测试中 pwm 周期和占空比都没有问题。但是如果设置 pwm 周期为 5ms 时，需要修改这句话为：&lt;/p&gt;
&lt;!--�21--&gt;

&lt;p&gt;在实际测试过程中会发现，他的周期实际是 2.5ms 并不是预期的 5ms，如果设置为 100ms 会发现 pwm 的实际输出周期是 2.5ms。实际输出是有问题的。&lt;/p&gt;
    
    </summary>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/categories/IC-Design/"/>
    
      <category term="RISC-V" scheme="https://blog.strongwong.top/categories/IC-Design/RISC-V/"/>
    
    
      <category term="Verilog" scheme="https://blog.strongwong.top/tags/Verilog/"/>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/tags/IC-Design/"/>
    
      <category term="RISC-V" scheme="https://blog.strongwong.top/tags/RISC-V/"/>
    
      <category term="wujian100" scheme="https://blog.strongwong.top/tags/wujian100/"/>
    
  </entry>
  
  <entry>
    <title>用 Kindle 做树莓派的显示屏</title>
    <link href="https://blog.strongwong.top//posts/%E7%94%A8-Kindle-%E5%81%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E6%98%BE%E7%A4%BA%E5%B1%8F.html"/>
    <id>https://blog.strongwong.top//posts/用-Kindle-做树莓派的显示屏.html</id>
    <published>2020-05-24T09:28:08.000Z</published>
    <updated>2020-05-24T10:22:59.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、工具"><a href="#一、工具" class="headerlink" title="一、工具"></a>一、工具</h2><ol><li>树莓派3b 一台</li><li>Kindle PaperWhite 1 一台</li><li>无线键鼠一套</li><li>无线路由器 or USB 数据线</li></ol><a id="more"></a><h2 id="二、Kindle-越狱"><a href="#二、Kindle-越狱" class="headerlink" title="二、Kindle 越狱"></a>二、Kindle 越狱</h2><p>首先，按照网上的教程把 Kindle 越狱。但是我手上这台 kindle 是 <code>5.6.1.1</code> 的最高版本了。不能直接越狱，需要先把其刷机，强行固件降级到 <code>5.4.4</code> 版本才能越狱。越狱前注意事项，建议遵守：</p><ul><li>确认 Kindle 已绑定亚马逊账号；</li><li>确认 Kindle 电量处于充满状态；</li><li>确认 Kindle 的特惠广告已关闭；</li><li>确认 Kindle 已停用 设备密码和家长监护设置；</li><li>确认 Kindle 已开启飞行模式处于离线状态。</li></ul><h3 id="2-1-固件降级"><a href="#2-1-固件降级" class="headerlink" title="2.1 固件降级"></a>2.1 固件降级</h3><p>如果你的 KPW1 也和我一样是高于 <code>5.4.4</code> 的版本，需要先把固件降级到 <code>5.4.4</code>。可以前往书伴的 『<a href="https://bookfere.com/update" target="_blank" rel="noopener">固件大全</a>』 下载 <code>5.4.4</code> 版本固件，然后把 Kindle 连接到电脑直到出现 Kindle 磁盘。把下载到的固件文件 <code>update_kindle_5.4.4.bin</code> 放到 Kindle 的根目录。<strong>不要拔出数据线，直接长按电源键直到开始更新。</strong> 没有问题继续下一步。</p><h3 id="2-2-开始越狱"><a href="#2-2-开始越狱" class="headerlink" title="2.2 开始越狱"></a>2.2 开始越狱</h3><p>下载越狱文件『<a href="https://pan.baidu.com/s/1o86ja8i" target="_blank" rel="noopener">kindle-jailbreak-1.14.N.zip</a>』。解压得到压缩包 kindle-5.4-jailbreak.zip，将其再次解压，得到一个名为 kindle-5.4-jailbreak 的文件夹。文件夹内有如下所示七个文件：</p><ul><li>bridge.conf</li><li>bridge.sh</li><li>developer.keystore</li><li>gandalf</li><li>jb.sh</li><li>json_simple-1.1.jar</li><li>Update_jb_$(cd mnt &amp;&amp; cd us &amp;&amp; sh jb.sh).bin</li></ul><p>把这些文件拷贝到 Kindle 根目录，安全弹出磁盘。在 Kindle 中依次点击『 <code>首页 -&gt; 菜单（屏幕右上角）-&gt; 设置 -&gt; 菜单（屏幕右上角）-&gt; 更新您的 Kindle</code>』。点击菜单后系统不会重启也不会有其它任何反应，在这期间不要有任何操作，直到屏幕下方出现 『 <strong>** JAILBREAK **</strong> 』的字样时，表示越狱已成功。</p><p><img src="https://s1.ax1x.com/2020/05/24/tS3hOU.jpg" alt="越狱"></p><h3 id="2-3-升级固件"><a href="#2-3-升级固件" class="headerlink" title="2.3 升级固件"></a>2.3 升级固件</h3><p>最后前往书伴的 『<a href="https://bookfere.com/update" target="_blank" rel="noopener">固件大全</a>』下载最新的 5.6.1.1 版本固件，将固件文件放到 Kindle 根目录，依次点击菜单『 <code>首页 -&gt; 菜单（屏幕右上角）-&gt; 设置 -&gt; 菜单（屏幕右上角）-&gt; 更新您的 Kindle</code>』。等待更新完毕，便得到一个有着最新版本固件的越狱了的 Kindle 系统，你可以进行安装MRPI、KUAL、kterm 、USBNetwork 等插件来完成接下来的操作。</p><h2 id="三、安装插件"><a href="#三、安装插件" class="headerlink" title="三、安装插件"></a>三、安装插件</h2><h3 id="3-1-安装-MobileRead-Package-Installer-MRPI-——-插件安装器"><a href="#3-1-安装-MobileRead-Package-Installer-MRPI-——-插件安装器" class="headerlink" title="3.1 安装 MobileRead Package Installer (MRPI) —— 插件安装器"></a>3.1 安装 MobileRead Package Installer (MRPI) —— 插件安装器</h3><ul><li>下载 MRPI：<a href="https://pan.baidu.com/s/1H3Df7hh9yptXgtS28uzv1Q" target="_blank" rel="noopener">百度网盘</a>【提取码：xwbg】</li><li>官方指南：<a href="http://www.mobileread.com/forums/showthread.php?t=251143" target="_blank" rel="noopener">KUAL: Kindle Unified Application Launcher (v 2.6)</a></li></ul><p>★ 安装步骤：</p><blockquote><ol><li>用 USB 数据线将 Kindle 连接到电脑上，直到出现 Kindle 磁盘；</li><li>解压缩下载到的 kual-mrinstaller-1.7.N-xxx.tar.xz 得到一个文件夹；</li><li>把文件夹内的 extensions 和 mrpackages 拷贝到 Kindle 根目录下。</li></ol></blockquote><h3 id="3-2-安装-KUAL-——-插件程序启动器"><a href="#3-2-安装-KUAL-——-插件程序启动器" class="headerlink" title="3.2 安装 KUAL —— 插件程序启动器"></a>3.2 安装 KUAL —— 插件程序启动器</h3><p>KUAL (即 Kindle Unified Application Launcher)，是一款插件启动器。安装KUAL之后，你可以下载或自己编写插件并通过KUAL启动。</p><ul><li>下载 KUAL：<a href="https://pan.baidu.com/s/1DadoxnlX7u3pjVjrntt_Yw" target="_blank" rel="noopener">百度网盘</a>【提取码：4kb1】</li><li>官方指南：<a href="http://www.mobileread.com/forums/showthread.php?t=203326" target="_blank" rel="noopener">KUAL: Kindle Unified Application Launcher (v 2.6)</a></li></ul><p>★ 安装步骤：</p><blockquote><ol><li>用 USB 数据线将 Kindle 连接到电脑上，直到出现 Kindle 磁盘；</li><li>解压缩下载到的 KUAL-v2.x-xxx.tar.xz 得到一个文件夹；</li><li>在文件夹中找到 KUAL-KDK-2.0.azw2 拷贝到 Kindle 的 Documents 文件夹中；</li><li>弹出 Kindle 磁盘，打开 Kindle，可以看到一个名 Kindle LAUNCHER 的文档，正常情况下，点开此图标应显示菜单。</li></ol></blockquote><h3 id="3-3-安装-Kterm"><a href="#3-3-安装-Kterm" class="headerlink" title="3.3 安装 Kterm"></a>3.3 安装 Kterm</h3><p><code>kterm</code> 是 Kindle 的终端控制台，安装之后可以在 Kindle 进行 shell 的交互操作。</p><ul><li>下载 Kterm: <a href="https://github.com/bfabiszewski/kterm/releases/download/v2.6/kterm-kindle-2.6.zip" target="_blank" rel="noopener">官方页面</a> | <a href="http://pan.baidu.com/s/1c0ja8hE" target="_blank" rel="noopener">百度网盘</a></li><li>官方说明： <a href="https://www.fabiszewski.net/kindle-terminal/" target="_blank" rel="noopener">https://www.fabiszewski.net/kindle-terminal/</a></li></ul><p>★ 安装步骤：</p><blockquote><ol><li>首先确保安装好了 <code>KUAL</code> 和 <code>MRPI</code>;</li><li>下载 kterm-kindle-2.6.zip，解压得到 <code>Kterm</code> 文件夹；</li><li>将 Kterm 整个文件夹，复制到 Kindle 根目录下的 extensions 文件夹中；弹出 kindle，重启即可。</li></ol></blockquote><p>点击 Kindle 中的 <code>Kindle LAUNCHER -&gt; Kterm</code>，即可打开 shell 使用。如果 Kindle 和树莓派连接到了同一个 wifi 下的话，就可以直接通过 Kterm 窗口使用 SSH 登录到树莓派使用了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh pi@10.0.0.31    <span class="comment"># ssh $user@ip</span></span><br></pre></td></tr></table></figure><p>接着输入账户密码就可以登录了。</p><p><img src="https://s1.ax1x.com/2020/05/24/tSZ8CF.png" alt="Kindle Shell"></p><h3 id="3-4-安装-USBNetwork-Hack-–-无线管理-Kindle"><a href="#3-4-安装-USBNetwork-Hack-–-无线管理-Kindle" class="headerlink" title="3.4 安装 USBNetwork Hack – 无线管理 Kindle"></a>3.4 安装 USBNetwork Hack – 无线管理 Kindle</h3><p>USBNetwork 是一款 Kindle 插件，它可以让我们通过 WiFi 直接连接到 Kindle 并对其进行传送文件、管理等操作。可以通过 USB 连接 Kindle 和树莓派，通过把 Kindle 当成一块 USB 网卡，这样 Kindle 就可以和树莓派建立物理连接了。</p><ul><li>下载 USBNetwork：<a href="http://www.mobileread.com/forums/showthread.php?t=225030" target="_blank" rel="noopener">官方页面</a> | <a href="https://pan.baidu.com/s/1qAgVhwfLXY2Z6VyHh5PCEw" target="_blank" rel="noopener">百度网盘</a>【提取码：9tgy】</li><li>官方指南：<a href="http://www.mobileread.com/forums/showthread.php?t=186645" target="_blank" rel="noopener">K5/PW USBNetwork</a></li></ul><p>★ 安装步骤：</p><blockquote><ol><li>首先确保安装了 <code>KUAL</code> 及其插件 <code>MRPI</code>；</li><li>用 USB 数据线将 Kindle 连接到电脑上，直到出现 Kindle 磁盘；</li><li>解压缩下载到的 <code>kindle-usbnet-0.22.N-xxx.tar.xz</code> 压缩包，得到一个文件夹；</li><li>把文件夹内的 <code>Update_usbnet_0.22.N_install_touch_pw.bin</code> 拷贝到 Kindle 里 mrpackages 文件夹中；</li><li>弹出 Kindle 磁盘，点击 Kindle 中的 <code>Kindle LAUNCHER</code>，依次点击 <code>Helper -&gt; Install MR Packages</code>；</li><li>耐心等待 usbnet 安装，直到安装完成后 Kindle 重启完毕；</li><li>重启完成后，重新用 USB 数据线将 Kindle 连接到电脑上，直到出现 Kindle 磁盘；</li><li>在 Kindle 根目录可以看到『 usbnet 』文件夹，把此文件夹里名为『 DISABLED_auto 』的文件名改为『 auto 』；</li><li>然后在此文件夹里的『 etc 』文件夹中找到『 config 』，并用纯文本编辑器（不建议使用记事本，建议使用 VS Code 等代码编辑器）打开。找到『 USE_WIFI 』改为 <code>true</code>，『 USE_WIFI_SSHD_ONLY 』改为 <code>false</code> ，保存并关闭；</li><li>这样就可以通过 <code>WIFI</code> 和 <code>USBNet</code> 登录 Kindle 了。完成这些步骤之后，点击弹出/移除设备，断开 Kindle 与电脑的连接，重启 Kindle。</li></ol></blockquote><h2 id="四、-配置树莓派，连接-Kindle"><a href="#四、-配置树莓派，连接-Kindle" class="headerlink" title="四、 配置树莓派，连接 Kindle"></a>四、 配置树莓派，连接 Kindle</h2><p>连接 Kindle 和 树莓派有两种方式，一种是把 Kindle 和树莓派连接到同一个 WIFI；另一种就是让 Kindle 作为 USB 网卡，通过 USBNet 的方式用 USB 数据线物理连接树莓派。但是想让 Kindle 作为屏幕使用，其实就是通过 screen、tmux 等软件共享屏幕。我这里安装的是 tmux。</p><h3 id="4-1-安装-tmux"><a href="#4-1-安装-tmux" class="headerlink" title="4.1 安装 tmux"></a>4.1 安装 tmux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install tmux</span><br></pre></td></tr></table></figure><p>在 <code>~/.bashrc</code> 文件最后添加一段脚本，自动运行 tmux。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start tmux on console(not ssh)</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">command</span> -v tmux&gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$(tty)</span>"</span> =~ /dev/tty ]] &amp;&amp; [ -z <span class="string">"<span class="variable">$TMUX</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">          <span class="comment"># We're on a TTY and *not* in tmux</span></span><br><span class="line">          <span class="built_in">exec</span> tmux -u</span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="4-2-通过-WIFI-连接树莓派"><a href="#4-2-通过-WIFI-连接树莓派" class="headerlink" title="4.2 通过 WIFI 连接树莓派"></a>4.2 通过 WIFI 连接树莓派</h3><p>点击 Kindle 中的 <code>Kindle LAUNCHER -&gt; Kterm</code>,通过 SSH 连接树莓派；在这之前你需要先查看一下树莓派的 IP 地址是多少。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh pi@10.0.0.31 -t <span class="string">"tmux attach"</span></span><br></pre></td></tr></table></figure><p>接着输入账户密码就可以登录了。</p><h3 id="4-3-通过-USBNet-连接树莓派"><a href="#4-3-通过-USBNet-连接树莓派" class="headerlink" title="4.3 通过 USBNet 连接树莓派"></a>4.3 通过 USBNet 连接树莓派</h3><p>首先打开  <code>Kindle LAUNCHER -&gt; USBNetwork -&gt; Toggle USBNetwork</code>，将模式切换到 <code>USB Network</code> 模式；当前状态可点击 <code>USBNetwork Status</code> 查看，成功的话提示USBNetwork enabled。<br>可以打开 <code>kterm</code> 使用 <code>ifconfig</code> 命令查看网卡的地址。注意这里默认是 <code>192.168.15.x</code> 网段，和网上常见的 <code>192.168.2.x</code> 网段不同。这个配置是可以在 <code>usbnet</code> 的 <code>config</code> 文件修改的。</p><p>接下来将树莓派和 kindle 用 USB 数据线连接，输入 <code>lsusb</code> 命令，，如果看到 <code>Linux-USB Ethernet/RNDIS Gadget</code> 这样的设备说明连接成功。</p><p>编辑 <code>/etc/network/interfaces</code> 添加网卡配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/network/interfaces</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Kindle USBNet</span></span><br><span class="line">allow-hotplug usb0</span><br><span class="line">mapping hotplug</span><br><span class="line">script grep</span><br><span class="line">map usb0</span><br><span class="line">iface usb0 inet static</span><br><span class="line">address 192.168.15.1</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">broadcast 192.168.15.255</span><br><span class="line">up iptables -I INPUT 1 -s 192.168.15.1 -j ACCEPT</span><br></pre></td></tr></table></figure><p>重启树莓派，输入 <code>ifconfig usb0</code> 检查网卡是否连接成功，连接成功会显示一个 usb0 网卡设备。<br>这时你可以 <code>ping 192.168.15.244</code>，检查网络是否通畅。一切 ok 的话就就可以启动 Kterm 连接树莓派了。<br>打开 <code>Kterm</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh  pi@192.168.15.1 -t <span class="string">"tmux attach"</span></span><br></pre></td></tr></table></figure><p>接着输入账户密码就可以登录了。</p><p><img src="https://s1.ax1x.com/2020/05/24/tSeEa6.png" alt="同屏"></p><p>最后，如果你想要横屏，那么你就在打开 Kterm 之前，随便打开一本书，切换成横屏即可。切换回竖屏同理。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.shuyz.com/posts/phicomm_n1_with_kindle_as_screen/" target="_blank" rel="noopener">https://www.shuyz.com/posts/phicomm_n1_with_kindle_as_screen/</a><br><a href="https://www.fabiszewski.net/kindle-terminal/" target="_blank" rel="noopener">https://www.fabiszewski.net/kindle-terminal/</a><br><a href="https://bookfere.com/post/512.html" target="_blank" rel="noopener">https://bookfere.com/post/512.html</a><br><a href="http://blog.yarm.is/kindleberry-pi-zero-w.html" target="_blank" rel="noopener">http://blog.yarm.is/kindleberry-pi-zero-w.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、工具&quot;&gt;&lt;a href=&quot;#一、工具&quot; class=&quot;headerlink&quot; title=&quot;一、工具&quot;&gt;&lt;/a&gt;一、工具&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;树莓派3b 一台&lt;/li&gt;
&lt;li&gt;Kindle PaperWhite 1 一台&lt;/li&gt;
&lt;li&gt;无线键鼠一套&lt;/li&gt;
&lt;li&gt;无线路由器 or USB 数据线&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="折腾" scheme="https://blog.strongwong.top/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="树莓派" scheme="https://blog.strongwong.top/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="Kindle" scheme="https://blog.strongwong.top/tags/Kindle/"/>
    
  </entry>
  
  <entry>
    <title>关于 RISC-V 架构下 RTOS 的一些知识</title>
    <link href="https://blog.strongwong.top//posts/%E5%85%B3%E4%BA%8E-RISC-V-%E6%9E%B6%E6%9E%84%E4%B8%8B-RTOS-%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86.html"/>
    <id>https://blog.strongwong.top//posts/关于-RISC-V-架构下-RTOS-的一些知识.html</id>
    <published>2020-04-07T08:12:08.000Z</published>
    <updated>2020-04-09T09:07:01.217Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>之前的 blog 有介绍了一些，wujian100 的一些知识，包括综合、测试等。最近就想在 wujian100 上看看能不能移植一下比较常见的一些 <strong><code>RTOS</code></strong> (<strong>Real Time Operating System,实时操作系统</strong>)上去试试，比如 Free RTOS、RT-Thread等。结果发现这里还是有一些坑的。虽然 FreeRTOS 和 RTT 都支持 RISC-V 的芯片了，但是 wujian100 这个是 RISC-V “E” 基础架构，也就是 <strong><code>RV32E</code></strong> 就是 <strong><code>标准嵌入式扩展</code></strong> 指令集（这个版本降低了核心的开销，CPU 寄存器裁剪了一半，为 16 个）。但是 FreeRTOS 和 RTT 目前支持的版本都是 32 个寄存器的，对于任务或者说线程的上下文切换时对栈帧的操作还是有一些差异。然后呢也想对比一下 ARM 架构和 RISC-V 架构下嵌入式实时操作系统处理的一些区别，这里呢就想做一些的简单记录。</p><a id="more"></a><h2 id="ARM-和-RISC-V-架构的区别"><a href="#ARM-和-RISC-V-架构的区别" class="headerlink" title="ARM 和 RISC-V 架构的区别"></a>ARM 和 RISC-V 架构的区别</h2><p>由于我是先学的 ARM 也相对了解一些，所以做什么总是想拿来和 ARM 对比一下，看看能不能套在 ARM 上，这也对自己理解也有一些帮助。缺点就是会产生一些先入为主的观念。</p><p>一个最简单的 RTOS 应该至少要实现一个多任务管理的功能，所以 RTOS 也可以叫实时多任务操作系统。那么一个简单的 RTOS 的核心就是怎么处理多任务或者说多线程之间的切换，这里我们也叫做上下文切换，所以上下文切换机制的实现就非常重要，这就要牵扯到不同架构的 CPU 会有不同的处理方式。</p><h3 id="ARM-架构下-RTOS-的一般处理过程"><a href="#ARM-架构下-RTOS-的一般处理过程" class="headerlink" title="ARM 架构下 RTOS 的一般处理过程"></a>ARM 架构下 RTOS 的一般处理过程</h3><p>这里以 Cortex-M3 为例，在 ARM 架构中有一组 <strong><code>特殊功能寄存器组</code></strong>，很多时候就是专门留给 OS 使用的。其中由 <kbd><strong>CONTROL[0:1]</strong></kbd> 寄存器来定义 CPU 的特权等级。这里就要提到在 ARM 架构中的双堆栈机制，在 CM3 内核中支持两个堆栈，一个是 MSP（主堆栈指针）指向的主堆栈和 PSP（线程堆栈指针）指向的线程堆栈。通过配置 CONTROL 寄存器的两个位来选择特权级别和使用不同的堆栈指针（还有一个骚操作就是从异常返回时修改 LR 的 <code>bit1</code> 和 <code>bit2</code> 也可以切换模式和堆栈，我们可以在很多开源的 RTOS 中见到）。这样通过这两个寄存器的配置就可以分开对待用户程序和系统程序，避免因用户级程序的问题对系统造成危害。同时在出入异常处理时这两个堆栈指针是通过硬件自动切换的，对于现场的保存就不需要软件来处理了。而且在 Handler 或者说异常中只能使用 MSP（主堆栈指针）。</p><table><thead><tr><th align="center">CONTROL[0]</th><th align="center">CONTROL[1]</th><th align="center">组合</th><th align="center">模式</th></tr></thead><tbody><tr><td align="center">特权选择</td><td align="center">堆栈指针选择</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">特权级+MSP</td><td align="center">Handler 模式和 Kernel(OS)</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">特权级+PSP</td><td align="center">线程模式</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">用户级+MSP</td><td align="center">错误用法</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">用户级+PSP</td><td align="center">线程模式</td></tr></tbody></table><p>由于有了这样的机制，在 RTOS 中对于任务切换就带来了很多便利，通常情况下都是通过 <strong>SVCall(即 SVC，System service Call,系统服务调用)</strong>和 <strong>PendSV(Pendable request for system serivce,可挂起系统调用)</strong>这两个异常来完成系统特权和任务上下文的切换。当然也可以先不考虑特权模式和用户模式，那么就可以仅通过 PendSV 异常来完成任务上下文切换即可。这里可以参考一下 FreeRTOS 的处理代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SVCHandler 进行任务切换</span></span><br><span class="line"><span class="function">__asm <span class="keyword">void</span> <span class="title">vPortSVCHandler</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">extern</span> pxCurrentTCB;    <span class="comment">// 外部参数，当前任务控制块指针</span></span><br><span class="line">    </span><br><span class="line">    PRESERVE8</span><br><span class="line">    </span><br><span class="line">    ldr r3, = pxCurrentTCB  <span class="comment">// 加载 pxCurrentTCB 的地址到 r3</span></span><br><span class="line">    ldr r1, [r3]            <span class="comment">// 加载 pxCurrentTCB 到 r1</span></span><br><span class="line">    ldr r0, [r1]            <span class="comment">// 加载 pxCurrentTCB 指向的值到 r0, 即当前第一个任务的任务栈栈顶指针</span></span><br><span class="line">    ldmia r0!, &#123;r4-r11&#125;     <span class="comment">// 以 r0 为基地址，将栈里面的内容加载到 r4-r11 寄存器，同时 r0 会递增</span></span><br><span class="line">    msr psp, r0             <span class="comment">// 将 r0 的值，即任务栈指针更新到 psp</span></span><br><span class="line">    isb</span><br><span class="line">    mov r0, #<span class="number">0</span>              <span class="comment">// 将 r0 的值，设置为 0</span></span><br><span class="line">    msr basepri, r0         <span class="comment">// 将 basepri 寄存器设置为0，即所有的中断都没有被屏蔽</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//骚操作</span></span><br><span class="line">    orr r14, #<span class="number">0x0d</span>          <span class="comment">// 当从 SVC 中断服务退出前，通过向 R14 最后4位按位或上0x0d,</span></span><br><span class="line">                            <span class="comment">// 使得硬件在退出时，使用进程堆栈指针 PSP 完成出栈操作并返回后进入线程模式、返回 Thumb 状态</span></span><br><span class="line">                            <span class="comment">//  r14 的 bit1 : 0 PSP 1 MSP；bit2: 0 特权模式  1 用户模式</span></span><br><span class="line">    </span><br><span class="line">    bx r14                  <span class="comment">// 异常返回，这个时候栈中的剩下内容将会自动加载到 CPU 寄存器</span></span><br><span class="line">                            <span class="comment">// xPSR,PC(任务入口地址),R14,R12,R3,R2,R1,R0(任务形参) 同时 PSP 的值也将更新，即指向任务栈的栈顶</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__asm <span class="keyword">void</span> <span class="title">xPortPendSVHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">extern</span> pxCurrentTCB;        <span class="comment">// 外部参数，当前任务控制块指针</span></span><br><span class="line">    <span class="keyword">extern</span> vTaskSwitchContext;  <span class="comment">// 外部函数，当前任务切换函数</span></span><br><span class="line">    </span><br><span class="line">    PRESERVE8</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 当进入 PendSVC Handler 时，上一个任务运行环境，即：</span></span><br><span class="line">    <span class="comment">// xPSR,PC(任务入口地址),R14,R12,R3,R2,R1,R0(任务形参),这些将自动保存到任务栈中，剩下的r4-r11需要手动保存</span></span><br><span class="line">    <span class="comment">// 获取任务栈指针到 r0</span></span><br><span class="line">    mrs r0, psp</span><br><span class="line">    isb</span><br><span class="line">    </span><br><span class="line">    ldr r3, =pxCurrentTCB   <span class="comment">// 加载 pxCurrentTCB 的地址到 r3</span></span><br><span class="line">    ldr r2, [r3]            <span class="comment">// 加载 pxCurrentTCB 到 r2</span></span><br><span class="line">    </span><br><span class="line">    stmdb r0!, &#123;r4-r11&#125;     <span class="comment">// 将 CPU 寄存器 r4-r11 的值存储到 r0 指向的地址</span></span><br><span class="line">    str r0, [r2]            <span class="comment">// 将任务栈的新的栈顶指针存储到当前任务TCB的第一个成员，即栈顶指针</span></span><br><span class="line">    </span><br><span class="line">    stmdb sp!,&#123;r3,r14&#125;      <span class="comment">// 将 r3 和 r14 临时压入堆栈，因为即将调用函数 </span></span><br><span class="line">                            <span class="comment">// 调用函数时，返回地址自动保存到 r14 中，导致 r14 的值会被覆盖，所以 r14 的值需要入栈保护</span></span><br><span class="line">                            <span class="comment">// r3 保存的当前激活的任务 TCB 指针( pxCurrentTCB ),函数调用后会用到，因此也需要入栈保护</span></span><br><span class="line">    </span><br><span class="line">    mov r0, #configMAX_SYSCALL_INTERRUPT_PRIORITY    <span class="comment">// 进入临界段</span></span><br><span class="line">    msr basepri, r0         <span class="comment">// 屏蔽所有中断</span></span><br><span class="line">    dsb</span><br><span class="line">    isb</span><br><span class="line">    bl vTaskSwitchContext   <span class="comment">// 调用函数 vTaskSwitchContext，寻找新的任务运行，通过使变量 pxCurrentTCB 指向新的任务来实现任务切换</span></span><br><span class="line">    mov r0, #<span class="number">0</span>              <span class="comment">// 退出临界段</span></span><br><span class="line">    msr basepri, r0</span><br><span class="line">    ldmia sp!, &#123;r3,r14&#125;     <span class="comment">// 恢复 r3, r14</span></span><br><span class="line">    </span><br><span class="line">    ldr r1, [r3]            </span><br><span class="line">    ldr r0, [r1]            <span class="comment">// 当前激活的任务 TCB 第一项保存了任务堆栈的栈顶指针，现在栈顶值存入了 r0</span></span><br><span class="line">    ldmia r0!,&#123;r4-r11&#125;      <span class="comment">// 出栈</span></span><br><span class="line">    msr psp, r0</span><br><span class="line">    isb</span><br><span class="line">    bx r14                  <span class="comment">// 异常发生时，R14 中保存异常返回标志，包括返回后进入线程模式还是处理器模式</span></span><br><span class="line">                            <span class="comment">// 使用 psp 堆栈指针还是 msp 堆栈指针，当调用 bx r14 指令后，硬件会知道要从硬件返回</span></span><br><span class="line">                            <span class="comment">// 然后出栈，这个时候堆栈指针 psp 硬件指向了 新任务堆栈的正确位置</span></span><br><span class="line">                            <span class="comment">// 当新任务的运行地址被出栈到 pc 寄存器后，新的任务也会被执行</span></span><br><span class="line">    nop    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个汇编函数就完成了 ARM 架构下的任务切换机制。其实对于任务上下文切换就是任务现场的保存和恢复，这个现场就是当前的 CPU 运行状态，也就是 CPU 各个寄存器的状态的保存与恢复。这其中也包括很重要的栈帧切换。当然仅仅靠这两个函数也是不完全可靠的，还有一些临界段的处理函数来共同保证任务的安全切换。</p><h3 id="RISC-V-架构下的-RTOS-一般处理过程"><a href="#RISC-V-架构下的-RTOS-一般处理过程" class="headerlink" title="RISC-V 架构下的 RTOS 一般处理过程"></a>RISC-V 架构下的 RTOS 一般处理过程</h3><p>在 RISC-V 架构中，也有不同的特权级别，目前主要定义了三种特权级别，分别是<strong>机器模式（Machine Mode，M-mode）、监管模式（Supervisor Mode,S-mode）和用户模式（User Mode,U-Mode）</strong>， 通过 <strong>CSRs(control and status registers,控制状态寄存器)</strong> 的 <code>bit11</code>、<code>bit12</code>(即 MPP 位)两个位的不同编码来实现不同特权模式的切换，在不同特权模式下都有单独的 CSRs。这里需要说明的是我这个 MPP 指的是 Machine-Level CSRs 中 mstatus 寄存器（即 M-mode status register）的控制位。</p><table><thead><tr><th align="center">Level</th><th align="center">MPP[12:11]</th><th align="center">模式</th><th align="center">简写</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0 0</td><td align="center">User/Application</td><td align="center">U</td></tr><tr><td align="center">1</td><td align="center">0 1</td><td align="center">Supervisor</td><td align="center">S</td></tr><tr><td align="center">2</td><td align="center">1 0</td><td align="center">Reserved（Hypervisor）</td><td align="center">（保留）</td></tr><tr><td align="center">3</td><td align="center">1 1</td><td align="center">Machine</td><td align="center">M</td></tr></tbody></table><p>但是一个 RISC-V 处理器的实现并不要求同时支持这三种特权级，接受以下的一些实现组合，降低实现成本：</p><table><thead><tr><th align="center">Number of levels</th><th align="left">Supported Modes</th><th align="center">Intended Usage</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">M</td><td align="center">Simple embedded systems</td></tr><tr><td align="center">2</td><td align="left">M,U</td><td align="center">Secure embedded systems</td></tr><tr><td align="center">3</td><td align="left">M,S,U</td><td align="center">Systems running Unix-like operating systems</td></tr></tbody></table><p>上图中可以看出，这三种模式只有 M-mode 是必须要实现的，其它两种模式是可选的。M-mode 是 RISC-V 中 <strong>hart（hardware thread，硬件线程）</strong>可以执行的最高权限模式。在 M 模式下运行的 hart 对内存，I/O 和一些对于启动和配置系统来说必要的底层功能有着完全的使用权。因此它是唯一所有标准 RISC-V 处理器都必须实现的权限模式。实际上简单的 RISC-V 微控制器仅支持 M 模式。</p><p>好了，上面说的是特权模式和 ARM 的区别，下面就是堆栈指针的区别。上文已经提到 ARM 中有 MSP 和 PSP 之分，且在 handler 中只能使用 MSP，也就意味着 OS 和线程模式使用不同的栈。并且出入异常的栈帧切换由硬件完成。</p><p>而在 RISC-V 架构处理器中，没有区分异常、中断和线程模式使用的栈帧，在进入和退出中断处理模式时没有硬件自动保存和恢复上下文（通用寄存器）的操作，因此需要软件明确地使用（汇编语言编写的）指令进行上下文的保存和恢复。并且还要区分 ecall（environment call for U/S/M-mode，不同特权模式下的环境调用异常）。</p><p>所以 RISC-V 这一块的处理要复杂一些，有大量的 RISC-V 汇编，具体的代码我就不贴了，有兴趣的可以去看一下 FreeRTOS 的源码。链接：<strong><a href="https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/master/portable/GCC/RISC-V/portASM.s" target="_blank" rel="noopener">https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/master/portable/GCC/RISC-V/portASM.s</a></strong></p><p>下表是 RISC-V  RV32I 基础指令集寄存器结构，但 RV32E 基础指令集只有 <code>x0</code>-<code>x15</code>。</p><table><thead><tr><th align="center">Register</th><th align="center">ABI Name</th><th align="center">Description</th><th align="center">Saver</th></tr></thead><tbody><tr><td align="center">x0</td><td align="center">zero</td><td align="center">Hard-wired zero</td><td align="center">-</td></tr><tr><td align="center">x1</td><td align="center">ra</td><td align="center">Return address</td><td align="center">Caller</td></tr><tr><td align="center">x2</td><td align="center">sp</td><td align="center">Stack pointer</td><td align="center">Callee</td></tr><tr><td align="center">x3</td><td align="center">gp</td><td align="center">Global pointer</td><td align="center">-</td></tr><tr><td align="center">x4</td><td align="center">tp</td><td align="center">Thread pointer</td><td align="center">-</td></tr><tr><td align="center">x5-7</td><td align="center">t0-2</td><td align="center">Temporaries</td><td align="center">Caller</td></tr><tr><td align="center">x8</td><td align="center">s0/fp</td><td align="center">Saved register/Frame pointer</td><td align="center">Callee</td></tr><tr><td align="center">x9</td><td align="center">s1</td><td align="center">Saved register</td><td align="center">Callee</td></tr><tr><td align="center">x10-11</td><td align="center">a0-1</td><td align="center">Function Arguments/return values</td><td align="center">Caller</td></tr><tr><td align="center">x12-17</td><td align="center">a2-7</td><td align="center">Function arguments</td><td align="center">Caller</td></tr><tr><td align="center">x18-27</td><td align="center">s2-11</td><td align="center">Saved registers</td><td align="center">Callee</td></tr><tr><td align="center">x28-31</td><td align="center">t3-6</td><td align="center">Temporaries</td><td align="center">Caller</td></tr></tbody></table><p>上表中虽然对各个寄存器有了一些描述，在 RISC-V 指令集中并没有指定专用的堆栈指针或子程序返回地址链接寄存器等，事实上指令编码允许将任何 x 寄存器用于这些目的。 但是，标准软件调用约定使用寄存器 x1 来保存呼叫的返回地址，而寄存器 x5 可用作备用链接寄存器。 标准调用约定使用寄存器 x2 作为堆栈指针。硬件可能会选择加速使用 x1 或 x5 的函数调用和返回。（不知道这段 Google 翻译的描述是否准确，大家可以去阅读《riscv-spec-20191213》的 2.1 节原文参考）</p><h2 id="在-wujian100-RISC-V-开源平台上实现简单的任务调度系统"><a href="#在-wujian100-RISC-V-开源平台上实现简单的任务调度系统" class="headerlink" title="在 wujian100 RISC-V 开源平台上实现简单的任务调度系统"></a>在 wujian100 RISC-V 开源平台上实现简单的任务调度系统</h2><p>在了解了上面的一些区别后，我准备尝试移植 FreeRTOS 或者 RT-Thread 到 wujian100 上试试，但是我发现它们大多是只支持了以 RV32I 为基础指令集的处理器。而 wujian100 是 E902，是 RV32E 基础指令集，在底层汇编的处理上有一些不同，可能还要做一些修改。所以我就想试着把我之前学习 FreeRTOS 时，实现的仅有任务调度功能的极简版 FreeRTOS 放上去试试，因为代码量比较少。</p><p>接下来，我就尝试在 wujian100 开源的 SDK 中移花接木，把我自己这个极简的小操作系统移植上去。在仔细翻阅了 wujian 开源的代码后发现他们这里提供了一个 AliOS 的内核，叫 rhino 内核。在他们这个内核的底层是有实现一些上下文切换的代码的，于是我就基于这个底层把我的上层接上去。当然这过程中还要修改很多东西，这里就不一一详述，直接看这段汇编代码是怎么处理的，这里我已经做了一些修改，我的两个小任务也转起来了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MSTATUS_PRV1 0x1880</span></span><br><span class="line"></span><br><span class="line">.global cpu_intrpt_save</span><br><span class="line">.type cpu_intrpt_save, %function</span><br><span class="line">cpu_intrpt_save:</span><br><span class="line">    csrr    a0, mstatus  <span class="comment">// 读控制状态寄存器，写入 a0，并返回到 psr 返回值中,psr 是外部定义的一个变量，恢复时会使用</span></span><br><span class="line">    csrc    mstatus, <span class="number">8</span>  <span class="comment">// 将控制状态寄存器清零。清零对应的标志位，该语句即为清除 MIE ，即禁止全局中断使能。就是禁用中断</span></span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">.global cpu_intrpt_restore</span><br><span class="line">.type cpu_intrpt_restore, %function</span><br><span class="line">cpu_intrpt_restore:</span><br><span class="line">    csrw    mstatus, a0   <span class="comment">// a0 是传进来的参数，即上一次保存的控制状态寄存器的值，对于 a0 中每一个为 1 的位，把 mstatus 中对应的位进行置位</span></span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">.global cpu_task_switch</span><br><span class="line">.type cpu_task_switch, %function</span><br><span class="line">cpu_task_switch:                <span class="comment">// 主动任务切换调度</span></span><br><span class="line">    la     a0, g_intrpt_level_1 <span class="comment">// g_intrpt_level_1 是一个全局变量，用于保存当前中断嵌套的层级；这里是将其地址加载到 a0 中</span></span><br><span class="line">    lb     a0, (a0)             <span class="comment">//  将 a0 地址的数据加载到 a0 中</span></span><br><span class="line">    beqz   a0, __task_switch    <span class="comment">// beqz 是对于零时的分支指令，如果等于零，就执行 __task_switch 函数，也就是意味着当前没有中断嵌套</span></span><br><span class="line"></span><br><span class="line">    la     a0, pxCurrentTCB      <span class="comment">// 如果不等于零，即有中断嵌套，就进行下面的操作；加载 pxCurrentTCB 的地址到 a0,即获取当前任务指针</span></span><br><span class="line">    la     a1, g_ReadyTasksLists <span class="comment">// 加载 g_ReadyTasksLists 的地址到 a1，即获取当前最高优先级的就绪任务指针</span></span><br><span class="line">    lw     a2, (a1)  <span class="comment">// 加载就绪任务指针到 a2  (lw 指令读取一个字，即4个字节的数据 到 a2</span></span><br><span class="line">    sw     a2, (a0)  <span class="comment">// 将 a2 的低4个字节存储到 a0（即将就绪任务指针放到当前任务）</span></span><br><span class="line"></span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">.global cpu_intrpt_switch</span><br><span class="line">.type cpu_intrpt_switch, %function</span><br><span class="line">cpu_intrpt_switch:   <span class="comment">// 中断中的任务切换 操作和上面类似</span></span><br><span class="line">    la     a0, pxCurrentTCB</span><br><span class="line">    la     a1, g_ReadyTasksLists</span><br><span class="line">    lw     a2, (a1)</span><br><span class="line">    sw     a2, (a0)</span><br><span class="line"></span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">.global cpu_first_task_start</span><br><span class="line">.type cpu_first_task_start, %function</span><br><span class="line">cpu_first_task_start:      <span class="comment">// 第一次进入任务时是不用返回的</span></span><br><span class="line">    j       __task_switch_nosave</span><br><span class="line"></span><br><span class="line">.type __task_switch, %function</span><br><span class="line">__task_switch:    <span class="comment">// 任务切换函数 </span></span><br><span class="line">    addi    sp, sp, <span class="number">-60</span>  <span class="comment">// 规划保存数据需要的栈帧大小</span></span><br><span class="line"><span class="comment">// 保存现场，将寄存器的数据保存到栈帧中</span></span><br><span class="line">    sw      x1, <span class="number">0</span>(sp)</span><br><span class="line">    sw      x3, <span class="number">4</span>(sp)</span><br><span class="line">    sw      x4, <span class="number">8</span>(sp)</span><br><span class="line">    sw      x5, <span class="number">12</span>(sp)</span><br><span class="line">    sw      x6, <span class="number">16</span>(sp)</span><br><span class="line">    sw      x7, <span class="number">20</span>(sp)</span><br><span class="line">    sw      x8, <span class="number">24</span>(sp)</span><br><span class="line">    sw      x9, <span class="number">28</span>(sp)</span><br><span class="line">    sw      x10, <span class="number">32</span>(sp)</span><br><span class="line">    sw      x11, <span class="number">36</span>(sp)</span><br><span class="line">    sw      x12, <span class="number">40</span>(sp)</span><br><span class="line">    sw      x13, <span class="number">44</span>(sp)</span><br><span class="line">    sw      x14, <span class="number">48</span>(sp)</span><br><span class="line">    sw      x15, <span class="number">52</span>(sp)</span><br><span class="line"></span><br><span class="line">    sw      ra, <span class="number">56</span>(sp)</span><br><span class="line"></span><br><span class="line">    la      a1, pxCurrentTCB <span class="comment">// 将当前任务控制块指针地址，加载到 a1</span></span><br><span class="line">    lw      a1, (a1)         <span class="comment">// 将任务控制块指针地址加载到 a1</span></span><br><span class="line">    sw      sp, (a1)         <span class="comment">// 将栈指针加载到当前任务控制块指针地址</span></span><br><span class="line"></span><br><span class="line">__task_switch_nosave:        <span class="comment">// 第一次进入任务入口，接下来切换任务指针</span></span><br><span class="line">    la      a0, g_ReadyTasksLists</span><br><span class="line">    la      a1, pxCurrentTCB</span><br><span class="line">    lw      a2, (a0)</span><br><span class="line">    sw      a2, (a1)</span><br><span class="line"></span><br><span class="line">    lw      sp, (a2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Run in machine mode */</span></span><br><span class="line">    li      t0, MSTATUS_PRV1</span><br><span class="line">    csrs    mstatus, t0  <span class="comment">// 将对于 t0 对应为 1 的每一位置位，即 mpp 设置为 11，machine mode 运行；mpie 置位，用于保存发生异常时 mie 的值；即切换到 M-mode</span></span><br><span class="line"></span><br><span class="line">    lw      t0, <span class="number">56</span>(sp)   <span class="comment">// 将 56(sp) 低 4个字节的数据加载到 t0，即返回地址</span></span><br><span class="line">    csrw    mepc, t0     <span class="comment">// 将 t0 写入 mepc  这里需要注意的是，栈区的数据，在任务初始化的时候就要初始化好，包括第一次启动</span></span><br><span class="line"><span class="comment">// 加载栈帧数据</span></span><br><span class="line">    lw      x1, <span class="number">0</span>(sp)</span><br><span class="line">    lw      x3, <span class="number">4</span>(sp)</span><br><span class="line">    lw      x4, <span class="number">8</span>(sp)</span><br><span class="line">    lw      x5, <span class="number">12</span>(sp)</span><br><span class="line">    lw      x6, <span class="number">16</span>(sp)</span><br><span class="line">    lw      x7, <span class="number">20</span>(sp)</span><br><span class="line">    lw      x8, <span class="number">24</span>(sp)</span><br><span class="line">    lw      x9, <span class="number">28</span>(sp)</span><br><span class="line">    lw      x10, <span class="number">32</span>(sp)</span><br><span class="line">    lw      x11, <span class="number">36</span>(sp)</span><br><span class="line">    lw      x12, <span class="number">40</span>(sp)</span><br><span class="line">    lw      x13, <span class="number">44</span>(sp)</span><br><span class="line">    lw      x14, <span class="number">48</span>(sp)</span><br><span class="line">    lw      x15, <span class="number">52</span>(sp)</span><br><span class="line"></span><br><span class="line">    addi    sp, sp, <span class="number">60</span></span><br><span class="line">    mret   <span class="comment">// M-mode 特有指令，返回时将 PC 指针设置为 mepc,将 mpie 复制到 mie 恢复之前的中断设置，并将特权模式设置为 mpp 中的值；这里就可以完成特权模式的切换(M-U or U-M) </span></span><br><span class="line"></span><br><span class="line">.global Default_IRQHandler</span><br><span class="line">.type   Default_IRQHandler, %function</span><br><span class="line">Default_IRQHandler:    <span class="comment">// 异常、中断处理，这里也需要保存现场，处理类似</span></span><br><span class="line">    addi    sp, sp, <span class="number">-60</span></span><br><span class="line"></span><br><span class="line">    sw      x1, <span class="number">0</span>(sp)</span><br><span class="line">    sw      x3, <span class="number">4</span>(sp)</span><br><span class="line">    sw      x4, <span class="number">8</span>(sp)</span><br><span class="line">    sw      x5, <span class="number">12</span>(sp)</span><br><span class="line">    sw      x6, <span class="number">16</span>(sp)</span><br><span class="line">    sw      x7, <span class="number">20</span>(sp)</span><br><span class="line">    sw      x8, <span class="number">24</span>(sp)</span><br><span class="line">    sw      x9, <span class="number">28</span>(sp)</span><br><span class="line">    sw      x10, <span class="number">32</span>(sp)</span><br><span class="line">    sw      x11, <span class="number">36</span>(sp)</span><br><span class="line">    sw      x12, <span class="number">40</span>(sp)</span><br><span class="line">    sw      x13, <span class="number">44</span>(sp)</span><br><span class="line">    sw      x14, <span class="number">48</span>(sp)</span><br><span class="line">    sw      x15, <span class="number">52</span>(sp)</span><br><span class="line"></span><br><span class="line">    csrr    t0, mepc</span><br><span class="line">    sw      t0, <span class="number">56</span>(sp)</span><br><span class="line"></span><br><span class="line">    la      a0, pxCurrentTCB</span><br><span class="line">    lw      a0, (a0)</span><br><span class="line">    sw      sp, (a0)</span><br><span class="line"></span><br><span class="line">    la      sp, g_top_irqstack</span><br><span class="line"></span><br><span class="line">    csrr    a0, mcause     <span class="comment">// 读取异常类型</span></span><br><span class="line">    andi    a0, a0, <span class="number">0x3FF</span></span><br><span class="line">    slli    a0, a0, <span class="number">2</span></span><br><span class="line"><span class="comment">// 处理异常</span></span><br><span class="line">    la      a1, g_irqvector</span><br><span class="line">    add     a1, a1, a0</span><br><span class="line">    lw      a2, (a1)</span><br><span class="line">    jalr    a2</span><br><span class="line"><span class="comment">// 退出异常，恢复</span></span><br><span class="line">    la      a0, pxCurrentTCB</span><br><span class="line">    lw      a0, (a0)</span><br><span class="line">    lw      sp, (a0)</span><br><span class="line"></span><br><span class="line">    csrr    a0, mcause</span><br><span class="line">    andi    a0, a0, <span class="number">0x3FF</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* clear pending */</span><span class="comment">//清除挂起的异常</span></span><br><span class="line">    li      a2, <span class="number">0xE000E100</span></span><br><span class="line">    add     a2, a2, a0</span><br><span class="line">    lb      a3, <span class="number">0</span>(a2)</span><br><span class="line">    li      a4, <span class="number">1</span></span><br><span class="line">    <span class="keyword">not</span>     a4, a4</span><br><span class="line">    <span class="keyword">and</span>     a5, a4, a3</span><br><span class="line">    sb      a5, <span class="number">0</span>(a2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Run in machine mode */</span></span><br><span class="line">    li      t0, MSTATUS_PRV1</span><br><span class="line">    csrs    mstatus, t0</span><br><span class="line"></span><br><span class="line">    lw      t0, <span class="number">56</span>(sp)</span><br><span class="line">    csrw    mepc, t0</span><br><span class="line"></span><br><span class="line">    lw      x1, <span class="number">0</span>(sp)</span><br><span class="line">    lw      x3, <span class="number">4</span>(sp)</span><br><span class="line">    lw      x4, <span class="number">8</span>(sp)</span><br><span class="line">    lw      x5, <span class="number">12</span>(sp)</span><br><span class="line">    lw      x6, <span class="number">16</span>(sp)</span><br><span class="line">    lw      x7, <span class="number">20</span>(sp)</span><br><span class="line">    lw      x8, <span class="number">24</span>(sp)</span><br><span class="line">    lw      x9, <span class="number">28</span>(sp)</span><br><span class="line">    lw      x10, <span class="number">32</span>(sp)</span><br><span class="line">    lw      x11, <span class="number">36</span>(sp)</span><br><span class="line">    lw      x12, <span class="number">40</span>(sp)</span><br><span class="line">    lw      x13, <span class="number">44</span>(sp)</span><br><span class="line">    lw      x14, <span class="number">48</span>(sp)</span><br><span class="line">    lw      x15, <span class="number">52</span>(sp)</span><br><span class="line"></span><br><span class="line">    addi    sp, sp, <span class="number">60</span></span><br><span class="line">    mret</span><br></pre></td></tr></table></figure><p><strong>除了上面的汇编部分，还有几个主要函数如下，代码工程我后面整理好会上传到我的 Github 上。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TaskSwitching_example</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    prvInitTaskLists();</span><br><span class="line">    </span><br><span class="line">    Task1_Handle = xTaskCreateStatic(  Task1_Entry,</span><br><span class="line">                                       <span class="string">"Task1_Entry"</span>,</span><br><span class="line">                                       TASK1_STACK_SIZE,</span><br><span class="line">                                       <span class="literal">NULL</span>,</span><br><span class="line">                     <span class="number">1</span>,</span><br><span class="line">                                       Task1Stack,</span><br><span class="line">                                       &amp;Task1TCB );</span><br><span class="line">    <span class="comment">// 核心就是插入函数 vListInsert, 将任务插入到就绪列表中</span></span><br><span class="line">    vListInsert(&amp;pxReadyTasksLists[<span class="number">1</span>], &amp;Task1TCB.xStateListNode);   </span><br><span class="line">    </span><br><span class="line">    Task2_Handle = xTaskCreateStatic(  Task2_Entry,</span><br><span class="line">                                       <span class="string">"Task2_Entry"</span>,</span><br><span class="line">                                       TASK2_STACK_SIZE,</span><br><span class="line">                                       <span class="literal">NULL</span>,</span><br><span class="line">                     <span class="number">2</span>,</span><br><span class="line">                                       Task2Stack,</span><br><span class="line">                                       &amp;Task2TCB );</span><br><span class="line">    vListInsert(&amp;pxReadyTasksLists[<span class="number">2</span>], &amp;Task2TCB.xStateListNode);</span><br><span class="line">    vTaskStartScheduler();  <span class="comment">//去启动第一个任务</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vTaskSwitchContext</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 轮流切换两个任务，我这里任务暂时是手动切换的，没使用优先级</span></span><br><span class="line">    <span class="keyword">if</span>( pxCurrentTCB == &amp;Task1TCB)</span><br><span class="line">    &#123;</span><br><span class="line">        g_ReadyTasksLists[<span class="number">0</span>] =&amp; Task2TCB;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        g_ReadyTasksLists[<span class="number">0</span>] =&amp; Task1TCB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wjYIELD</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PSRC_ALL();</span><br><span class="line">portDISABLE_INTERRUPTS();</span><br><span class="line">vTaskSwitchContext();</span><br><span class="line">cpu_task_switch();</span><br><span class="line">portENABLE_INTERRUPTS();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个任务函数 Task1 入口函数 ；task2 和 task1 一样</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Task1_Entry</span><span class="params">(<span class="keyword">void</span> *p_arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        flag1 = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"flag1 = %d \n"</span>, flag1);</span><br><span class="line">        delay( <span class="number">100</span> );</span><br><span class="line"><span class="comment">//        vTaskDelay( 20 );</span></span><br><span class="line">        flag1 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"flag1 = %d \n"</span>, flag1);</span><br><span class="line">        delay( <span class="number">100</span> );</span><br><span class="line"><span class="comment">//        vTaskDelay( 20 );</span></span><br><span class="line">    wjYIELD(); <span class="comment">// 注意，这里是手动切换任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TaskSwitching_example();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，差不多就这些了。<br><img src="https://s1.ax1x.com/2020/04/09/G53CV0.jpg" alt="wujian_CamelOS"></p><h2 id="踩坑总结"><a href="#踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h2><p>通过这次研究，明白了 ARM 和 RISC-V 架构上的异同，加深了自己对两种架构的理解，相信对以后的学习也更加有帮助。<br>还有就是 wujian100 的开源资料中并没有提供特权架构的相关文档，异常和中断向量表规划也没有具体的说明文档，目前有限的文档中只介绍了外设 IP 的说明，所以在后续的软件开发增加了很多障碍。只有去扒他们提供的 SDK 中的源代码，通过源码来了解他们的架构，还有一点就是他们提供的代码及资料和阿里体系的东西相对耦合或者说兼容。跟开源社区现有的资料和体系不能很好融合。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li>《RISC-V-Reader-Chinese-v2p1》</li><li>《riscv-spec-20191213》</li><li>《riscv-privileged-20190608-1》</li><li>《Cortex-M3权威指南》</li><li>《computer organization and design》</li><li><a href="https://github.com/FreeRTOS/FreeRTOS-Kernel/tree/master/portable/GCC/RISC-V" target="_blank" rel="noopener">https://github.com/FreeRTOS/FreeRTOS-Kernel/tree/master/portable/GCC/RISC-V</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h2&gt;&lt;p&gt;之前的 blog 有介绍了一些，wujian100 的一些知识，包括综合、测试等。最近就想在 wujian100 上看看能不能移植一下比较常见的一些 &lt;strong&gt;&lt;code&gt;RTOS&lt;/code&gt;&lt;/strong&gt; (&lt;strong&gt;Real Time Operating System,实时操作系统&lt;/strong&gt;)上去试试，比如 Free RTOS、RT-Thread等。结果发现这里还是有一些坑的。虽然 FreeRTOS 和 RTT 都支持 RISC-V 的芯片了，但是 wujian100 这个是 RISC-V “E” 基础架构，也就是 &lt;strong&gt;&lt;code&gt;RV32E&lt;/code&gt;&lt;/strong&gt; 就是 &lt;strong&gt;&lt;code&gt;标准嵌入式扩展&lt;/code&gt;&lt;/strong&gt; 指令集（这个版本降低了核心的开销，CPU 寄存器裁剪了一半，为 16 个）。但是 FreeRTOS 和 RTT 目前支持的版本都是 32 个寄存器的，对于任务或者说线程的上下文切换时对栈帧的操作还是有一些差异。然后呢也想对比一下 ARM 架构和 RISC-V 架构下嵌入式实时操作系统处理的一些区别，这里呢就想做一些的简单记录。&lt;/p&gt;
    
    </summary>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/categories/IC-Design/"/>
    
      <category term="RISC-V" scheme="https://blog.strongwong.top/categories/IC-Design/RISC-V/"/>
    
      <category term="嵌入式" scheme="https://blog.strongwong.top/categories/IC-Design/RISC-V/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="IC Design" scheme="https://blog.strongwong.top/tags/IC-Design/"/>
    
      <category term="RISC-V" scheme="https://blog.strongwong.top/tags/RISC-V/"/>
    
      <category term="wujian100" scheme="https://blog.strongwong.top/tags/wujian100/"/>
    
  </entry>
  
  <entry>
    <title>使用 vivado 综合 wujian100 生成 bitstream 文件</title>
    <link href="https://blog.strongwong.top//posts/%E4%BD%BF%E7%94%A8-vivado-%E7%BB%BC%E5%90%88-wujian100-%E7%94%9F%E6%88%90-bitstream-%E6%96%87%E4%BB%B6.html"/>
    <id>https://blog.strongwong.top//posts/使用-vivado-综合-wujian100-生成-bitstream-文件.html</id>
    <published>2019-11-24T10:49:52.000Z</published>
    <updated>2020-03-07T05:55:31.258Z</updated>
    
    <content type="html"><![CDATA[<h2 id="综合环境"><a href="#综合环境" class="headerlink" title="综合环境"></a>综合环境</h2><p>上一篇 blog 呢，我记录一下运行 wujian100 的一些仿真过程，这篇 blog 我将简单介绍一下使用 vivado 来综合 wujian100 需要注意的一些地方。</p><p>首先，说明一下我的综合环境，我是在 WSL 下安装的 vivado 2018.3 版本，然后是完全 vivado 环境下综合生成 bitstream 文件，因为没有安装 synplify，所以就没有使用官方推荐的 synplify 进行综合。</p><blockquote><p>系统：Windows 10 ， WSL Ubuntu 18.04<br>软件: vivado 2018.3</p></blockquote><a id="more"></a><h2 id="安装-vivado"><a href="#安装-vivado" class="headerlink" title="安装 vivado"></a>安装 vivado</h2><p>首先，你如果没有安装 vivado 就先安装一下 vivado，在命令行下自己运行 <code>./xsetup</code> 即可，安装完成后记得设置一下环境变量，具体的安装方法，我这里就不做详细介绍了，请自行搜索。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./xsetup</span><br></pre></td></tr></table></figure><h2 id="打开-vivado-新建工程"><a href="#打开-vivado-新建工程" class="headerlink" title="打开 vivado 新建工程"></a>打开 vivado 新建工程</h2><p>接下来，我们进入到 wujian100_open 的 fpga-&gt;vivado 目录下，在命令行下输入 <code>vivado</code> ，启动 vivado。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vivado</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/12/01/QeXyMn.md.png" alt="start_vivado.png"></p><p>vivado 启动完成之后，我们来创建应该新工程，点击 <code>Create project</code> ，Next-&gt;填写工程名称，Next-&gt; 选择 RTL Project，Next-&gt; 选择 wujian100 这个开发板对应的 FPGA 型号 <code>xc7a200tfbg484-1</code>，最后 Finish 即可，工程创建结束。</p><p><img src="https://s2.ax1x.com/2019/12/01/QejBTK.png" alt="QejBTK.png"><br><img src="https://s2.ax1x.com/2019/12/01/QexDRe.png" alt="QexDRe.png"><br><img src="https://s2.ax1x.com/2019/12/01/QexvJU.png" alt="QexvJU.png"></p><h2 id="添加源码综合"><a href="#添加源码综合" class="headerlink" title="添加源码综合"></a>添加源码综合</h2><p>工程创建完了之后我们添加 wujian100 的源码来进行综合。这里需要注意的是源码中有两个 top 文件，我们这里添加 wujian100_open_fpga_top.v 文件。然后添加 <code>soc</code>目录下的源码，都添加完成之后，vivado 会自动分析，这时我们会看到有错误，这是因为这四个文件是头文件，我们需要手动更改一下文件格式。</p><p><img src="https://s2.ax1x.com/2019/12/01/QmFW80.png" alt="QmFW80.png"></p><p>接下来我们继续添加约束文件，这里的管脚约束文件，我们就是所以官方提供的这个即可，时序约束文件这里使用一位群友提供的即可。把这个时序约束文件和官方的 xdc 放在一个目录下就可以了，添加完成之后，我们进行综合即可。但是在综合之前我们需要更改一下官方的 xdc，有一个地方在 vivado 下进行综合会报错，就是第 33 行这句， 把 <code>_c</code> 去掉即可。还有一个地方需要注意的是把 wujian100_open_fpga_top.v 的优先级调一下。</p><p>时序约束文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">create_clock -name &#123;EHS&#125; [get_ports PIN_EHS] -period 50 -waveform &#123;0 25&#125;</span><br><span class="line">create_clock  -name &#123;JTAG_CLK&#125; [get_ports PAD_JTAG_TCLK] -period 1000 -waveform &#123;0 500&#125;</span><br><span class="line"></span><br><span class="line">set_clock_groups -asynchronous -name &#123;clkgroup_1&#125; -group [get_clocks &#123;EHS JTAG_CLK&#125;]</span><br><span class="line"></span><br><span class="line">set_false_path -through [get_ports PIN_EHS]</span><br><span class="line"></span><br><span class="line"><span class="comment">#set_clock_groups -name &#123;Inferred_clkgroup_0&#125; -asynchronous -group [get_clocks &#123;wujian100_open_top|PAD_JTAG_TCLK&#125;]</span></span><br><span class="line"></span><br><span class="line">set_property ASYNC_REG TRUE [get_cells &#123;x_aou_top/x_rtc0_sec_top/x_rtc_pdu_top/x_rtc_clr_sync/pclk_load_sync2_reg&#125;]</span><br><span class="line">set_property ASYNC_REG TRUE [get_cells &#123;x_aou_top/x_rtc0_sec_top/x_rtc_pdu_top/x_rtc_clr_sync/rtc_load_sync2_reg&#125;]</span><br><span class="line">set_property ASYNC_REG TRUE [get_cells &#123;x_aou_top/x_rtc0_sec_top/x_rtc_pdu_top/x_rtc_clr_sync/pclk_load_sync1_reg&#125;]</span><br><span class="line">set_property ASYNC_REG TRUE [get_cells &#123;x_aou_top/x_rtc0_sec_top/x_rtc_pdu_top/x_rtc_clr_sync/rtc_load_sync1_reg&#125;]</span><br><span class="line">set_property ASYNC_REG TRUE [get_cells &#123;x_cpu_top/CPU/x_cr_had_top/A15d/A74/A10b_reg&#125;]</span><br><span class="line">set_property ASYNC_REG TRUE [get_cells &#123;x_cpu_top/CPU/x_cr_had_top/A15d/A74/A18597_reg&#125;]</span><br><span class="line">set_property ASYNC_REG TRUE [get_cells &#123;x_cpu_top/CPU/x_cr_had_top/A15d/A1862d/A10b_reg&#125;]</span><br><span class="line">set_property ASYNC_REG TRUE [get_cells &#123;x_cpu_top/CPU/x_cr_had_top/A15d/A1862d/A18597_reg&#125;]</span><br><span class="line">set_property ASYNC_REG TRUE [get_cells &#123;x_cpu_top/CPU/x_cr_had_top/A15d/A75/A10b_reg&#125;]</span><br><span class="line">set_property ASYNC_REG TRUE [get_cells &#123;x_cpu_top/CPU/x_cr_had_top/A15d/A75/A18597_reg&#125;]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># set_property CLOCK_DEDICATED_ROUTE FALSE [get_nets PAD_JTAG_TCLK_c]</span></span><br><span class="line"><span class="comment"># 改成下面的</span></span><br><span class="line">set_property CLOCK_DEDICATED_ROUTE FALSE [get_nets PAD_JTAG_TCLK]</span><br></pre></td></tr></table></figure><h2 id="综合完成生成-bit-文件"><a href="#综合完成生成-bit-文件" class="headerlink" title="综合完成生成 bit 文件"></a>综合完成生成 bit 文件</h2><p><img src="https://s2.ax1x.com/2019/12/01/QmM4H0.png" alt="QmM4H0.png"></p><p>综合完成之后呢，我们可以看到啊，这个时序约束都是符合要求的，接下来，我们就可以输出比特流文件上 FPGA 做实验了。</p><h2 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h2><h3 id="vivado-综合"><a href="#vivado-综合" class="headerlink" title="vivado 综合"></a>vivado 综合</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=77962964&cid=133377281&page=1"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div><h3 id="上-FPGA-测试"><a href="#上-FPGA-测试" class="headerlink" title="上 FPGA 测试"></a>上 FPGA 测试</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=79137613&cid=135422810&page=1"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;综合环境&quot;&gt;&lt;a href=&quot;#综合环境&quot; class=&quot;headerlink&quot; title=&quot;综合环境&quot;&gt;&lt;/a&gt;综合环境&lt;/h2&gt;&lt;p&gt;上一篇 blog 呢，我记录一下运行 wujian100 的一些仿真过程，这篇 blog 我将简单介绍一下使用 vivado 来综合 wujian100 需要注意的一些地方。&lt;/p&gt;
&lt;p&gt;首先，说明一下我的综合环境，我是在 WSL 下安装的 vivado 2018.3 版本，然后是完全 vivado 环境下综合生成 bitstream 文件，因为没有安装 synplify，所以就没有使用官方推荐的 synplify 进行综合。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;系统：Windows 10 ， WSL Ubuntu 18.04&lt;br&gt;软件: vivado 2018.3&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/categories/IC-Design/"/>
    
      <category term="RISC-V" scheme="https://blog.strongwong.top/categories/IC-Design/RISC-V/"/>
    
    
      <category term="Verilog" scheme="https://blog.strongwong.top/tags/Verilog/"/>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/tags/IC-Design/"/>
    
      <category term="RISC-V" scheme="https://blog.strongwong.top/tags/RISC-V/"/>
    
      <category term="平头哥" scheme="https://blog.strongwong.top/tags/%E5%B9%B3%E5%A4%B4%E5%93%A5/"/>
    
      <category term="wujian100" scheme="https://blog.strongwong.top/tags/wujian100/"/>
    
  </entry>
  
  <entry>
    <title>Windows 下学习阿里平头哥 RISC-V 芯片开发平台 wujian100</title>
    <link href="https://blog.strongwong.top//posts/Windows-%E4%B8%8B%E5%AD%A6%E4%B9%A0%E9%98%BF%E9%87%8C%E5%B9%B3%E5%A4%B4%E5%93%A5-RISC-V-%E8%8A%AF%E7%89%87%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0-wujian100.html"/>
    <id>https://blog.strongwong.top//posts/Windows-下学习阿里平头哥-RISC-V-芯片开发平台-wujian100.html</id>
    <published>2019-11-09T06:59:55.000Z</published>
    <updated>2020-03-07T05:53:19.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上个月，在第六届互联网大会上，阿里的平头哥，对，就是那个人狠话不多的公司！他们宣布开源了 <code>wujian100</code> 这个芯片设计平台。搭载基于 RISC-V 架构的玄铁 902 处理器。<br>基础硬件代码和配套软件代码发布在了 GitHub 上了，使用的是 MIT 许可证。大家也都可以去下载学习。<br>GitHub 链接：<a href="https://github.com/T-head-Semi/wujian100_open" target="_blank" rel="noopener">https://github.com/T-head-Semi/wujian100_open</a></p><a id="more"></a><h2 id="介绍视频"><a href="#介绍视频" class="headerlink" title="介绍视频"></a>介绍视频</h2><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=74527234&cid=127477207&page=1"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div><h2 id="搭建仿真环境"><a href="#搭建仿真环境" class="headerlink" title="搭建仿真环境"></a>搭建仿真环境</h2><h3 id="安装-Linux-环境"><a href="#安装-Linux-环境" class="headerlink" title="安装 Linux 环境"></a>安装 Linux 环境</h3><p>我们要去学习 wujian100 这个代码，首先要去搭建一下运行仿真的环境。跑无剑这个仿真是需要 Linux 环境的，所以我就安装了 WSL（ Windows subsystem of Linux），我这里呢安装了 Ubuntu 18.04 的版本。要安装 WSL ，首先要去 <code>控制面板</code>-&gt;<code>程序</code>-&gt;<code>启用或关闭 Windows 功能</code> 勾选开启 <code>适用于 Linux 的 Windows 子系统</code> 这个选项，这样你就可以去微软应用商店正常安装 Linux 子系统了。</p><p>安装好子系统之后，我们直接进入到子系统下面进行操作就可以了。</p><h3 id="新建目录-Clone-官方代码"><a href="#新建目录-Clone-官方代码" class="headerlink" title="新建目录 Clone 官方代码"></a>新建目录 Clone 官方代码</h3><p>首先我们按照官方在 GitHub 上的教程新建一个项目目录，然后进入到目录， clone 官方发布的代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir test_prj</span><br><span class="line">$ <span class="built_in">cd</span> test_prj</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/T-head-Semi/wujian100_open.git</span><br></pre></td></tr></table></figure><h3 id="安装-RISC-V-工具链"><a href="#安装-RISC-V-工具链" class="headerlink" title="安装 RISC-V 工具链"></a>安装 RISC-V 工具链</h3><p>接下来，新建工具链目录，去官方给定的地址下载编译代码需要的 risc-v 工具链，解开压缩包，找到 <code>riscv64-elf-x86_64-20190731.tar.gz</code> 这个工具链，拷贝到工具链目录，解压安装工具链即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir riscv_toolchain</span><br><span class="line">$ <span class="built_in">cd</span> riscv_toolchain</span><br><span class="line"><span class="comment"># 下面这条命令不一定跟我一样，工具链下载后的具体路径根据你自己的系统确定</span></span><br><span class="line">$ cp /mnt/d/download/T-Head\ Tools\ package/T-Head\ RISC-V\ Toolchain-V1.2.2/riscv64-elf-x86_64-20190731.tar.gz ./  </span><br><span class="line"></span><br><span class="line">$ tar -zxvf riscv64-elf-x86_64-20190731.tar.gz</span><br></pre></td></tr></table></figure><h3 id="安装仿真工具"><a href="#安装仿真工具" class="headerlink" title="安装仿真工具"></a>安装仿真工具</h3><p>仿真工具可以选择官方推荐的 VCS 仿真，但是我这里呢使用 iverilog 进行仿真， gtkwave 来查看波形文件，verilator 是编辑软件。然后由于我这边安装的 ubuntu18.04 默认没有安装 make 工具，所以也一起安装了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install iverilog gtkwave verilator </span><br><span class="line">$ sudo apt install make</span><br></pre></td></tr></table></figure><p>注：有些同学可能是 Ubuntu 16.04 版本，直接通过 apt 命令安装 iverilog 会自动安装一个版本较低的，低版本运行这个仿真是有问题的，这时建议同学自己手动编译安装 10.0 以上版本的 iverilog 。</p><h3 id="编辑-setup-脚本，配置环境变量"><a href="#编辑-setup-脚本，配置环境变量" class="headerlink" title="编辑 setup 脚本，配置环境变量"></a>编辑 setup 脚本，配置环境变量</h3><p>工具安装完成之后，编辑 setup 脚本并通过执行它，来设置 EDA 环境变量。<br>由于原本的脚本是 csh 在 bash 环境下有一些不兼容的地方，所以我这里做了一些修改，修改内容如下：</p><p>setup.sh 脚本内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Copyright (c) 2019 Alibaba Group Holding Limited</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#set VCS path</span></span><br><span class="line"><span class="comment">#setenv VCS_HOME </span></span><br><span class="line"><span class="comment">#set path=($VCS_HOME/linux/bin $path)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#set VCS license</span></span><br><span class="line"><span class="comment">#setenv SNPSLMD_LICENSE_FILE </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#set iverilog path</span></span><br><span class="line"><span class="built_in">export</span> iverilog_path=(/usr/bin)</span><br><span class="line"><span class="built_in">export</span> gtkwave_path=(/usr/bin)</span><br><span class="line"><span class="built_in">export</span> path=(<span class="variable">$iverilog_path</span>:<span class="variable">$path</span>)</span><br><span class="line"><span class="built_in">export</span> path=(<span class="variable">$gtkwave_path</span>:<span class="variable">$path</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#set tools path</span></span><br><span class="line"><span class="built_in">export</span> TOOL_PATH=<span class="string">'../../riscv_toolchain'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> wujian100_open_PATH=<span class="string">'`pwd | perl -pe "s/wujian100_open.*/wujian100_open\//"`'</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ../wujian100_open/tools </span><br><span class="line">$ vim setup.sh</span><br><span class="line">$ chmod +x setup.sh</span><br><span class="line">$ <span class="built_in">source</span> setup.sh</span><br></pre></td></tr></table></figure><h3 id="运行仿真"><a href="#运行仿真" class="headerlink" title="运行仿真"></a>运行仿真</h3><p>接下来，进入到 workdir 目录下运行仿真，然后通过 gtkwave 打开仿真波形。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ../workdir</span><br><span class="line">$ ../tools/run_case -sim_tool iverilog ../<span class="keyword">case</span>/timer/timer_test.c</span><br></pre></td></tr></table></figure><p>当你看到 Hello Friend！ 就表明你的仿真就跑起来了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">VCD info: dumpfile test.vcd opened <span class="keyword">for</span> output.</span><br><span class="line">        ******START TO LOAD PROGRAM******</span><br><span class="line"></span><br><span class="line">Hello Friend!</span><br><span class="line"></span><br><span class="line">timer <span class="built_in">test</span> successfully</span><br><span class="line">***************************************</span><br><span class="line"></span><br><span class="line">*              Test Pass              *</span><br><span class="line"></span><br><span class="line">***************************************</span><br><span class="line"></span><br><span class="line">Step4 (Run simulation) is finished</span><br></pre></td></tr></table></figure><p>用 gtkwave 打开 workdir 目录下的 test.vcd 波形文件，查看仿真波形，（打开波形文件需要图形化界面，我这里还安装了 VcXsrv，具体安装方法请自行搜索一下）波形图如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gtkwave test.vcd</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/11/24/MOr25R.png" alt="wujian100_test_wave"></p><p>好了，到这里你的仿真就跑起来了，然后接下来就是进行综合生成 bit 流文件了，下一篇文章在来更新 vivado 综合的步骤。</p><h2 id="跑通仿真视频教程"><a href="#跑通仿真视频教程" class="headerlink" title="跑通仿真视频教程"></a>跑通仿真视频教程</h2><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=76320581&cid=130546912&page=1"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上个月，在第六届互联网大会上，阿里的平头哥，对，就是那个人狠话不多的公司！他们宣布开源了 &lt;code&gt;wujian100&lt;/code&gt; 这个芯片设计平台。搭载基于 RISC-V 架构的玄铁 902 处理器。&lt;br&gt;基础硬件代码和配套软件代码发布在了 GitHub 上了，使用的是 MIT 许可证。大家也都可以去下载学习。&lt;br&gt;GitHub 链接：&lt;a href=&quot;https://github.com/T-head-Semi/wujian100_open&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/T-head-Semi/wujian100_open&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/categories/IC-Design/"/>
    
      <category term="RISC-V" scheme="https://blog.strongwong.top/categories/IC-Design/RISC-V/"/>
    
    
      <category term="Verilog" scheme="https://blog.strongwong.top/tags/Verilog/"/>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/tags/IC-Design/"/>
    
      <category term="RISC-V" scheme="https://blog.strongwong.top/tags/RISC-V/"/>
    
      <category term="平头哥" scheme="https://blog.strongwong.top/tags/%E5%B9%B3%E5%A4%B4%E5%93%A5/"/>
    
      <category term="wujian100" scheme="https://blog.strongwong.top/tags/wujian100/"/>
    
  </entry>
  
  <entry>
    <title>FPGA 数字图像处理联合仿真平台的搭建及使用举例</title>
    <link href="https://blog.strongwong.top//posts/FPGA-%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E8%81%94%E5%90%88%E4%BB%BF%E7%9C%9F%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B.html"/>
    <id>https://blog.strongwong.top//posts/FPGA-数字图像处理联合仿真平台的搭建及使用举例.html</id>
    <published>2019-09-02T13:25:33.000Z</published>
    <updated>2019-11-21T14:06:56.740Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着物联网技术的不断发展，对边缘计算的性能要求愈发苛刻，传统的 IoT 级别的 SoC 或者 MCU 难以应对诸如图像识别的场景需求，因此 FPGA + MCU 或 FPGA + SoC 的异构架构愈来愈多地应用于上述场景中，以满足相关需求。（以上这段话毫无意义，只是为了凑字数，另外为了纪念第三次憾负的开场白）</p><a id="more"></a><p>当前 FPGA 发展火热，众多开发者使用 FPGA 来完成部分图像处理的部分功能，但众所周知纯 FPGA 开发（或者数字 IC 设计）与常见的 ARM A 系列（with OS）或者桌面端 PC 在图像处理开发过程中最大的差别在于过程的可视化。开发过程中的可视化多少会影响到开发者对于图像处理的判断与取舍，简而言之，如果开发者都不知道经过了这一步处理后图像变成了什么样，那还如何继续接下来的步骤。因此分享交流一下在本次车牌识别设计中我们所用到的数字图像处理的联合仿真平台（<em>注：本文仅仅介绍平台使用方式，不介绍过程中涉及到的数字图像处理原理</em>），如果有更好的方式，希望大家可以留言给予建议~</p><h2 id="首先是我们所需要的软件工具："><a href="#首先是我们所需要的软件工具：" class="headerlink" title="首先是我们所需要的软件工具："></a>首先是我们所需要的软件工具：</h2><p>本次我们的开发环境为 Win10 所用到的软件工具分别为：<code>Modelsim(10.5B)</code>, <code>MATLAB(R2019a)</code></p><p>然后简述一下我们的操作过程（以图片 RGB 色域转换 YCbCr 色域处理为例），整体过程可简述如下：通过 MATLAB 将图片文件转换为 <code>.txt</code> 格式文件，使用 Verilog 读取相应文件后完成相应图像处理操作后输出为 <code>.txt</code> 文件，再次使用 MATLAB 将输出的 <code>.txt</code> 格式文件转换为图片文件并查看。以上步骤的意义在于不仅可以实现数字图像处理的单步可视化，还可以同原始的 MATLAB 对应的处理效果进行对比。(后期我们也会更新，直接使用 Verilog 完成图像读取并输出结果查看的方法)</p><p>首先我们通过以下程序(亦可查看附带工程中的 <code>IMG2TXT.m</code> 文件)在 MATLAB 端将图片生成 R,G,B 色域对应的 <code>.txt</code> 格式文件。并同时通过 MATLAB 生成 YCbCr 色域下三个分量的图像予以显示。<br>其关键代码如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">clear all</span><br><span class="line">close all</span><br><span class="line">clc</span><br><span class="line">img = imread(<span class="string">'test.jpg'</span>);</span><br><span class="line">[a,b,c]= <span class="built_in">size</span>(img);</span><br><span class="line">R1=img(:,:,<span class="number">1</span>);</span><br><span class="line">G1=img(:,:,<span class="number">2</span>);</span><br><span class="line">B1=img(:,:,<span class="number">3</span>);</span><br><span class="line"> </span><br><span class="line">fidR1= fopen(<span class="string">'testR.txt'</span>,<span class="string">'w'</span>);</span><br><span class="line">fidG1= fopen(<span class="string">'testG.txt'</span>,<span class="string">'w'</span>);</span><br><span class="line">fidB1= fopen(<span class="string">'testB.txt'</span>,<span class="string">'w'</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:a</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>= <span class="number">1</span>:b</span><br><span class="line">      fprintf(fidR1,<span class="string">'%d\n'</span>,R1(<span class="built_in">i</span>,<span class="built_in">j</span>)); <span class="comment">%frame1</span></span><br><span class="line">      fprintf(fidG1,<span class="string">'%d\n'</span>,G1(<span class="built_in">i</span>,<span class="built_in">j</span>));</span><br><span class="line">      fprintf(fidB1,<span class="string">'%d\n'</span>,B1(<span class="built_in">i</span>,<span class="built_in">j</span>));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fclose(fidR1);</span><br><span class="line">fclose(fidG1);</span><br><span class="line">fclose(fidB1);</span><br></pre></td></tr></table></figure><h2 id="RGB-色域文件生成"><a href="#RGB-色域文件生成" class="headerlink" title="RGB 色域文件生成"></a>RGB 色域文件生成</h2><p>生成对应 RGB 色域 <code>.txt</code> 格式文件如下图所示：</p><p><img src="https://s2.ax1x.com/2019/09/02/nidDTs.png" alt="RGB.txt"></p><p>生成 YCbCr 色域对应分量图片(详见工程文件 <code>YCbCr.m</code> )，如下图所示：</p><p><img src="https://s2.ax1x.com/2019/09/02/niwnNn.png" alt="YCbCr"></p><h2 id="Verilog-处理"><a href="#Verilog-处理" class="headerlink" title="Verilog 处理"></a>Verilog 处理</h2><p>然后在我们的 Modelsim 工程中对 <code>.txt</code> 格式文件进行读取(亦可查看工程中附带的 imread.v 文件)，进一步的完成图像处理对应的操作后，输出对应 <code>.txt</code> 格式文件（亦可查看工程中附带 imwrite.v 文件）。<br>其 txt 读取关键代码如下：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">  fR = <span class="built_in">$fopen</span>(<span class="string">"testR.txt"</span>,<span class="string">"r"</span>);   <span class="comment">// read in testR.txt</span></span><br><span class="line">  fG = <span class="built_in">$fopen</span>(<span class="string">"testG.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line">  fB = <span class="built_in">$fopen</span>(<span class="string">"testB.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line">  <span class="keyword">if</span>(fR == <span class="meta">`NULL || fG == `NULL || fB == `NULL) begin</span></span><br><span class="line">    <span class="built_in">$display</span>(<span class="string">"data_file handle was NULL"</span>);</span><br><span class="line"><span class="built_in">$finish</span>;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">    <span class="built_in">$fscanf</span>(fR,<span class="string">"%d;\n"</span>,R);</span><br><span class="line"><span class="built_in">$fscanf</span>(fG,<span class="string">"%d;\n"</span>,G);</span><br><span class="line"><span class="built_in">$fscanf</span>(fB,<span class="string">"%d;\n"</span>,B);</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> pixel_clk <span class="keyword">or</span> <span class="keyword">negedge</span> reset_n) <span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span>(reset_n == <span class="number">0</span>) <span class="keyword">begin</span></span><br><span class="line">    R = <span class="number">8'd0</span>;</span><br><span class="line">G = <span class="number">8'd0</span>;</span><br><span class="line">B = <span class="number">8'd0</span>;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(de) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(fR != <span class="number">0</span> &amp;&amp; fG != <span class="number">0</span> &amp;&amp; fB != <span class="number">0</span>) <span class="keyword">begin</span></span><br><span class="line"> <span class="built_in">$fscanf</span>(fR,<span class="string">"%d;\n"</span>,R);</span><br><span class="line"> <span class="built_in">$fscanf</span>(fG,<span class="string">"%d;\n"</span>,G);</span><br><span class="line"> <span class="built_in">$fscanf</span>(fB,<span class="string">"%d;\n"</span>,B);</span><br><span class="line"> <span class="built_in">$display</span>(<span class="string">"time=[%d],%d,%d,%d"</span>,<span class="built_in">$realtime</span>,R,G,B);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>完成处理后生成 txt 关键代码如下：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">  fR = <span class="built_in">$fopen</span>(<span class="string">"R.txt"</span>,<span class="string">"w"</span>);</span><br><span class="line">  fG = <span class="built_in">$fopen</span>(<span class="string">"G.txt"</span>,<span class="string">"w"</span>);</span><br><span class="line">  fB = <span class="built_in">$fopen</span>(<span class="string">"B.txt"</span>,<span class="string">"w"</span>);</span><br><span class="line">  <span class="keyword">if</span>(fR == <span class="meta">`NULL || fG == `NULL || fB == `NULL) begin</span></span><br><span class="line">    <span class="built_in">$display</span>(<span class="string">"can not open R.txt or G.txt or B.txt"</span>);</span><br><span class="line"><span class="built_in">$finish</span>;</span><br><span class="line">  <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> pixel_clk <span class="keyword">or</span> <span class="keyword">negedge</span> reset_n) <span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span>(de) <span class="keyword">begin</span></span><br><span class="line">    <span class="built_in">$display</span>(<span class="string">"////////////////////////////////////"</span>);</span><br><span class="line">    <span class="built_in">$display</span>(<span class="string">"time=[%d],%d,%d,%d"</span>,<span class="built_in">$realtime</span>,R,G,B);</span><br><span class="line">    <span class="built_in">$fwrite</span>(fR,<span class="string">"%d\n"</span>,R);</span><br><span class="line"><span class="built_in">$fwrite</span>(fG,<span class="string">"%d\n"</span>,G);</span><br><span class="line"><span class="built_in">$fwrite</span>(fB,<span class="string">"%d\n"</span>,B);</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="处理结果"><a href="#处理结果" class="headerlink" title="处理结果"></a>处理结果</h2><p>最终在 MATLAB 端将仿真生成输出的 <code>.txt</code> 文件转换还原为图片（亦可查看工程中附带的 TXT2IMG.M 文件）。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">clear all</span><br><span class="line">close all</span><br><span class="line">clc</span><br><span class="line"> </span><br><span class="line">imgori = imread(<span class="string">'test.jpg'</span>);</span><br><span class="line">[a,b,c]= <span class="built_in">size</span>(imgori);</span><br><span class="line"> </span><br><span class="line">img1R = uint8(textread(<span class="string">'R.txt'</span>,<span class="string">'%u'</span>));</span><br><span class="line">img1G = uint8(textread(<span class="string">'G.txt'</span>,<span class="string">'%u'</span>));</span><br><span class="line">img1B = uint8(textread(<span class="string">'B.txt'</span>,<span class="string">'%u'</span>));</span><br><span class="line"> </span><br><span class="line">img1(:,:,<span class="number">1</span>) = <span class="built_in">reshape</span>(img1R,[b,a]);</span><br><span class="line">img1(:,:,<span class="number">2</span>) = <span class="built_in">reshape</span>(img1G,[b,a]);</span><br><span class="line">img1(:,:,<span class="number">3</span>) = <span class="built_in">reshape</span>(img1B,[b,a]);</span><br><span class="line"> </span><br><span class="line">img=<span class="built_in">flipdim</span>(img1,<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">figure</span>,</span><br><span class="line">subplot(<span class="number">221</span>),imshow(imrotate(img,<span class="number">-90</span>)),title(<span class="string">'YCbCr'</span>);</span><br><span class="line">subplot(<span class="number">222</span>),imshow(imrotate(img(:,:,<span class="number">1</span>),<span class="number">-90</span>)),title(<span class="string">'Y'</span>);</span><br><span class="line">subplot(<span class="number">223</span>),imshow(imrotate(img(:,:,<span class="number">2</span>),<span class="number">-90</span>)),title(<span class="string">'Cb'</span>);</span><br><span class="line">subplot(<span class="number">224</span>),imshow(imrotate(img(:,:,<span class="number">3</span>),<span class="number">-90</span>)),title(<span class="string">'Cr'</span>);</span><br></pre></td></tr></table></figure><p>由于常见的 FPGA 数字图像处理为了减少数据读取对于缓存资源的消耗，通常其处理步骤在视频流完成，因此本次工程中我们在 VGA 模拟时序中完成相应操作。完成仿真如波形下图所示：</p><p><img src="https://s2.ax1x.com/2019/09/02/ni04iR.png" alt="Waveform"></p><p>生成结果 <code>.txt</code> 文件如下图所示:<br><img src="https://s2.ax1x.com/2019/09/02/ni0Xod.png" alt="Outfile"></p><p>将生成结果 <code>.txt</code> 文件放回 MATLAB 工程路径下最终实现效果如下图所示：</p><p><img src="https://s2.ax1x.com/2019/09/02/niB6fI.png" alt="Outfile of FPGA"></p><h2 id="MATLAB-vs-HDL数字图像处理-结果对比"><a href="#MATLAB-vs-HDL数字图像处理-结果对比" class="headerlink" title="MATLAB vs HDL数字图像处理 结果对比"></a>MATLAB vs HDL数字图像处理 结果对比</h2><p>将图像放大后，可以明显发现通过数字思想处理得到的图片结果相较于 MATLAB 直接转换得到的结果存在一定的差距，Cr 分量下表现的最为明显，具体原因在此不具体展开分析。其对比如下图（<em>注：左侧为 MATLAB 处理结果右侧为 verilog 处理结果</em>）</p><p><img src="https://s2.ax1x.com/2019/09/02/niwkjS.png" alt="Matlab vs HDL"></p><p>之后我们将逐步介绍本次我们 ARM 杯车牌识别系统的每个实现过程~</p><p> <font color=#FF0000 size=6>  并公开全套设计源码！！！ </font></p><p>举例部分全部代码详见 GitHub 仓库：<a href="https://github.com/strongwong/FPGA-DIP" target="_blank" rel="noopener">https://github.com/strongwong/FPGA-DIP</a></p><p><strong>By Ricky</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;随着物联网技术的不断发展，对边缘计算的性能要求愈发苛刻，传统的 IoT 级别的 SoC 或者 MCU 难以应对诸如图像识别的场景需求，因此 FPGA + MCU 或 FPGA + SoC 的异构架构愈来愈多地应用于上述场景中，以满足相关需求。（以上这段话毫无意义，只是为了凑字数，另外为了纪念第三次憾负的开场白）&lt;/p&gt;
    
    </summary>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/categories/IC-Design/"/>
    
      <category term="其他" scheme="https://blog.strongwong.top/categories/IC-Design/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="数字图像处理" scheme="https://blog.strongwong.top/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
      <category term="FPGA仿真" scheme="https://blog.strongwong.top/tags/FPGA%E4%BB%BF%E7%9C%9F/"/>
    
      <category term="Verilog" scheme="https://blog.strongwong.top/tags/Verilog/"/>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/tags/IC-Design/"/>
    
  </entry>
  
  <entry>
    <title>拆解一个很有意思的开关</title>
    <link href="https://blog.strongwong.top//posts/%E6%8B%86%E8%A7%A3%E4%B8%80%E4%B8%AA%E5%BE%88%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%BC%80%E5%85%B3.html"/>
    <id>https://blog.strongwong.top//posts/拆解一个很有意思的开关.html</id>
    <published>2019-08-30T12:54:54.000Z</published>
    <updated>2019-11-21T14:06:56.929Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2019/08/30/mjONAf.jpg" alt="linptech-sw"></p><p>最近公司买了一个很有意思的开关，说是叫无源无线开关。无线嘛，就是没有电线连接，是无线的，好像是 433 无线模块通讯的。所谓无源就是没有电池或者其他直接的电源供电了，是一个自发电的开关。就是上图这个东东，我很是好奇，很想知道他这个自发电的开关内部是个什么样子，那我们拆开看看吧~ 嘿嘿~~</p><a id="more"></a><p>趁着下班了，大家都不在，我一个人开始在公司开拆！</p><p><img src="https://s2.ax1x.com/2019/08/30/mjXWZt.jpg" alt="外壳"></p><p>这个无源无线开关和其他普通开关从外观上来看都差不多。它的塑料外壳和普通开关一样，轻轻撬开即可。打开外壳我们可以看到一根铜线，这应该就是用于无线通讯的天线了。卸下按键壳，下面就是整个开关的主体模块了。开关的主体很牢固的卡在底座上，只能硬撬下来了。</p><p><img src="https://s2.ax1x.com/2019/08/30/mjzJFx.jpg" alt="开关主体"></p><p>开关主体拿下来还是可以正常使用的，当我把主板上的壳子拆下来后，开关就不可以自发电了。主板的正面有 5 个电容按键，具体功能不得而知，可能是备用、兼容或者是为调试预留的？</p><p>拿下电容按键，看到主板背面线圈的一瞬间，相信中学物理还可以的朋友应该都能反应过来，这个开关的自发电原理应该就是咱们学过的电磁感应原理啊！通过线圈切割磁感线然后产生电能供应给其他电路使用。我迫不及待地卸下主板，想一探究竟，看看是不是我想的这样。但是主板和底座之间有一些机械机构互相钳制，费了好大力气才将主板卸下。</p><p><img src="https://s2.ax1x.com/2019/08/30/mvCbVJ.jpg" alt="磁铁簧片结构"><br><img src="https://s2.ax1x.com/2019/08/30/mvCqa9.jpg" alt="主体拆解图"></p><p>卸下主板后，我们看到底座上确实有一个由三个铆钉固定的磁铁。哈哈，果然是这样。在主体的壳子上有一个弹簧，怼着底座上的拨动机构，在开关按下的时候，拨动机构带动簧片拨动磁铁，磁铁的移动在线圈那端是有限位的，磁铁在一瞬间移动就相当于线圈切割了一次磁感线，从而产生电能给到其他负载。</p><blockquote><ul><li>拨杆机构细节图，挺有意思的一个结构。<br><img src="https://s2.ax1x.com/2019/08/30/mvCL5R.jpg" alt="拨杆机构"></li></ul></blockquote><p>然后来详细看一下主板：</p><p><img src="https://s2.ax1x.com/2019/08/30/mvCXP1.jpg" alt="MainBoard"></p><p>在主板上主要有一颗 TI 的 <a href="http://www.ti.com.cn/product/cn/CC115L" target="_blank" rel="noopener"><code>CC115L</code></a> 超值射频发射芯片、一颗 ST 的 <a href="https://www.st.com/content/st_com/en/products/microcontrollers-microprocessors/stm8-8-bit-mcus/stm8s-series/stm8s-value-line/stm8s003f3.html" target="_blank" rel="noopener"><code>stm8s003f3p6</code></a> 8 位单片机、一个线圈以及电能采集储能电路。 <code>stm8s003</code>+<code>CC115L/CC113L</code> 的搭配在无线智能家居等场景好像应用很多。具体的芯片资料大家直接看厂商的 datasheet 吧，这里就不多做介绍了。</p><p>我仔细研究一下这个磁感线圈电能采集存储电路，主要有 5 个肖特基二极管，一个稳压二极管，一个 PMOS和一个 NMOS 丝印分别是 <code>1GM 、2GM</code> ，以及一个丝印为 <code>A18F</code>的未知芯片，没有找到直接对应的芯片型号，但根据电感来判断应该是一个 DC-DC 转换器，至于应该是降压还是升压就不太清楚了，因为拆开后就没有办法拨动开关产生电能，来测试对应点的电位了。我个人觉得这个线圈应该生产不了多大的电压，所以这里可能是一个升压的。通过按压，电磁线圈产生电能后，通过前级的电路采集后，到电感这里短暂存储，供控制器和射频芯片短暂地工作几十毫秒把控制信号发射出去，这样就可以控制接收端的各种设备了。简单理解了这部分的电路后，我简单绘制了一下这部分的原理图，不一定完全正确，但大体上应该是对的。有兴趣的朋友可以帮我看看，如果有什么错误的地方欢迎给我留言指正。</p><p><img src="https://s2.ax1x.com/2019/08/30/mvPfdH.png" alt="能量采集电路"></p><p>好了！这一次的拆解就到这里啦<del>，我要赶快装回去了，不能让大家发现！（逃</del>）</p><p>简单总结一下吧！</p><blockquote><ul><li>这个无源无线开关还是很 nice 的，不用布线，不用电池，自发电，节能环保！发电线圈的设计也不失为一种新的低功耗方案，在一些更小体积的应用场景可能不太合适吧。</li><li>神奇的事情背后都有基本的科学知识，中学的物理知识就这样实际运用在我们的日常生活中啦！</li><li>还有拆东西是一件很爽的事情！哈哈哈！</li></ul></blockquote><p>Have fun~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/08/30/mjONAf.jpg&quot; alt=&quot;linptech-sw&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近公司买了一个很有意思的开关，说是叫无源无线开关。无线嘛，就是没有电线连接，是无线的，好像是 433 无线模块通讯的。所谓无源就是没有电池或者其他直接的电源供电了，是一个自发电的开关。就是上图这个东东，我很是好奇，很想知道他这个自发电的开关内部是个什么样子，那我们拆开看看吧~ 嘿嘿~~&lt;/p&gt;
    
    </summary>
    
      <category term="拆机" scheme="https://blog.strongwong.top/categories/%E6%8B%86%E6%9C%BA/"/>
    
    
      <category term="拆解" scheme="https://blog.strongwong.top/tags/%E6%8B%86%E8%A7%A3/"/>
    
      <category term="无线" scheme="https://blog.strongwong.top/tags/%E6%97%A0%E7%BA%BF/"/>
    
      <category term="自发电开关" scheme="https://blog.strongwong.top/tags/%E8%87%AA%E5%8F%91%E7%94%B5%E5%BC%80%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>拆解某宝上热销的一款蓝牙耳机</title>
    <link href="https://blog.strongwong.top//posts/%E6%8B%86%E8%A7%A3%E6%9F%90%E5%AE%9D%E4%B8%8A%E7%83%AD%E9%94%80%E7%9A%84%E4%B8%80%E6%AC%BE%E8%93%9D%E7%89%99%E8%80%B3%E6%9C%BA.html"/>
    <id>https://blog.strongwong.top//posts/拆解某宝上热销的一款蓝牙耳机.html</id>
    <published>2019-08-28T13:52:27.000Z</published>
    <updated>2019-11-21T14:06:56.937Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2019/08/28/mHGnqP.png" alt="mHGnqP.png"></p><p>前些天在某宝上购买了一个蓝牙耳机，想着跑步的时候可以听听音乐。我对耳机的要求也不高，听个响就行。于是，就下单了这个在某宝上热销的(10w+)超便宜的蓝牙耳机，只要 <code>￥19.9</code> 还包邮！</p><p>用了几天，这个耳机对于只是听个响的我来说绝对 ok！也是对的起它这个价位了。但是没用几天，因为我的疏忽，没有将耳机从口袋拿出来，所以就跟着衣服一起在洗衣机里搅了 40 分钟……</p><a id="more"></a><p>当我将它拿出来，晾干后，还能开机，正常连接手机。哈哈哈，没坏！我大喜过望，于是我赶忙播放音乐试试，结果发现就在连接上的一瞬间会有音乐。哎！乐极生悲了。它还是坏了，那就在扔掉之前看看它里面都有些什么吧…….</p><p>我想按键控制区貌似比较好拆一些，先拆这个吧。结果，没办法还是不好拆，那就暴力点吧！</p><p><img src="https://s2.ax1x.com/2019/08/28/mHUruj.jpg" alt="mHUruj.jpg"></p><p>拆开后我们可以看到，蓝牙耳机的主要器件都分布在主板的正面。包括 一颗蓝牙 SoC 芯片，一个麦克风，三个贴了防水的按键，两个 LED 灯，一颗 26MHz 有源晶振以及 PCB 板载天线和一些阻容元器件。从主板正面看到有电感，因此可以推断芯片内部应该是集成了 BUCK 的，以降低芯片内部工作电压，降低功耗，从而提高待机时间，达到长时间使用的目的。</p><p><img src="https://s2.ax1x.com/2019/08/28/mHs0nU.jpg" alt="mHs0nU.jpg"></p><p>关于这个耳机的蓝牙主控芯片，貌似是支持蓝牙 5.0 的，但是我的手机不是所以也就不得而知了。我想根据这个丝印信息，找到关于这颗 SoC 芯片的一些信息，但是在网上我是怎么也没有找到对应的生产公司。这颗 SoC 上丝印的信息是 <code>DCFB14D7B</code>，找了半天好像也就这个公司的 logo 和芯片上的比较符合，一个叫<a href="http://www.abell.net.cn/" target="_blank" rel="noopener"><strong>欧标</strong></a>的公司。神奇的是这个公司貌似是做对讲机、中继台等无线通讯整机产品的公司。在官网上没有找到任何一个地方提到过他们有设计过蓝牙 SoC，但是由于他们也是做无线通讯相关产品的公司，所以我觉得很大概率上是这个公司的芯片。</p><p><img src="https://s2.ax1x.com/2019/08/28/mHfAJg.jpg" alt="mHfAJg.jpg"><br><img src="https://s2.ax1x.com/2019/08/28/mH5myd.jpg" alt="mH5myd.jpg"></p><p>我在搜索的过程中，还发现了一位智利的老哥拆解过一个，在全球速卖通上购买的 TWS 蓝牙耳机，也是使用的这颗蓝牙芯片（<a href="http://blog.victroniko.cl/blog/post/teardown-bluetooth-tws-t012-es" target="_blank" rel="noopener">他的拆解</a>）。照这样看，我觉得这个公司的蓝牙芯片应该是占据了中低端蓝牙耳机的大部分份额，神奇的是竟然还不为人所熟知！哦，对了这也是一个深圳南山区的公司，深圳南山区卧虎藏龙啊！哈哈哈！</p><p>主板的背面到没有什么东西了，主要就是一个 Micro USB 充电口，三个测试点以及连接两个听筒和电池的连接线。整个板的大小也就 <code>42mm * 5mm</code> ，集成度还是很高的。从 PCB 的生产日期（<code>20190612</code>）看，这批耳机貌似还是比较新的。</p><p><img src="https://s2.ax1x.com/2019/08/28/mHdq1O.jpg" alt="mHdq1O.jpg"></p><p>然后我们拆开电池仓看看，这是一块标称 <code>3.7v/200mAH</code> 的锂电池，接了两根从 PCB 拉过来的电源线。在电池的电源端我们还看到一块很小的 PCB，上面有两颗芯片。一颗是 <code>DW01A</code>，这是一颗锂电池保护 IC。主要是为了防止因为过充、过放、大电流等因素导致锂电池寿命缩短或者损坏的锂电池专用 IC。另外一颗是 <code>8205</code>，这是一颗双 MOS 开关芯片，主要是用来配合 DW01A 来共同构成锂电池保护电路。一路 MOS 用来控制防止过充，另一路 MOS 用来控制防止过放。</p><p><img src="https://s2.ax1x.com/2019/08/29/mHTPwn.jpg" alt="mHTPwn.jpg"><br><img src="https://s2.ax1x.com/2019/08/29/mHTCes.jpg" alt="mHTCes.jpg"></p><p>好了，到这里我们的拆解就基本完成了~ </p><p>总结一下：</p><blockquote><ul><li>这个耳机虽然便宜，但是做工基本 Ok，对得起它这个价位了。</li><li>耳机内部虽然简单，但也是五章俱全了，该有的都有。</li><li>一个神奇的蓝牙芯片公司，做了低功耗设计，工作和待机时间都还可以。</li></ul></blockquote><p>Have fun ~</p><hr><p>后记：有朋友给我指正了，这颗 AB 芯片是中科蓝讯这个公司的，在此说明一下。但是我还是没有找到关于这颗芯片更详细的资料了，Datasheet 也没有，那就这样吧！哦，对了这依然是一家深圳南山的公司，哈哈哈！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/08/28/mHGnqP.png&quot; alt=&quot;mHGnqP.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;前些天在某宝上购买了一个蓝牙耳机，想着跑步的时候可以听听音乐。我对耳机的要求也不高，听个响就行。于是，就下单了这个在某宝上热销的(10w+)超便宜的蓝牙耳机，只要 &lt;code&gt;￥19.9&lt;/code&gt; 还包邮！&lt;/p&gt;
&lt;p&gt;用了几天，这个耳机对于只是听个响的我来说绝对 ok！也是对的起它这个价位了。但是没用几天，因为我的疏忽，没有将耳机从口袋拿出来，所以就跟着衣服一起在洗衣机里搅了 40 分钟……&lt;/p&gt;
    
    </summary>
    
      <category term="拆机" scheme="https://blog.strongwong.top/categories/%E6%8B%86%E6%9C%BA/"/>
    
    
      <category term="拆解" scheme="https://blog.strongwong.top/tags/%E6%8B%86%E8%A7%A3/"/>
    
      <category term="蓝牙" scheme="https://blog.strongwong.top/tags/%E8%93%9D%E7%89%99/"/>
    
      <category term="耳机" scheme="https://blog.strongwong.top/tags/%E8%80%B3%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Windows10 环境下搭建 RISC-V 调试环境</title>
    <link href="https://blog.strongwong.top//posts/Windows10-%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BA-RISC-V-%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83.html"/>
    <id>https://blog.strongwong.top//posts/Windows10-环境下搭建-RISC-V-调试环境.html</id>
    <published>2019-03-11T02:32:02.000Z</published>
    <updated>2019-12-02T06:58:07.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><h3 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h3><ul><li>IDE: <a href="https://github.com/gnu-mcu-eclipse/org.eclipse.epp.packages/releases" target="_blank" rel="noopener">GNU MCU Eclipse IDE for C/C++ Developers</a></li><li>IDE 插件: <a href="https://github.com/gnu-mcu-eclipse/eclipse-plugins/releases" target="_blank" rel="noopener">GNU MCU Eclipse plug-ins</a></li><li>GCC/GDB 工具: <a href="https://github.com/gnu-mcu-eclipse/riscv-none-gcc/releases" target="_blank" rel="noopener">GNU MCU Eclipse RISC-V Embedded GCC</a></li><li>调试工具: <a href="https://github.com/gnu-mcu-eclipse/openocd/releases" target="_blank" rel="noopener">GNU MCU Eclipse OpenOCD</a></li><li>make 工具: <a href="https://github.com/gnu-mcu-eclipse/windows-build-tools/releases" target="_blank" rel="noopener">GNU MCU Eclipse Windows Build Tools</a></li><li>Zadig 工具: <a href="https://zadig.akeo.ie/" target="_blank" rel="noopener">Zadig</a></li></ul><h3 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h3><ul><li>目标 RISC-V 芯片</li><li>调试器： J-Link，FT2232 或其他含有标准 JTAG 接口的调试器</li></ul><a id="more"></a><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>以下内容来自 ChenRQ 同学！</p><p>启动 IDE: GNU MCU Eclipse IDE for C/C++ Developers，Eclipse 基于 Java 开发，运行时需要 Java 的运行环境(JRE)，如没有请自行安装。</p><h2 id="新建一个工程"><a href="#新建一个工程" class="headerlink" title="新建一个工程"></a>新建一个工程</h2><p><img src="https://i.loli.net/2019/02/26/5c7540a7474bf.png" alt="新建工程"></p><p>工程类型选择 Hello World RISC-V C Project，工具链选择 RISC-V Cross GCC 如下所示</p><p><img src="https://i.loli.net/2019/02/26/5c754155033e4.png" alt="项目类型设置"></p><p>使用默认配置 next 至 GNU 工具链选择， 文件路径应指向为您的 RISC-V Embedded GCC 目录下的 bin 文件夹，如下图所示</p><p><img src="https://i.loli.net/2019/02/26/5c7542f86b719.png" alt="工具链路径设置"></p><p>完成后点击 Finish 由此完成工程项目的创建。创建完成后，我们可以看到还有一个报错， 如下图所示</p><p><img src="https://i.loli.net/2019/02/26/5c7543a17226b.png" alt="工程创建完成界面"></p><p>因此我们还需要继续对项目进行配置。</p><h2 id="工程相关配置"><a href="#工程相关配置" class="headerlink" title="工程相关配置"></a>工程相关配置</h2><p>对工程右键选择 “properties”，在 MCU 选栏中配置 Build Tools Path，该路径应指向您的 Build Tools 目录下的 bin 文件夹，如下图所示</p><p><img src="https://i.loli.net/2019/02/26/5c7544fd07eb8.png" alt="Build Tools 路径配置"></p><p>继续配置 OpenOCD Path，路径为 OpenOCD 目录下的 bin 文件夹，如下图所示，并点击apply</p><p><img src="https://i.loli.net/2019/02/26/5c75487c1f6cf.png" alt="OpenOCD 路径配置"></p><p>再配置 RISC-V Toolchain Path（若新建项目时已配置过工具链路径，可以跳过此步骤），配置路径与工程建立时选择的工具链路径相同。</p><h2 id="配置编译和链接选项"><a href="#配置编译和链接选项" class="headerlink" title="配置编译和链接选项"></a>配置编译和链接选项</h2><p>继续在 “properties” 窗口中，选择 C/C++ Build 中的 settings，在 Tool Settings 中 Target Processor 进行配置，由于是 RISC-V，因此架构 (architecture) 选择 RV32I 并勾选乘法指令拓展(RVM)，原子指令拓展(RVA)及压缩指令拓展(RVC)，ABI 调用选择 ILP32(表明为 32 位架构无浮点型，PS: ilp32f 和 ilp32d 则分别表示单精度浮点和双精度浮点)，Code Model 选择 Medium Low，勾选整数除法指令(-mdiv)，如下图所示，并点击 apply</p><p><img src="https://i.loli.net/2019/02/26/5c7548ff7b8fb.png" alt="Target Processor 配置"></p><p>继续配置 Optimization，Level 选择 -O2，如下图所示，并点击 apply</p><p><img src="https://i.loli.net/2019/02/26/5c7549557f2eb.png" alt="Optimization 配置"></p><p>继续配置 Debugging，Level 选择 -g，如下图所示，并点击 apply</p><p><img src="https://i.loli.net/2019/02/26/5c7549be00c12.png" alt="Debugging 配置"></p><p>在 Tool Settings 中选择 GNU RISC-V Cross C Linker 的 General，点击右上角+号，弹窗中选择 Workspace 选择路径您芯片对应的 lds 文件，用于对地址区间进行约束，如下图所示</p><p><img src="https://i.loli.net/2019/02/26/5c754a785cc2d.png" alt="链接脚本配置"></p><p>勾选对应选项后，点击 apply,如下图所示</p><p><img src="https://i.loli.net/2019/02/26/5c754ad5a9b74.png" alt="链接选项配置"></p><p>在 Tool Settings 中选择 GNU RISC-V Cross C Linker 的 Miscellaneous 进行勾选，如下图所示，并点击 apply</p><p><img src="https://i.loli.net/2019/02/26/5c754b533251d.png" alt="链接杂项配置"></p><p>添加您的工程汇编类型的头文件路径，方法如下图所示</p><p><img src="https://i.loli.net/2019/02/26/5c754c158df6a.png" alt="添加工程汇编头文件目录"></p><p>添加您的工程 C/C++ 类型的头文件路径，方法如下图所示</p><p><img src="https://i.loli.net/2019/02/26/5c754c158df6a.png" alt=" 添加工程 C/C++ 头文件目录"></p><p>待续… </p><p>后续测试进行中…</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境要求&quot;&gt;&lt;a href=&quot;#环境要求&quot; class=&quot;headerlink&quot; title=&quot;环境要求&quot;&gt;&lt;/a&gt;环境要求&lt;/h2&gt;&lt;h3 id=&quot;软件环境&quot;&gt;&lt;a href=&quot;#软件环境&quot; class=&quot;headerlink&quot; title=&quot;软件环境&quot;&gt;&lt;/a&gt;软件环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;IDE: &lt;a href=&quot;https://github.com/gnu-mcu-eclipse/org.eclipse.epp.packages/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GNU MCU Eclipse IDE for C/C++ Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IDE 插件: &lt;a href=&quot;https://github.com/gnu-mcu-eclipse/eclipse-plugins/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GNU MCU Eclipse plug-ins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GCC/GDB 工具: &lt;a href=&quot;https://github.com/gnu-mcu-eclipse/riscv-none-gcc/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GNU MCU Eclipse RISC-V Embedded GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;调试工具: &lt;a href=&quot;https://github.com/gnu-mcu-eclipse/openocd/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GNU MCU Eclipse OpenOCD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;make 工具: &lt;a href=&quot;https://github.com/gnu-mcu-eclipse/windows-build-tools/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GNU MCU Eclipse Windows Build Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Zadig 工具: &lt;a href=&quot;https://zadig.akeo.ie/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Zadig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;硬件要求&quot;&gt;&lt;a href=&quot;#硬件要求&quot; class=&quot;headerlink&quot; title=&quot;硬件要求&quot;&gt;&lt;/a&gt;硬件要求&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;目标 RISC-V 芯片&lt;/li&gt;
&lt;li&gt;调试器： J-Link，FT2232 或其他含有标准 JTAG 接口的调试器&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="嵌入式" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="RISC-V" scheme="https://blog.strongwong.top/tags/RISC-V/"/>
    
  </entry>
  
  <entry>
    <title>使用汇编实现 pc 和 sp 的保存及恢复操作</title>
    <link href="https://blog.strongwong.top//posts/%E4%BD%BF%E7%94%A8%E6%B1%87%E7%BC%96%E5%AE%9E%E7%8E%B0-pc-%E5%92%8C-sp-%E7%9A%84%E4%BF%9D%E5%AD%98%E5%8F%8A%E6%81%A2%E5%A4%8D%E6%93%8D%E4%BD%9C.html"/>
    <id>https://blog.strongwong.top//posts/使用汇编实现-pc-和-sp-的保存及恢复操作.html</id>
    <published>2019-01-13T11:32:27.000Z</published>
    <updated>2019-11-21T14:06:56.853Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 ARM Cortex 系列的芯片中本来就有一套保护现场的机制，例如当产生了一个中断时，会自动将当前寄存器的值入栈，并在 lr（r14） 寄存器中保存将要返回的 pc 值，在中断服务程序执行完成后将 pc 恢复到之前的位置。如果在执行中断服务程序的时候又发生了优先级更高的中断，也就是说发生了中断嵌套，这是将再次进行现场保护，同时 lr 值会被压栈（上一次的 pc ），新的 lr 生成。</p><p>但是在一些场景下，这样的机制就不太好用了，比如说要进入 sleep 模式 cpu 掉电了，想要恢复到掉电前的状态。这样的话就需要我们自己实现保护现场了，下面就来简单介绍一下我的实现。</p><a id="more"></a><h2 id="硬件及-IDE-环境"><a href="#硬件及-IDE-环境" class="headerlink" title="硬件及 IDE 环境"></a>硬件及 IDE 环境</h2><ul><li>硬件: Cortex-M3 FPGA 开发板</li><li>IDE: IAR 8.22.1</li></ul><p>在进行 FPGA 验证之前，还跑了 RTL 的仿真，从仿真波形的结果来看也是正确的。</p><h2 id="c-文件"><a href="#c-文件" class="headerlink" title="c 文件"></a>c 文件</h2><p>现场保护主要就是保存当前的运行状态，在从 sleep 模式唤醒后将保存的状态恢复，使 cpu 回到到 sleep 之前的状态。在我们这里最主要的是保存 pc 和 sp 的值，cpu 唤醒之后恢复 pc 和 sp 就好，所以我们需要将进入 sleep 之前的 pc 和 sp 保存即可。</p><p>在进入 sleep 模式中，虽然 cpu 掉电了，但是 SRAM 还是维持着的，所以我们可以使用一个全局变量（存储在 SRAM 中）来保存 pc 和 sp 的值。</p><p>“xxx.c” 文件中部分代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数及变量的声明和引用</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">Save_PC_SP</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">Restore_PC_SP</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> u32 pc_save</span>;</span><br><span class="line"><span class="keyword">extern</span> u32 sp_save;</span><br><span class="line"></span><br><span class="line"><span class="comment">//······</span></span><br><span class="line"><span class="comment">// 在执行 sleep 指令（WFI/WFE）之前保存 pc、sp</span></span><br><span class="line">Save_PC_SP();    <span class="comment">// 保存 pc 和 sp</span></span><br><span class="line">__WFI();         <span class="comment">// 睡眠</span></span><br><span class="line">__NOP();</span><br><span class="line">__NOP();</span><br><span class="line">__NOP();</span><br><span class="line"></span><br><span class="line"><span class="comment">//······</span></span><br></pre></td></tr></table></figure><h2 id="s-汇编文件"><a href="#s-汇编文件" class="headerlink" title="s 汇编文件"></a>s 汇编文件</h2><p>“xxx.s”文件中的部分代码：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;函数及变量的声明和引用</span></span><br><span class="line"><span class="symbol">PUBLIC</span>  Save_PC_SP</span><br><span class="line"><span class="symbol">PUBLIC</span>  Restore_PC_SP</span><br><span class="line"></span><br><span class="line"><span class="symbol">IMPORT</span>  pc_save</span><br><span class="line"><span class="symbol">IMPORT</span>  sp_save</span><br><span class="line"></span><br><span class="line"><span class="comment">;唤醒后判断的代码</span></span><br><span class="line">    <span class="meta">THUMB</span></span><br><span class="line"></span><br><span class="line">    PUBWEAK Reset_Handler</span><br><span class="line">    SECTION <span class="meta">.text</span>:<span class="meta">CODE</span>:REORDER:NOROOT(<span class="number">2</span>)</span><br><span class="line"><span class="symbol">Reset_Handler</span></span><br><span class="line">    <span class="keyword">LDR </span><span class="built_in">R0</span>, <span class="number">=0x4001f000</span></span><br><span class="line">    <span class="keyword">LDR </span><span class="built_in">R1</span>, [<span class="built_in">R0</span>]</span><br><span class="line">    <span class="keyword">CMP </span><span class="built_in">R1</span>, <span class="number">#1</span></span><br><span class="line">    <span class="keyword">BEQ </span>__iar_program_start</span><br><span class="line">    <span class="keyword">B </span>  Restore_PC_SP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">;Save pc sp 的代码</span></span><br><span class="line"></span><br><span class="line">    SECTION <span class="meta">.text</span>:<span class="meta">CODE</span>:NOROOT</span><br><span class="line"><span class="symbol">Save_PC_SP</span></span><br><span class="line">    <span class="keyword">LDR </span><span class="built_in">R0</span>, <span class="number">=0x4001f000</span></span><br><span class="line">    <span class="keyword">MOV </span><span class="built_in">R1</span>, <span class="number">#1</span></span><br><span class="line">    <span class="keyword">STR </span><span class="built_in">R1</span>, [<span class="built_in">R0</span>]</span><br><span class="line">    <span class="keyword">LDR </span><span class="built_in">R0</span>, <span class="symbol">=sp_save</span></span><br><span class="line">    <span class="keyword">LDR </span><span class="built_in">R2</span>, <span class="symbol">=pc_save</span></span><br><span class="line">    <span class="keyword">MOV </span><span class="built_in">R1</span>, <span class="built_in">R13</span></span><br><span class="line">    <span class="keyword">STR </span><span class="built_in">R1</span>, [<span class="built_in">R0</span>]</span><br><span class="line">    <span class="keyword">MOV </span><span class="built_in">R1</span>, <span class="built_in">LR</span></span><br><span class="line">    <span class="keyword">STR </span><span class="built_in">R1</span>, [<span class="built_in">R2</span>]</span><br><span class="line">    <span class="keyword">BX </span> <span class="built_in">LR</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">;Restore pc sp 的代码</span></span><br><span class="line">    </span><br><span class="line">    SECTION <span class="meta">.text</span>:<span class="meta">CODE</span>:NOROOT</span><br><span class="line"><span class="symbol">Restore_PC_SP</span></span><br><span class="line">    <span class="keyword">LDR </span><span class="built_in">R0</span>,  <span class="symbol">=sp_save</span></span><br><span class="line">    <span class="keyword">LDR </span><span class="built_in">R1</span>,  [<span class="built_in">R0</span>]</span><br><span class="line">    <span class="keyword">MOV </span><span class="built_in">R13</span>, <span class="built_in">R1</span></span><br><span class="line">    <span class="keyword">LDR </span><span class="built_in">R0</span>,  <span class="symbol">=pc_save</span></span><br><span class="line">    <span class="keyword">LDR </span><span class="built_in">R1</span>,  [<span class="built_in">R0</span>]</span><br><span class="line">    <span class="keyword">ADD </span><span class="built_in">R1</span>,  <span class="built_in">R1</span>, <span class="number">#0x8</span></span><br><span class="line">    <span class="keyword">MOV </span><span class="built_in">PC</span>,  <span class="built_in">R1</span></span><br><span class="line">    <span class="keyword">NOP</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">NOP</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">NOP</span></span><br></pre></td></tr></table></figure><p>在汇编文件中主要实现的是 save 和 restore 的操作，以及恢复过程的判断。因为我们的设计是从睡眠唤醒是从 Reset 起来的，这就导致第一次 cpu 的正常启动会和 restore 发生冲突，所以我这里选择了一个不会掉电的寄存器来作为是否进行 restore 的判断。</p><p>还有就是加 NOP 指令是因为 Cortex-M3 是三级流水线，为了防止 cpu 因为 pc 的预取而发生错误。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在 ARM Cortex 系列的芯片中本来就有一套保护现场的机制，例如当产生了一个中断时，会自动将当前寄存器的值入栈，并在 lr（r14） 寄存器中保存将要返回的 pc 值，在中断服务程序执行完成后将 pc 恢复到之前的位置。如果在执行中断服务程序的时候又发生了优先级更高的中断，也就是说发生了中断嵌套，这是将再次进行现场保护，同时 lr 值会被压栈（上一次的 pc ），新的 lr 生成。&lt;/p&gt;
&lt;p&gt;但是在一些场景下，这样的机制就不太好用了，比如说要进入 sleep 模式 cpu 掉电了，想要恢复到掉电前的状态。这样的话就需要我们自己实现保护现场了，下面就来简单介绍一下我的实现。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="嵌入式" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="ARM" scheme="https://blog.strongwong.top/tags/ARM/"/>
    
      <category term="CM3" scheme="https://blog.strongwong.top/tags/CM3/"/>
    
  </entry>
  
  <entry>
    <title>数字 IC 设计流程</title>
    <link href="https://blog.strongwong.top//posts/%E6%95%B0%E5%AD%97-IC-%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B.html"/>
    <id>https://blog.strongwong.top//posts/数字-IC-设计流程.html</id>
    <published>2019-01-13T10:41:35.000Z</published>
    <updated>2019-11-21T14:06:56.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>最近即将开始要带着学弟们入门数字 IC 的设计，但很多学弟对于接下来要做什么是迷茫的，很多练就了各式各样的基本功却不知道如何施展，因此这里简单介绍一下数字 IC 设计的全过程及相关的设计工具及涉及到的相关职位，如果有写的不合适或者不正确的地方还请各位提出~</p><a id="more"></a><p>详见下图:</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E6%95%B0%E5%AD%97IC%E8%AE%BE%E8%AE%A1%E5%85%A8%E8%BF%87%E7%A8%8B%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7.png" alt=""></p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>看了上图之后很多学弟就又问了，那平时我们都是 vivado，quartus，FPGA …… 为啥感觉和上面的都不沾边呢，这里说一点个人的看法，如果不是做硬件并行加速或者 FPGA 的嵌入式开发，那么平日 FPGA 的最大作用就是 —— 功能验证性工具。因为流片的价格非常昂贵，很少有实验室或者学校会让你不断地流片来实现你的设计，另外的，一个实验室如果没有同时具备设计，验证，版图 ……（全栈）技能同学的话要想能流片（同时具备以上技能）其实也很难的。那么这时 FPGA 就可以验证你的设计是否在一定程度上是正确的。</p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>我们最后再来看一下数字前端的设计流程，如下图所示~</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E6%95%B0%E5%AD%97%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt=""></p><p>之前的 sdram 设计剩余部分,我们将尽快更新~</p><p><strong>By Ricky</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h2&gt;&lt;p&gt;最近即将开始要带着学弟们入门数字 IC 的设计，但很多学弟对于接下来要做什么是迷茫的，很多练就了各式各样的基本功却不知道如何施展，因此这里简单介绍一下数字 IC 设计的全过程及相关的设计工具及涉及到的相关职位，如果有写的不合适或者不正确的地方还请各位提出~&lt;/p&gt;
    
    </summary>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/categories/IC-Design/"/>
    
      <category term="其他" scheme="https://blog.strongwong.top/categories/IC-Design/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="IC Design" scheme="https://blog.strongwong.top/tags/IC-Design/"/>
    
  </entry>
  
  <entry>
    <title>SDRAM 两次踏进同一条河</title>
    <link href="https://blog.strongwong.top//posts/SDRAM-%E4%B8%A4%E6%AC%A1%E8%B8%8F%E8%BF%9B%E5%90%8C%E4%B8%80%E6%9D%A1%E6%B2%B3.html"/>
    <id>https://blog.strongwong.top//posts/SDRAM-两次踏进同一条河.html</id>
    <published>2018-12-06T12:48:31.000Z</published>
    <updated>2019-11-21T14:06:56.783Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>人不能两次踏进同一条河，但 SDRAM 可以</em><br><em>——SDRAM的刷新</em></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上周去了趟深圳，所以摸鱼拖更了，在那边发现真的是机遇越大的地方努力的脚步就越匆忙，某企业的 boss 是位国家科学技术奖的获得者，公司已经上市了，却依然吃 13 元的小店套餐，而且饭几乎是倒进嘴里的，5 分钟左右吃完马上就又去和合作对象谈判去了！<br>……<br>所以我们更要加油了，不然只会被大佬们越拉越远 …… 加油吧！</p><a id="more"></a><p>在初窥 sdram 中我们留了一个坑——首先我们在第一页就可以看到它的刷新周期是 64ms（这个重要参数将在后面进行具体介绍）<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/sdram_64ms.jpg" alt=""></p><p>今天我们就来填这个坑……</p><p>「人不能两次踏进同一条河流」是古希腊哲学家赫拉克利特说的。阐述「变」的哲学在米利都学派和毕达戈拉斯学派之后，爱菲斯的赫拉克利特创立了一种变的哲学。他的哲学充满了辩证法思想，对后来辩证法的发展产生过重大影响。</p><p>他形象地表达了他关于变的思想，说：「太阳每天都是新的。」他把存在的东西比作一条河，声称人不能两次踏进同一条河。因为当人第二次进入这条河时，是新的水流而不是原来的水流在流淌。SDRAM 不断地刷新，但却能保证刷新后的数据与刷新前一致，人踏进河是为什么我不知道，但是 SDRAM 正是为了保证内部电容的电量最终实现数据的不丢失才会不断地刷新。我们人做不到的事，就用 RTL 让 SDRAM 帮我们做了吧。</p><h2 id="参数分析"><a href="#参数分析" class="headerlink" title="参数分析"></a>参数分析</h2><p>首先我们来看 SDRAM 参数：8K Refresh Cycles/64 ms，意味着：</p><ul><li>刷新速率 = 64ms / 8192 行 =&gt; 7us；</li><li>刷新时钟周期 = 7us * CPU 运行频率；</li></ul><p>例：CPU 运行频率 50MHz 时钟周期 = 7.81us * 50MHz = 390.5；64ms 为刷新周期最大值，为保证可靠运行，实际刷新实间要稍小于 64ms；例：时钟周期 = 390.5 ≈ 380</p><p>这就意味着每 380 个时钟周期，我们便需要对我们的 SDRAM 进行一次刷新，那么进行刷新的时候需要进行哪些操作呢？我们还是回到我们的数据手册中。<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/auto-refresh.jpg" alt=""></p><p>如图示，我们可以看到首先是要进行一次预充电操作(precharge)（同时选中所有的 bank），在经过 tRP 延时后进行一次自刷新操作(auto refresh)，再经过一次 tRC 后又进行一次自刷新操作(auto refresh)【注：实际使用中可以只进行一次自刷新操作】，最后进入到我们下一步 ……</p><p>那么根据第一篇《初窥 SDRAM》后我们知道以上的几个操作对应的指令码分别为：</p><table><thead><tr><th align="center">CMD</th><th align="center">CS</th><th align="center">RAS</th><th align="center">CAS</th><th align="center">WE</th></tr></thead><tbody><tr><td align="center">Precharge</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">Auto-Refresh</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">Nop</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr></tbody></table><p>延时 tRP，tRC 则分别对应 15ns（至少 1 个周期，实际操作中取 1 个周期），60ns （至少 3 个周期，实际操作中取 4 个周期）。</p><p>那么我们的设计即可为：一个 8us 的定时器，控制刷新的周期，作为刷新的开始信号；一个命令计数器，用于记录对应的延时节点（tRP，tRC）；最后即为达到对应节点输出对应指令即可。</p><p>由此踏进的河流变和 8us 前的河流是同一条河流的 ……</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>具体实现代码如下:<br>上代码！<br><font color=#FF4500 > <div><div class="fold_hider"><div class="close hider_title">sdram_autoref.v</div></div><div class="fold"><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">File name: sdram_autoref</span></span><br><span class="line"><span class="comment">Function: Auto refresh for IS42S16320D-7TL SDRAM</span></span><br><span class="line"><span class="comment">Module name: sdram_autoref</span></span><br><span class="line"><span class="comment">Author: Ricky</span></span><br><span class="line"><span class="comment">Time: 20181130</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> sdram_autoref(</span><br><span class="line"><span class="comment">//system signals</span></span><br><span class="line"><span class="keyword">input</span>                   sys_clk    ,</span><br><span class="line"><span class="keyword">input</span>                   sys_rst_n  ,</span><br><span class="line"></span><br><span class="line"><span class="comment">//others</span></span><br><span class="line"><span class="keyword">input</span>                   init_flag  ,</span><br><span class="line"><span class="keyword">input</span>                   ref_en     ,</span><br><span class="line"></span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span>              ref_req    ,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>             ref_flag   ,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span>   [<span class="number">3</span>:<span class="number">0</span>]      cmd_reg    ,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>  [<span class="number">12</span>:<span class="number">0</span>] sdram_addr  </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*============================================================================== </span></span><br><span class="line"><span class="comment">**********************Define Parameter and inside Signals***********************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Note: sys_clk=50MHz</span></span><br><span class="line"><span class="comment">      tRP|min=15ns &gt;&gt;&gt; 20ns &gt;&gt;&gt; 1sys_clk &gt;&gt;&gt; [4:0] cnt_cmd</span></span><br><span class="line"><span class="comment">      tRC|min=60ns &gt;&gt;&gt; 80ns &gt;&gt;&gt; 4sys_clk &gt;&gt;&gt; [4:0] cnt_cmd</span></span><br><span class="line"><span class="comment">      8K refresh cycles every 64ms &gt;&gt;&gt; 8us &gt;&gt;&gt; 380sys_clk</span></span><br><span class="line"><span class="comment">===============================================================================*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">4</span>:<span class="number">0</span>]     cnt_cmd      ;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">8</span>:<span class="number">0</span>]     cnt_ref      ;</span><br><span class="line"><span class="keyword">reg</span>         flag_ref     ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">localparam</span> delay_8us = <span class="number">380</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//define sdram autorefresh cmd</span></span><br><span class="line"><span class="keyword">localparam</span>  precharge    = <span class="number">4'b0010</span>;</span><br><span class="line"><span class="keyword">localparam</span>  auto_refresh = <span class="number">4'b0001</span>;</span><br><span class="line"><span class="keyword">localparam</span>  nop          = <span class="number">4'b0111</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*============================================================================== </span></span><br><span class="line"><span class="comment">**********************************Main Logic************************************</span></span><br><span class="line"><span class="comment">==============================================================================*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//auto_refresh counter</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> sys_rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(~sys_rst_n)</span><br><span class="line">        cnt_ref &lt;= <span class="number">9'b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(cnt_ref &gt;= delay_8us)</span><br><span class="line">            cnt_ref &lt;= <span class="number">9'b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(init_flag == <span class="number">1'b1</span>)</span><br><span class="line">            cnt_ref &lt;= cnt_ref + <span class="number">1'b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ref flag signal</span></span><br><span class="line"><span class="keyword">always</span>  @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> sys_rst_n) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(sys_rst_n == <span class="number">1'b0</span>)</span><br><span class="line">                flag_ref        &lt;=      <span class="number">1'b0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ref_flag == <span class="number">1'b1</span>)</span><br><span class="line">                flag_ref        &lt;=      <span class="number">1'b0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ref_en == <span class="number">1'b1</span>)</span><br><span class="line">                flag_ref        &lt;=      <span class="number">1'b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//cmd counter</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> sys_rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(~sys_rst_n) </span><br><span class="line">        cnt_cmd &lt;= <span class="number">4'd0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (flag_ref == <span class="number">1'b1</span>)</span><br><span class="line">             cnt_cmd &lt;= cnt_cmd + <span class="number">1'b1</span>; </span><br><span class="line">    <span class="keyword">else</span>     cnt_cmd &lt;= <span class="number">4'b0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//cmd</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> sys_rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(~sys_rst_n) </span><br><span class="line">        cmd_reg &lt;= nop;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">case</span>(cnt_cmd)</span><br><span class="line">            <span class="number">1</span>:       cmd_reg &lt;= precharge;</span><br><span class="line">            <span class="number">2</span>:       cmd_reg &lt;= auto_refresh;</span><br><span class="line">            <span class="number">6</span>:       cmd_reg &lt;= auto_refresh;</span><br><span class="line">            <span class="keyword">default</span>  cmd_reg &lt;= nop;</span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//request signal(8K refresh cycles every 64ms &gt;&gt;&gt; 8us &gt;&gt;&gt; 380sys_clk)</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> sys_rst_n)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(~sys_rst_n)</span><br><span class="line">        ref_req &lt;= <span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ref_en)</span><br><span class="line">        ref_req &lt;= <span class="number">1'b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(cnt_ref &gt;= delay_8us)</span><br><span class="line">        ref_req &lt;= <span class="number">1'b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> sdram_addr = <span class="number">13'b0010000000000</span>;</span><br><span class="line"><span class="keyword">assign</span> ref_flag   = (cnt_cmd &gt;= <span class="number">9</span>)? <span class="number">1'b1</span> : <span class="number">1'b0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div></div><br></font></p><p>实现后我们可以看到毎 8us 完成一次所有 bank 的刷新</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/vsimrun.jpg" alt=""></p><h2 id="仿真波形"><a href="#仿真波形" class="headerlink" title="仿真波形"></a>仿真波形</h2><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/refresh-wave.jpg" alt=""><br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/refresh-wave1.jpg" alt=""></p><p><strong>By Ricky</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;人不能两次踏进同一条河，但 SDRAM 可以&lt;/em&gt;&lt;br&gt;&lt;em&gt;——SDRAM的刷新&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上周去了趟深圳，所以摸鱼拖更了，在那边发现真的是机遇越大的地方努力的脚步就越匆忙，某企业的 boss 是位国家科学技术奖的获得者，公司已经上市了，却依然吃 13 元的小店套餐，而且饭几乎是倒进嘴里的，5 分钟左右吃完马上就又去和合作对象谈判去了！&lt;br&gt;……&lt;br&gt;所以我们更要加油了，不然只会被大佬们越拉越远 …… 加油吧！&lt;/p&gt;
    
    </summary>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/categories/IC-Design/"/>
    
      <category term="SDRAM" scheme="https://blog.strongwong.top/categories/IC-Design/SDRAM/"/>
    
    
      <category term="IC Design" scheme="https://blog.strongwong.top/tags/IC-Design/"/>
    
      <category term="SDRAM" scheme="https://blog.strongwong.top/tags/SDRAM/"/>
    
  </entry>
  
  <entry>
    <title>初窥 SDRAM</title>
    <link href="https://blog.strongwong.top//posts/%E5%88%9D%E7%AA%A5-SDRAM.html"/>
    <id>https://blog.strongwong.top//posts/初窥-SDRAM.html</id>
    <published>2018-11-24T09:21:08.000Z</published>
    <updated>2019-11-21T14:06:56.878Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上次挖的坑现在来填，在我们把 SDRAM 控制器接进 AHB 总线之前，我们先来设计一个 SDRAM 控制器。</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/hexo_img.jpg" alt=""></p><a id="more"></a><p>引用知乎上看见的一段话：</p><blockquote><p>在做这个 SDRAM 控制器之前，博主有一个疑问，对于学生来说，是否有必要学习用纯 Verilog 写一个 SDRAM 控制器？因为目前广告厂（X）和牙膏厂（A）都有了 DDR IP Core，而 SDRAM 的控制 IP 更是漫天飞舞，对于要实现一个应用可以直接调用 IP Core，只需要对其接口操作即可。对于开发者来说，与其费时费力用 Verilog 去写一个性能差而且老的 SDRAM 控制器，还不如直接调用官方经过打磨的更为先进 IP Core。所以博主特地来号称平均学历 211，平均月薪 7、8 万的知（bi）乎提出了这个问题，得到的解答博主总结大致如下。</p><p>对于学生这个身份来说，应该是要以学习为主要目的，虽然说目前企业为了加快项目进度会直接使用 IP Core，但是我们以学为本的初衷不应该为了避过难点而直接不去尝试，就比如我们刚开始学 Verilog 的时候肯定都会写过分频器，那么为什么不直接去学更简单精度更高 PLL IP Core 呢？从一个新手逐渐成长成一个老手都是由简单到复杂，由基础到提升，这是一个必经的过程。这也就是很多高校还是会开设汇编语言编写单片机的课程，学 FPGA 全用 IP Core 和学单片机全用库函数是一个道理。这是其一。</p><p>第二，写一个 SDRAM 控制器还是可以锻炼一些典型的技能。</p><ul><li>看官方文档</li><li>根据时序图设计 SDRAM 逻辑，使用状态机</li><li>配合仿真模型写测试仿真</li><li>调试，提高频率，让你的 SDRAM 跑的更快</li><li>研究时序约束</li></ul><p>这一套做下来，你就可以提高一个层次了，经历过和没经历过是有质的区别。其实博主在提问的时候心中早已有了答案，只是还没有足够的信念去完成这个事情，当时看到很多业界前辈都支持去写的时候，博主心里也是比较开心的。之前博主已经学一些 SDRAM 的基础知识，只是当时水平还不够，没有坚持下去，心里一直不甘。趁着最近两个月之内没有什么事情要忙，所以决定要再次死磕 SDRAM。</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="SDRAM-基本介绍"><a href="#SDRAM-基本介绍" class="headerlink" title="SDRAM 基本介绍"></a>SDRAM 基本介绍</h3><p>关于 SDRAM 的基本概念，在这再引用《终极内存指南》这篇文章中的一段话:</p><blockquote><p>SDRAM（Synchronous Dynamic Random Access Memory），同步动态随机存储器。同步是指 Memory 工作需要同步时钟，内部的命令的发送与数据的传输都以它为基准；动态是指存储阵列需要不断刷新来保证存储的数据不丢失，因为 SDRAM 中存储数据是通过电容来工作的，大家知道电容在自然放置状态是会有放电的，如果电放完了，也就意味着 SDRAM 中的数据丢失了，所以 SDRAM 需要在电容的电量放完之前进行刷新；随机是指数据不是线性依次存储，而是自由指定地址进行数据的读写。</p></blockquote><p>下面再简单看一下 SDRAM 的内部结构。<br>对于 SDRAM 的内容结构，就如同 Excel 的表格（如下图所示），即一个单元格就是一个存储地址。要确定具体的存储位置，只需要知道行地址（row-address ）和列地址（column address ）即可。<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/Excel.jpg" alt="excel"></p><p>一个常见的 SDRAM 中的一个 BANK 就有如上图所示的 13 行 9 列，通常一个 SDRAM 中有 4 个 BANK，那么 SDRAM（DDR 类似）的计算公式就是：</p><blockquote><p>SDRAM(DDR容量) = 2^(row-address) × 2^(column-address) × 2^(bank-address) × datawidth<br>= 2^(row-address) × 2^(column-address) × bank数 × datawidth</p></blockquote><p>以 DE10-LITE 开发板板载的 SDRAM-IS42S16320D-7TL 为例，标称为 64MB。根据芯片手册（如下图所示）我们可以看见其行地址宽度为 13，列地址宽度为 9（此时数据位宽为 32），则根据公式我们可以算出其容量确实为 64MB</p><blockquote><p>2^13 × 2^9 × 4 × 32 = 536870912 b<br>⇒ 536870912 b ÷ 1024 = 524288 kb<br>⇒ 524288 kb ÷ 1024 = 512 Mb<br>⇒ 512 Mb ÷ 8 = 64 MB</p></blockquote><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/DE10_lite_sdram.jpg" alt=""></p><h3 id="SDRAM-芯片介绍"><a href="#SDRAM-芯片介绍" class="headerlink" title="SDRAM 芯片介绍"></a>SDRAM 芯片介绍</h3><p>既然都打开了芯片手册（IS42S16320D-7TL），那就不要关上了，那我们再来看看芯片手册中的那些重要参数。<br>首先我们在第一页就可以看到它的刷新周期是 64ms（这个重要参数将在后面进行具体介绍）<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/sdram_64ms.jpg" alt=""></p><p>在上文中我们已经提到了该芯片的行地址和列地址，我们需要注意的是其行列地址是复用的，其他相关引脚的功能描述都有介绍。<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/IS42S16320D_7TL_sdram.jpg" alt=""></p><h3 id="SDRAM-的初始化及寄存器的配置"><a href="#SDRAM-的初始化及寄存器的配置" class="headerlink" title="SDRAM 的初始化及寄存器的配置"></a>SDRAM 的初始化及寄存器的配置</h3><p>SDRAM 初始化时序图如图所示，首先上电后，电源 Vcc 及 CLK 稳定时间至少 100us，然后对所有 BANK 进行预充电（precharge），经过 tRP 后给 auto refresh 命令，再经过 tRC 后再次 auto refresh 命令，再进过 tRC 后进行模式寄存器的配置。<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/sdram_%E6%97%B6%E5%BA%8F.jpg" alt=""></p><p>那么以上命令是如何实现的呢，当时就是给与相应管脚的高低电平控制，由此实现，那么这就回到了我们数电的功能真值表（在之前我们就有提到过，数字 IC 终归是数字电路，不要把它搞成了编程项目），我们将下图的真值表以使用顺序总结为表格形式，方便接下来的 RTL 表述。<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/%E7%9C%9F%E5%80%BC%E8%A1%A8.jpg" alt=""></p><table><thead><tr><th align="center">CMD</th><th align="center">CS</th><th align="center">RAS</th><th align="center">CAS</th><th align="center">WE</th></tr></thead><tbody><tr><td align="center">Precharge</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">Auto-Refresh</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">Nop</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">Mode</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr></tbody></table><p>在了解到命令描述后我们还需要注意时间的间隔，在时序图中只告知了我们 T = 100us，而其余的 tRP，tRC，tMRD 均未告诉我们，这是因为通常一个芯片手册中有多种型号的芯片，因此我们需要去查看 AC characteristic 表格，根据芯片型号去确定时间。我们的板载芯片型号为 IS42S16320D-7TL，因此我们选择 <code>-7</code> 对应的时间，则 tRP = 15ns，tRC = 60ns，tMRD = 14ns</p><p>接下来我们就要进入到模式配置，模式配置的配置说明如下图所示：<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/Mode_reg_config.jpg" alt=""></p><p>A0-A2 为突发长度控制，即表示单次读或者写的时候的数据『长度』，本次突发长度参数我们设为 010。A3 突发模式通常设为 0。A4-A6 为潜伏期控制，专门针对读命令时，当给出读命令后，若有设置 CAS latency 则会延迟相应的周期数后给出数据，本次潜伏期参数我们设为 011，A9 突发模式通常设为 0。则最终我们初始化设置参数为 13’b0_0000_0011_0010</p><p>至此，我们便可以开始着手设计我们的初始化模块了，首先时序图上 T = 100us Min，则我们取 200us = 200,000ns 在不经过 PLL 的前提下，DE10LITE 开发板默认提供的时钟频率为 50MHz，则一个周期为 20ns，因此 T 延时可以取 10,000clk。延时后我们执行 precharge 命令。之后执行 tRP = 15ns Min，我们的 tRP 延迟就可以取 1clk（至少满足 15ns 的最低要求），然后执行 auto refresh 命令，tRC = 60ns Min 则延迟可取为 4clk，然后再次执行 auto refresh 命令，在这期间一共 9 个 clk。具体的设计可以首先设计一个 200us 的不自清零的计数器；设计一个对应的 200us 计数器标志位；针对 tRP 和 tRC 设计一个计数器，分别实现监测计数到对应的周期发出对应的命令；命令寄存器用来存放对应的命令；最后完成初始化操作后给一个初始化完成的标志位信号。</p><p>下面是具体实现的描述语言：<br><font color=#FF4500 > <div><div class="fold_hider"><div class="close hider_title">sdram_init.v</div></div><div class="fold"><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">File name: sdram_init</span></span><br><span class="line"><span class="comment">Function: Power on initialization for IS42S16320D-7TL SDRAM</span></span><br><span class="line"><span class="comment">Module name: sdram_init</span></span><br><span class="line"><span class="comment">Author: Ricky</span></span><br><span class="line"><span class="comment">Time: 20181119</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> sdram_init(</span><br><span class="line"><span class="comment">//system signals</span></span><br><span class="line"><span class="keyword">input</span>sys_clk,</span><br><span class="line"><span class="keyword">input</span>sys_rst_n,</span><br><span class="line"></span><br><span class="line"><span class="comment">//others</span></span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span>    [<span class="number">3</span>:<span class="number">0</span>] cmd_reg,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>    [<span class="number">12</span>:<span class="number">0</span>] sdram_addr,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>init_flag</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*============================================================================== </span></span><br><span class="line"><span class="comment">**********************Define Parameter and inside Signals***********************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Note: syssys_clk=50MHz</span></span><br><span class="line"><span class="comment">T|min=100us &gt;&gt;&gt; 200us=200,000ns &gt;&gt;&gt; 10,000sys_clk &gt;&gt;&gt; [13:0] cnt_200us</span></span><br><span class="line"><span class="comment">tRP|min=15ns &gt;&gt;&gt; 20ns &gt;&gt;&gt; 1sys_clk &gt;&gt;&gt; [4:0] cnt_cmd</span></span><br><span class="line"><span class="comment">tRC|min=60ns &gt;&gt;&gt; 80ns &gt;&gt;&gt; 4sys_clk &gt;&gt;&gt; [4:0] cnt_cmd</span></span><br><span class="line"><span class="comment">===============================================================================*/</span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">13</span>:<span class="number">0</span>] cnt_200us;</span><br><span class="line"><span class="keyword">wire</span> cnt_200us_flag;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">4</span>:<span class="number">0</span>]cnt_cmd;</span><br><span class="line"></span><br><span class="line"><span class="comment">//define sdram initial cmd</span></span><br><span class="line"><span class="keyword">localparam</span>precharge    = <span class="number">4'b0010</span>;</span><br><span class="line"><span class="keyword">localparam</span>auto_refresh = <span class="number">4'b0001</span>;</span><br><span class="line"><span class="keyword">localparam</span>nop = <span class="number">4'b0111</span>;</span><br><span class="line"><span class="keyword">localparam</span> modeset = <span class="number">4'b0000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*============================================================================== </span></span><br><span class="line"><span class="comment">**********************************Main Logic************************************</span></span><br><span class="line"><span class="comment">==============================================================================*/</span></span><br><span class="line"><span class="comment">//T=200us  counter</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> sys_rst_n) <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(~sys_rst_n)</span><br><span class="line">cnt_200us &lt;= <span class="number">13'd0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span>(cnt_200us_flag == <span class="number">1'b0</span>)</span><br><span class="line">cnt_200us &lt;= cnt_200us + <span class="number">1'b1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cnt_200us &lt;= cnt_200us;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//cmd counter</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> sys_rst_n) <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(~sys_rst_n) </span><br><span class="line">cnt_cmd &lt;= <span class="number">4'd0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> (cnt_200us_flag == <span class="number">1'b1</span> &amp;&amp; init_flag == <span class="number">1'b0</span>)</span><br><span class="line">cnt_cmd &lt;= cnt_cmd + <span class="number">1'b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//cmd</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> sys_rst_n) <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(~sys_rst_n) </span><br><span class="line">cmd_reg &lt;= nop;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span>(cnt_200us_flag == <span class="number">1'b1</span>)</span><br><span class="line"><span class="keyword">case</span>(cnt_cmd)</span><br><span class="line"><span class="number">0</span>: cmd_reg &lt;= precharge;</span><br><span class="line"><span class="number">1</span>: cmd_reg &lt;= auto_refresh;</span><br><span class="line"><span class="number">5</span>: cmd_reg &lt;= auto_refresh;</span><br><span class="line"><span class="number">9</span>: cmd_reg &lt;= modeset;</span><br><span class="line"><span class="keyword">default</span>:         cmd_reg &lt;= nop;</span><br><span class="line"><span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> cnt_200us_flag = (cnt_200us &gt;= <span class="number">10000</span>) ? <span class="number">1'b1</span>:<span class="number">1'b0</span>;</span><br><span class="line"><span class="keyword">assign</span> init_flag = (cnt_cmd &gt;= <span class="number">9</span>) ? <span class="number">1'b1</span>:<span class="number">1'b0</span>;</span><br><span class="line"><span class="keyword">assign</span> sdram_addr = (cmd_reg == modeset) ? <span class="number">13'b0000000110010</span> : <span class="number">13'b0010000000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div></div><br></font></p><p><font color=#FF4500 > <div><div class="fold_hider"><div class="close hider_title">sdram_top.v</div></div><div class="fold"><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">File name: sdram_top</span></span><br><span class="line"><span class="comment">Author: Ricky</span></span><br><span class="line"><span class="comment">Time: 20181121</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">module</span> sdram(</span><br><span class="line"><span class="comment">//system signals</span></span><br><span class="line"><span class="keyword">input</span>sys_clk,</span><br><span class="line"><span class="keyword">input</span>sys_rst_n,</span><br><span class="line"><span class="comment">//sdram pin</span></span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>sdram_clk,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>     [<span class="number">12</span>:<span class="number">0</span>]sdram_addr,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>     [<span class="number">1</span>:<span class="number">0</span>] sdram_bank,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>sdram_cas_n,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>sdram_cke,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>sdram_cs_n,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>[<span class="number">1</span>:<span class="number">0</span>]sdram_dqm,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>sdram_ras_n,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span>sdram_we_n,</span><br><span class="line"></span><br><span class="line"><span class="keyword">inout</span>[<span class="number">15</span>:<span class="number">0</span>]sdram_dq</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*============================================================================== </span></span><br><span class="line"><span class="comment">**********************Define Parameter and inside Signals***********************</span></span><br><span class="line"><span class="comment">===============================================================================*/</span></span><br><span class="line"><span class="keyword">wire</span> init_flag;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">3</span>:<span class="number">0</span>] init_cmd_reg;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">12</span>:<span class="number">0</span>] init_addr;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*============================================================================== </span></span><br><span class="line"><span class="comment">**********************************Main Logic************************************</span></span><br><span class="line"><span class="comment">==============================================================================*/</span></span><br><span class="line"><span class="keyword">assign</span> sdram_addr = init_addr;</span><br><span class="line"><span class="keyword">assign</span> &#123;sdram_cs_n, sdram_ras_n, sdram_cas_n, sdram_we_n&#125; = init_cmd_reg;</span><br><span class="line"><span class="keyword">assign</span> sdram_clk = ~sys_clk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> sdram_dqm = <span class="number">2'b00</span>;</span><br><span class="line"><span class="keyword">assign</span> sdram_cke = <span class="number">1'b1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//instantiating sdram_init module</span></span><br><span class="line">sdram_init sdram_init(</span><br><span class="line"><span class="comment">//system signals</span></span><br><span class="line">.sys_clk(sys_clk),</span><br><span class="line">.sys_rst_n(sys_rst_n),</span><br><span class="line"><span class="comment">//others</span></span><br><span class="line">.cmd_reg(init_cmd_reg),</span><br><span class="line">.sdram_addr(init_addr),</span><br><span class="line">.init_flag       (init_flag)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div></div><br></font></p><p><font color=#FF4500 > <div><div class="fold_hider"><div class="close hider_title">sdram_tb.v</div></div><div class="fold"><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">File name: sdram_tb</span></span><br><span class="line"><span class="comment">Function: Testbench for power on initialization for IS42S16320D-7TL SDRAM</span></span><br><span class="line"><span class="comment">Author: Ricky</span></span><br><span class="line"><span class="comment">Time: 20181123</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns/1ns</span></span><br><span class="line"><span class="keyword">module</span> sdram_tb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>sys_clk;</span><br><span class="line"><span class="keyword">reg</span> sys_rst_n;</span><br><span class="line"><span class="keyword">wire</span>sdram_clk;</span><br><span class="line"><span class="keyword">wire</span>[<span class="number">12</span>:<span class="number">0</span>]sdram_addr;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">1</span>:<span class="number">0</span>] sdram_bank;</span><br><span class="line"><span class="keyword">wire</span>sdram_cas_n;</span><br><span class="line"><span class="keyword">wire</span>sdram_cke;</span><br><span class="line"><span class="keyword">wire</span>sdram_cs_n;</span><br><span class="line"><span class="keyword">wire</span>[<span class="number">1</span>:<span class="number">0</span>]sdram_dqm;</span><br><span class="line"><span class="keyword">wire</span>sdram_ras_n;</span><br><span class="line"><span class="keyword">wire</span>sdram_we_n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span>[<span class="number">15</span>:<span class="number">0</span>]sdram_dq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">sys_clk = <span class="number">1</span>;</span><br><span class="line">sys_rst_n &lt;= <span class="number">0</span>;</span><br><span class="line">#<span class="number">100</span></span><br><span class="line">sys_rst_n &lt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 20ns/clock</span></span><br><span class="line"><span class="keyword">always</span> #<span class="number">10</span> sys_clk = ~sys_clk;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* defparamsdram_model_plus.addr_bits =13;</span></span><br><span class="line"><span class="comment">defparamsdram_model_plus.data_bits = 16;</span></span><br><span class="line"><span class="comment">defparamsdram_model_plus.col_bits  =9 ;</span></span><br><span class="line"><span class="comment">defparamsdram_model_plus.mem_sizes =2*1024*1024; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//instantiating sdram_init module</span></span><br><span class="line">sdram sdraminit(</span><br><span class="line"><span class="comment">//system signals</span></span><br><span class="line"><span class="variable">.sys_clk</span>                 (sys_clk  ),</span><br><span class="line"><span class="variable">.sys_rst_n</span>               (sys_rst_n),</span><br><span class="line"><span class="comment">//sdram pin</span></span><br><span class="line"><span class="variable">.sdram_clk</span>               (sdram_clk),</span><br><span class="line"><span class="variable">.sdram_addr</span>              (sdram_addr),</span><br><span class="line"><span class="variable">.sdram_bank</span>              (sdram_bank),</span><br><span class="line"><span class="variable">.sdram_cas_n</span>             (sdram_cas_n),</span><br><span class="line"><span class="variable">.sdram_cke</span>               (sdram_cke),</span><br><span class="line"><span class="variable">.sdram_cs_n</span>              (sdram_cs_n),</span><br><span class="line"><span class="variable">.sdram_dqm</span>               (sdram_dqm),</span><br><span class="line"><span class="variable">.sdram_ras_n</span>             (sdram_ras_n),</span><br><span class="line"><span class="variable">.sdram_we_n</span>              (sdram_we_n),</span><br><span class="line"></span><br><span class="line"><span class="variable">.sdram_dq</span>                 (sdram_dq)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//instantiating sdram_model module</span></span><br><span class="line">sdram_model_plus sdram(</span><br><span class="line"><span class="variable">.Dq</span>(sdram_dq), </span><br><span class="line"><span class="variable">.Addr</span>(sdram_addr), </span><br><span class="line"><span class="variable">.Ba</span>(sdram_bank), </span><br><span class="line"><span class="variable">.Clk</span>(sdram_clk), </span><br><span class="line"><span class="variable">.Cke</span>(sdram_cke), </span><br><span class="line"><span class="variable">.Cs_n</span>(sdram_cs_n), </span><br><span class="line"><span class="variable">.Ras_n</span>(sdram_ras_n), </span><br><span class="line"><span class="variable">.Cas_n</span>(sdram_cas_n), </span><br><span class="line"><span class="variable">.We_n</span>(sdram_we_n), </span><br><span class="line"><span class="variable">.Dqm</span>(sdram_dqm),</span><br><span class="line"><span class="variable">.Debug</span>(<span class="number">1'b1</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div></div><br></font></p><p>仿真模型（见附件）一共有两个分别是镁光官方仿真模型以及国内大神基于镁光模型进行修改后便于调试的版本，使用任意一版均可。这里我采用的是 sdram_model.v</p><p><font color=#FF4500 > <div><div class="fold_hider"><div class="close hider_title">sdram_model.v</div></div><div class="fold"><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***************************************************************************************</span></span><br><span class="line"><span class="comment">作者：    李晟</span></span><br><span class="line"><span class="comment">2003-08-27    V0.1    李晟 </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 添加内存模块倒空功能，在外部需要创建事件：sdram_r ,本SDRAM的内容将会按Bank 顺序damp out 至文件</span></span><br><span class="line"><span class="comment"> sdram_data.txt 中</span></span><br><span class="line"><span class="comment">×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××*/</span></span><br><span class="line"><span class="comment">//2004-03-04    陈乃奎    修改原程序中将BANK的数据转存入TXT文件的格式</span></span><br><span class="line"><span class="comment">//2004-03-16    陈乃奎    修改SDRAM 的初始化数据</span></span><br><span class="line"><span class="comment">//2004/04/06    陈乃奎    将SDRAM的操作命令以字符形式表示，以便用MODELSIM监视</span></span><br><span class="line"><span class="comment">//2004/04/19    陈乃奎    修改参数 parameter tAC  =   8;</span></span><br><span class="line"><span class="comment">//2010/09/17    罗瑶    修改sdram的大小，数据位宽，dqm宽度;</span></span><br><span class="line"><span class="comment">/****************************************************************************************</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*    File Name:  sdram_model.V  </span></span><br><span class="line"><span class="comment">*      Version:  0.0f</span></span><br><span class="line"><span class="comment">*         Date:  July 8th, 1999</span></span><br><span class="line"><span class="comment">*        Model:  BUS Functional</span></span><br><span class="line"><span class="comment">*    Simulator:  Model Technology (PC version 5.2e PE)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Dependencies:  None</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*       Author:  Son P. Huynh</span></span><br><span class="line"><span class="comment">*        Email:  sphuynh@micron.com</span></span><br><span class="line"><span class="comment">*        Phone:  (208) 368-3825</span></span><br><span class="line"><span class="comment">*      Company:  Micron Technology, Inc.</span></span><br><span class="line"><span class="comment">*        Model:  sdram_model (1Meg x 16 x 4 Banks)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  Description:  64Mb SDRAM Verilog model</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   Limitation:  - Doesn't check for 4096 cycle refresh</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*         Note:  - Set simulator resolution to "ps" accuracy</span></span><br><span class="line"><span class="comment">*                - Set Debug = 0 to disable $display messages</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   Disclaimer:  THESE DESIGNS ARE PROVIDED "AS IS" WITH NO WARRANTY </span></span><br><span class="line"><span class="comment">*                WHATSOEVER AND MICRON SPECIFICALLY DISCLAIMS ANY </span></span><br><span class="line"><span class="comment">*                IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR</span></span><br><span class="line"><span class="comment">*                A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*                Copyright ?1998 Micron Semiconductor Products, Inc.</span></span><br><span class="line"><span class="comment">*                All rights researved</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Rev   Author          Phone         Date        Changes</span></span><br><span class="line"><span class="comment">* ----  ----------------------------  ----------  ---------------------------------------</span></span><br><span class="line"><span class="comment">* 0.0f  Son Huynh       208-368-3825  07/08/1999  - Fix tWR = 1 Clk + 7.5 ns (Auto)</span></span><br><span class="line"><span class="comment">*       Micron Technology Inc.                    - Fix tWR = 15 ns (Manual)</span></span><br><span class="line"><span class="comment">*                                                 - Fix tRP (Autoprecharge to AutoRefresh)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 0.0a  Son Huynh       208-368-3825  05/13/1998  - First Release (from 64Mb rev 0.0e)</span></span><br><span class="line"><span class="comment">*       Micron Technology Inc.</span></span><br><span class="line"><span class="comment">****************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns / 100ps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> sdram_model_plus (Dq, Addr, Ba, Clk, Cke, Cs_n, Ras_n, Cas_n, We_n, Dqm,Debug);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">parameter</span> addr_bits =    <span class="number">13</span>;</span><br><span class="line">    <span class="keyword">parameter</span> data_bits =    <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">parameter</span> col_bits  =    <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">parameter</span> mem_sizes =    <span class="number">4</span>*<span class="number">1024</span>*<span class="number">1024</span> -<span class="number">1</span>;<span class="comment">//1 Meg </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">inout</span>     [data_bits - <span class="number">1</span> : <span class="number">0</span>] Dq;</span><br><span class="line">    <span class="keyword">input</span>     [addr_bits - <span class="number">1</span> : <span class="number">0</span>] Addr;</span><br><span class="line">    <span class="keyword">input</span>                 [<span class="number">1</span> : <span class="number">0</span>] Ba;</span><br><span class="line">    <span class="keyword">input</span>                         Clk;</span><br><span class="line">    <span class="keyword">input</span>                         Cke;</span><br><span class="line">    <span class="keyword">input</span>                         Cs_n;</span><br><span class="line">    <span class="keyword">input</span>                         Ras_n;</span><br><span class="line">    <span class="keyword">input</span>                         Cas_n;</span><br><span class="line">    <span class="keyword">input</span>                         We_n;</span><br><span class="line">    <span class="keyword">input</span>                 [<span class="number">1</span> : <span class="number">0</span>] Dqm;          <span class="comment">//高低各8bit</span></span><br><span class="line">    <span class="comment">//added by xzli</span></span><br><span class="line">    <span class="keyword">input</span>              Debug;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span>       [data_bits - <span class="number">1</span> : <span class="number">0</span>] Bank0 [<span class="number">0</span> : mem_sizes];<span class="comment">//存储器类型数据</span></span><br><span class="line">    <span class="keyword">reg</span>       [data_bits - <span class="number">1</span> : <span class="number">0</span>] Bank1 [<span class="number">0</span> : mem_sizes];</span><br><span class="line">    <span class="keyword">reg</span>       [data_bits - <span class="number">1</span> : <span class="number">0</span>] Bank2 [<span class="number">0</span> : mem_sizes];</span><br><span class="line">    <span class="keyword">reg</span>       [data_bits - <span class="number">1</span> : <span class="number">0</span>] Bank3 [<span class="number">0</span> : mem_sizes];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span>                   [<span class="number">1</span> : <span class="number">0</span>] Bank_addr [<span class="number">0</span> : <span class="number">3</span>];                <span class="comment">// Bank Address Pipeline</span></span><br><span class="line">    <span class="keyword">reg</span>        [col_bits - <span class="number">1</span> : <span class="number">0</span>] Col_addr [<span class="number">0</span> : <span class="number">3</span>];                 <span class="comment">// Column Address Pipeline</span></span><br><span class="line">    <span class="keyword">reg</span>                   [<span class="number">3</span> : <span class="number">0</span>] Command [<span class="number">0</span> : <span class="number">3</span>];                  <span class="comment">// Command Operation Pipeline</span></span><br><span class="line">    <span class="keyword">reg</span>                   [<span class="number">3</span> : <span class="number">0</span>] Dqm_reg0, Dqm_reg1;               <span class="comment">// DQM Operation Pipeline</span></span><br><span class="line">    <span class="keyword">reg</span>       [addr_bits - <span class="number">1</span> : <span class="number">0</span>] B0_row_addr, B1_row_addr, B2_row_addr, B3_row_addr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span>       [addr_bits - <span class="number">1</span> : <span class="number">0</span>] Mode_reg;</span><br><span class="line">    <span class="keyword">reg</span>       [data_bits - <span class="number">1</span> : <span class="number">0</span>] Dq_reg, Dq_dqm;</span><br><span class="line">    <span class="keyword">reg</span>       [col_bits - <span class="number">1</span> : <span class="number">0</span>] Col_temp, Burst_counter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span>                           Act_b0, Act_b1, Act_b2, Act_b3;   <span class="comment">// Bank Activate</span></span><br><span class="line">    <span class="keyword">reg</span>                           Pc_b0, Pc_b1, Pc_b2, Pc_b3;       <span class="comment">// Bank Precharge</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span>                   [<span class="number">1</span> : <span class="number">0</span>] Bank_precharge     [<span class="number">0</span> : <span class="number">3</span>];       <span class="comment">// Precharge Command</span></span><br><span class="line">    <span class="keyword">reg</span>                           A10_precharge      [<span class="number">0</span> : <span class="number">3</span>];       <span class="comment">// Addr[10] = 1 (All banks)</span></span><br><span class="line">    <span class="keyword">reg</span>                           Auto_precharge     [<span class="number">0</span> : <span class="number">3</span>];       <span class="comment">// RW AutoPrecharge (Bank)</span></span><br><span class="line">    <span class="keyword">reg</span>                           Read_precharge     [<span class="number">0</span> : <span class="number">3</span>];       <span class="comment">// R  AutoPrecharge</span></span><br><span class="line">    <span class="keyword">reg</span>                           Write_precharge    [<span class="number">0</span> : <span class="number">3</span>];       <span class="comment">//  W AutoPrecharge</span></span><br><span class="line">    <span class="keyword">integer</span>                       Count_precharge    [<span class="number">0</span> : <span class="number">3</span>];       <span class="comment">// RW AutoPrecharge (Counter)</span></span><br><span class="line">    <span class="keyword">reg</span>                           RW_interrupt_read  [<span class="number">0</span> : <span class="number">3</span>];       <span class="comment">// RW Interrupt Read with Auto Precharge</span></span><br><span class="line">    <span class="keyword">reg</span>                           RW_interrupt_write [<span class="number">0</span> : <span class="number">3</span>];       <span class="comment">// RW Interrupt Write with Auto Precharge</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span>                           Data_in_enable;</span><br><span class="line">    <span class="keyword">reg</span>                           Data_out_enable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span>                   [<span class="number">1</span> : <span class="number">0</span>] Bank, Previous_bank;</span><br><span class="line">    <span class="keyword">reg</span>       [addr_bits - <span class="number">1</span> : <span class="number">0</span>] Row;</span><br><span class="line">    <span class="keyword">reg</span>        [col_bits - <span class="number">1</span> : <span class="number">0</span>] Col, Col_brst;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Internal system clock</span></span><br><span class="line">    <span class="keyword">reg</span>                           CkeZ, Sys_clk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span>    [<span class="number">24</span>:<span class="number">0</span>]    dd;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Commands Decode</span></span><br><span class="line">    <span class="keyword">wire</span>      Active_enable    = ~Cs_n &amp; ~Ras_n &amp;  Cas_n &amp;  We_n;</span><br><span class="line">    <span class="keyword">wire</span>      Aref_enable      = ~Cs_n &amp; ~Ras_n &amp; ~Cas_n &amp;  We_n;</span><br><span class="line">    <span class="keyword">wire</span>      Burst_term       = ~Cs_n &amp;  Ras_n &amp;  Cas_n &amp; ~We_n;</span><br><span class="line">    <span class="keyword">wire</span>      Mode_reg_enable  = ~Cs_n &amp; ~Ras_n &amp; ~Cas_n &amp; ~We_n;</span><br><span class="line">    <span class="keyword">wire</span>      Prech_enable     = ~Cs_n &amp; ~Ras_n &amp;  Cas_n &amp; ~We_n;</span><br><span class="line">    <span class="keyword">wire</span>      Read_enable      = ~Cs_n &amp;  Ras_n &amp; ~Cas_n &amp;  We_n;</span><br><span class="line">    <span class="keyword">wire</span>      Write_enable     = ~Cs_n &amp;  Ras_n &amp; ~Cas_n &amp; ~We_n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Burst Length Decode</span></span><br><span class="line">    <span class="keyword">wire</span>      Burst_length_1   = ~Mode_reg[<span class="number">2</span>] &amp; ~Mode_reg[<span class="number">1</span>] &amp; ~Mode_reg[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">wire</span>      Burst_length_2   = ~Mode_reg[<span class="number">2</span>] &amp; ~Mode_reg[<span class="number">1</span>] &amp;  Mode_reg[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">wire</span>      Burst_length_4   = ~Mode_reg[<span class="number">2</span>] &amp;  Mode_reg[<span class="number">1</span>] &amp; ~Mode_reg[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">wire</span>      Burst_length_8   = ~Mode_reg[<span class="number">2</span>] &amp;  Mode_reg[<span class="number">1</span>] &amp;  Mode_reg[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CAS Latency Decode</span></span><br><span class="line">    <span class="keyword">wire</span>      Cas_latency_2    = ~Mode_reg[<span class="number">6</span>] &amp;  Mode_reg[<span class="number">5</span>] &amp; ~Mode_reg[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">wire</span>      Cas_latency_3    = ~Mode_reg[<span class="number">6</span>] &amp;  Mode_reg[<span class="number">5</span>] &amp;  Mode_reg[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write Burst Mode</span></span><br><span class="line">    <span class="keyword">wire</span>      Write_burst_mode = Mode_reg[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">wire</span>      Debug;        <span class="comment">// Debug messages : 1 = On; 0 = Off</span></span><br><span class="line">    <span class="keyword">wire</span>      Dq_chk           = Sys_clk &amp; Data_in_enable;      <span class="comment">// Check setup/hold time for DQ</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span>        [<span class="number">31</span>:<span class="number">0</span>]    mem_d;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">event</span>    sdram_r,sdram_w,compare;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">assign</span>    Dq               = Dq_reg;                        <span class="comment">// DQ buffer</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Commands Operation</span></span><br><span class="line">    <span class="meta">`<span class="meta-keyword">define</span>   ACT       0</span></span><br><span class="line">    <span class="meta">`<span class="meta-keyword">define</span>   NOP       1</span></span><br><span class="line">    <span class="meta">`<span class="meta-keyword">define</span>   READ      2</span></span><br><span class="line">    <span class="meta">`<span class="meta-keyword">define</span>   READ_A    3</span></span><br><span class="line">    <span class="meta">`<span class="meta-keyword">define</span>   WRITE     4</span></span><br><span class="line">    <span class="meta">`<span class="meta-keyword">define</span>   WRITE_A   5</span></span><br><span class="line">    <span class="meta">`<span class="meta-keyword">define</span>   PRECH     6</span></span><br><span class="line">    <span class="meta">`<span class="meta-keyword">define</span>   A_REF     7</span></span><br><span class="line">    <span class="meta">`<span class="meta-keyword">define</span>   BST       8</span></span><br><span class="line">    <span class="meta">`<span class="meta-keyword">define</span>   LMR       9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    // Timing Parameters for -75 (PC133) and CAS Latency = 2</span></span><br><span class="line"><span class="comment">//    parameter tAC  =   8;    //test 6.5</span></span><br><span class="line"><span class="comment">//    parameter tHZ  =   7.0;</span></span><br><span class="line"><span class="comment">//    parameter tOH  =   2.7;</span></span><br><span class="line"><span class="comment">//    parameter tMRD =   2.0;     // 2 Clk Cycles</span></span><br><span class="line"><span class="comment">//    parameter tRAS =  44.0;</span></span><br><span class="line"><span class="comment">//    parameter tRC  =  66.0;</span></span><br><span class="line"><span class="comment">//    parameter tRCD =  20.0;</span></span><br><span class="line"><span class="comment">//    parameter tRP  =  20.0;</span></span><br><span class="line"><span class="comment">//    parameter tRRD =  15.0;</span></span><br><span class="line"><span class="comment">//    parameter tWRa =   7.5;     // A2 Version - Auto precharge mode only (1 Clk + 7.5 ns)</span></span><br><span class="line"><span class="comment">//    parameter tWRp =  0.0;     // A2 Version - Precharge mode only (15 ns)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Timing Parameters for -7 (PC143) and CAS Latency = 3</span></span><br><span class="line">    <span class="keyword">parameter</span> tAC  =   <span class="number">6</span><span class="variable">.5</span>;    <span class="comment">//test 6.5</span></span><br><span class="line">    <span class="keyword">parameter</span> tHZ  =   <span class="number">5</span><span class="variable">.5</span>;</span><br><span class="line">    <span class="keyword">parameter</span> tOH  =   <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">parameter</span> tMRD =   <span class="number">2</span><span class="variable">.0</span>;     <span class="comment">// 2 Clk Cycles</span></span><br><span class="line">    <span class="keyword">parameter</span> tRAS =  <span class="number">48</span><span class="variable">.0</span>;</span><br><span class="line">    <span class="keyword">parameter</span> tRC  =  <span class="number">70</span><span class="variable">.0</span>;</span><br><span class="line">    <span class="keyword">parameter</span> tRCD =  <span class="number">20</span><span class="variable">.0</span>;</span><br><span class="line">    <span class="keyword">parameter</span> tRP  =  <span class="number">20</span><span class="variable">.0</span>;</span><br><span class="line">    <span class="keyword">parameter</span> tRRD =  <span class="number">14</span><span class="variable">.0</span>;</span><br><span class="line">    <span class="keyword">parameter</span> tWRa =   <span class="number">7</span><span class="variable">.5</span>;     <span class="comment">// A2 Version - Auto precharge mode only (1 Clk + 7.5 ns)</span></span><br><span class="line">    <span class="keyword">parameter</span> tWRp =  <span class="number">0</span><span class="variable">.0</span>;     <span class="comment">// A2 Version - Precharge mode only (15 ns)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Timing Check variable</span></span><br><span class="line">    <span class="keyword">integer</span>   MRD_chk;</span><br><span class="line">    <span class="keyword">integer</span>   WR_counter [<span class="number">0</span> : <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">time</span>      WR_chk [<span class="number">0</span> : <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">time</span>      RC_chk, RRD_chk;</span><br><span class="line">    <span class="keyword">time</span>      RAS_chk0, RAS_chk1, RAS_chk2, RAS_chk3;</span><br><span class="line">    <span class="keyword">time</span>      RCD_chk0, RCD_chk1, RCD_chk2, RCD_chk3;</span><br><span class="line">    <span class="keyword">time</span>      RP_chk0, RP_chk1, RP_chk2, RP_chk3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">integer</span>    test_file;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//*****display the command of the sdram**************************************</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">parameter</span>    Mode_Reg_Set    =<span class="number">4'b0000</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    Auto_Refresh    =<span class="number">4'b0001</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    Row_Active    =<span class="number">4'b0011</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    Pre_Charge    =<span class="number">4'b0010</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    PreCharge_All    =<span class="number">4'b0010</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    Write        =<span class="number">4'b0100</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    Write_Pre    =<span class="number">4'b0100</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    Read        =<span class="number">4'b0101</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    Read_Pre    =<span class="number">4'b0101</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    Burst_Stop    =<span class="number">4'b0110</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    Nop        =<span class="number">4'b0111</span>;</span><br><span class="line">    <span class="keyword">parameter</span>    Dsel        =<span class="number">4'b1111</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">wire</span>    [<span class="number">3</span>:<span class="number">0</span>]    sdram_control;</span><br><span class="line">    <span class="keyword">reg</span>            cke_temp;</span><br><span class="line">    <span class="keyword">reg</span>        [<span class="number">8</span>*<span class="number">13</span>:<span class="number">1</span>]    sdram_command;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">always</span>@(<span class="keyword">posedge</span> Clk)</span><br><span class="line">    cke_temp&lt;=Cke;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span>    sdram_control=&#123;Cs_n,Ras_n,Cas_n,We_n&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span>@(sdram_control <span class="keyword">or</span> cke_temp)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span>(sdram_control)</span><br><span class="line">            Mode_Reg_Set:    sdram_command&lt;=<span class="string">"Mode_Reg_Set"</span>;</span><br><span class="line">            Auto_Refresh:    sdram_command&lt;=<span class="string">"Auto_Refresh"</span>;</span><br><span class="line">            Row_Active:    sdram_command&lt;=<span class="string">"Row_Active"</span>;</span><br><span class="line">            Pre_Charge:    sdram_command&lt;=<span class="string">"Pre_Charge"</span>;</span><br><span class="line">            Burst_Stop:    sdram_command&lt;=<span class="string">"Burst_Stop"</span>;</span><br><span class="line">            Dsel:        sdram_command&lt;=<span class="string">"Dsel"</span>;</span><br><span class="line"></span><br><span class="line">            Write:        <span class="keyword">if</span>(cke_temp==<span class="number">1</span>)</span><br><span class="line">                        sdram_command&lt;=<span class="string">"Write"</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        sdram_command&lt;=<span class="string">"Write_suspend"</span>;</span><br><span class="line">                        </span><br><span class="line">            Read:        <span class="keyword">if</span>(cke_temp==<span class="number">1</span>)</span><br><span class="line">                        sdram_command&lt;=<span class="string">"Read"</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        sdram_command&lt;=<span class="string">"Read_suspend"</span>;</span><br><span class="line">                        </span><br><span class="line">            Nop:        <span class="keyword">if</span>(cke_temp==<span class="number">1</span>)</span><br><span class="line">                        sdram_command&lt;=<span class="string">"Nop"</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        sdram_command&lt;=<span class="string">"Self_refresh"</span>;</span><br><span class="line">                        </span><br><span class="line">            <span class="keyword">default</span>:    sdram_command&lt;=<span class="string">"Power_down"</span>;</span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//*****************************************************</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">initial</span> </span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">        <span class="comment">//test_file=$fopen("test_file.txt");</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">initial</span> </span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">        Dq_reg = &#123;data_bits&#123;<span class="number">1'bz</span>&#125;&#125;;</span><br><span class="line">        &#123;Data_in_enable, Data_out_enable&#125; = <span class="number">0</span>;</span><br><span class="line">        &#123;Act_b0, Act_b1, Act_b2, Act_b3&#125; = <span class="number">4'b0000</span>;</span><br><span class="line">        &#123;Pc_b0, Pc_b1, Pc_b2, Pc_b3&#125; = <span class="number">4'b0000</span>;</span><br><span class="line">        &#123;WR_chk[<span class="number">0</span>], WR_chk[<span class="number">1</span>], WR_chk[<span class="number">2</span>], WR_chk[<span class="number">3</span>]&#125; = <span class="number">0</span>;</span><br><span class="line">        &#123;WR_counter[<span class="number">0</span>], WR_counter[<span class="number">1</span>], WR_counter[<span class="number">2</span>], WR_counter[<span class="number">3</span>]&#125; = <span class="number">0</span>;</span><br><span class="line">        &#123;RW_interrupt_read[<span class="number">0</span>], RW_interrupt_read[<span class="number">1</span>], RW_interrupt_read[<span class="number">2</span>], RW_interrupt_read[<span class="number">3</span>]&#125; = <span class="number">0</span>;</span><br><span class="line">        &#123;RW_interrupt_write[<span class="number">0</span>], RW_interrupt_write[<span class="number">1</span>], RW_interrupt_write[<span class="number">2</span>], RW_interrupt_write[<span class="number">3</span>]&#125; = <span class="number">0</span>;</span><br><span class="line">        &#123;MRD_chk, RC_chk, RRD_chk&#125; = <span class="number">0</span>;</span><br><span class="line">        &#123;RAS_chk0, RAS_chk1, RAS_chk2, RAS_chk3&#125; = <span class="number">0</span>;</span><br><span class="line">        &#123;RCD_chk0, RCD_chk1, RCD_chk2, RCD_chk3&#125; = <span class="number">0</span>;</span><br><span class="line">        &#123;RP_chk0, RP_chk1, RP_chk2, RP_chk3&#125; = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">$timeformat</span> (-<span class="number">9</span>, <span class="number">0</span>, <span class="string">" ns"</span>, <span class="number">12</span>);</span><br><span class="line">        <span class="comment">//$readmemh("bank0.txt", Bank0);</span></span><br><span class="line">        <span class="comment">//$readmemh("bank1.txt", Bank1);</span></span><br><span class="line">        <span class="comment">//$readmemh("bank2.txt", Bank2);</span></span><br><span class="line">        <span class="comment">//$readmemh("bank3.txt", Bank3);</span></span><br><span class="line"><span class="comment">/*      </span></span><br><span class="line"><span class="comment">       for(dd=0;dd&lt;=mem_sizes;dd=dd+1)</span></span><br><span class="line"><span class="comment">            begin</span></span><br><span class="line"><span class="comment">                Bank0[dd]=dd[data_bits - 1 : 0];</span></span><br><span class="line"><span class="comment">                Bank1[dd]=dd[data_bits - 1 : 0]+1;</span></span><br><span class="line"><span class="comment">                Bank2[dd]=dd[data_bits - 1 : 0]+2;</span></span><br><span class="line"><span class="comment">                Bank3[dd]=dd[data_bits - 1 : 0]+3;</span></span><br><span class="line"><span class="comment">            end</span></span><br><span class="line"><span class="comment">*/</span>            </span><br><span class="line">      initial_sdram(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">task</span>    initial_sdram; </span><br><span class="line"> </span><br><span class="line">         <span class="keyword">input</span>        data_sign;</span><br><span class="line">         <span class="keyword">reg</span>    [<span class="number">3</span>:<span class="number">0</span>]    data_sign;</span><br><span class="line">          </span><br><span class="line">               <span class="keyword">for</span>(dd=<span class="number">0</span>;dd&lt;=mem_sizes;dd=dd+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                mem_d = &#123;data_sign,data_sign,data_sign,data_sign,data_sign,data_sign,data_sign,data_sign&#125;;</span><br><span class="line">                <span class="keyword">if</span>(data_bits==<span class="number">16</span>)</span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        Bank0[dd]=mem_d[<span class="number">15</span>:<span class="number">0</span>];</span><br><span class="line">                        Bank1[dd]=mem_d[<span class="number">15</span>:<span class="number">0</span>];</span><br><span class="line">                        Bank2[dd]=mem_d[<span class="number">15</span>:<span class="number">0</span>];</span><br><span class="line">                        Bank3[dd]=mem_d[<span class="number">15</span>:<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(data_bits==<span class="number">32</span>)</span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        Bank0[dd]=mem_d[<span class="number">31</span>:<span class="number">0</span>];</span><br><span class="line">                        Bank1[dd]=mem_d[<span class="number">31</span>:<span class="number">0</span>];</span><br><span class="line">                        Bank2[dd]=mem_d[<span class="number">31</span>:<span class="number">0</span>];</span><br><span class="line">                        Bank3[dd]=mem_d[<span class="number">31</span>:<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span>    </span><br><span class="line">          </span><br><span class="line">               <span class="keyword">endtask</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// System clock generator</span></span><br><span class="line">    <span class="keyword">always</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">               @(<span class="keyword">posedge</span> Clk)</span><br><span class="line">                   <span class="keyword">begin</span></span><br><span class="line">                        Sys_clk = CkeZ;</span><br><span class="line">                        CkeZ = Cke;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            @(<span class="keyword">negedge</span> Clk) </span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                        Sys_clk = <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @ (<span class="keyword">posedge</span> Sys_clk) <span class="keyword">begin</span></span><br><span class="line">        <span class="comment">// Internal Commamd Pipelined</span></span><br><span class="line">        Command[<span class="number">0</span>] = Command[<span class="number">1</span>];</span><br><span class="line">        Command[<span class="number">1</span>] = Command[<span class="number">2</span>];</span><br><span class="line">        Command[<span class="number">2</span>] = Command[<span class="number">3</span>];</span><br><span class="line">        Command[<span class="number">3</span>] = <span class="meta">`NOP;</span></span><br><span class="line"></span><br><span class="line">        Col_addr[<span class="number">0</span>] = Col_addr[<span class="number">1</span>];</span><br><span class="line">        Col_addr[<span class="number">1</span>] = Col_addr[<span class="number">2</span>];</span><br><span class="line">        Col_addr[<span class="number">2</span>] = Col_addr[<span class="number">3</span>];</span><br><span class="line">        Col_addr[<span class="number">3</span>] = &#123;col_bits&#123;<span class="number">1'b0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">        Bank_addr[<span class="number">0</span>] = Bank_addr[<span class="number">1</span>];</span><br><span class="line">        Bank_addr[<span class="number">1</span>] = Bank_addr[<span class="number">2</span>];</span><br><span class="line">        Bank_addr[<span class="number">2</span>] = Bank_addr[<span class="number">3</span>];</span><br><span class="line">        Bank_addr[<span class="number">3</span>] = <span class="number">2'b0</span>;</span><br><span class="line"></span><br><span class="line">        Bank_precharge[<span class="number">0</span>] = Bank_precharge[<span class="number">1</span>];</span><br><span class="line">        Bank_precharge[<span class="number">1</span>] = Bank_precharge[<span class="number">2</span>];</span><br><span class="line">        Bank_precharge[<span class="number">2</span>] = Bank_precharge[<span class="number">3</span>];</span><br><span class="line">        Bank_precharge[<span class="number">3</span>] = <span class="number">2'b0</span>;</span><br><span class="line"></span><br><span class="line">        A10_precharge[<span class="number">0</span>] = A10_precharge[<span class="number">1</span>];</span><br><span class="line">        A10_precharge[<span class="number">1</span>] = A10_precharge[<span class="number">2</span>];</span><br><span class="line">        A10_precharge[<span class="number">2</span>] = A10_precharge[<span class="number">3</span>];</span><br><span class="line">        A10_precharge[<span class="number">3</span>] = <span class="number">1'b0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Dqm pipeline for Read</span></span><br><span class="line">        Dqm_reg0 = Dqm_reg1;</span><br><span class="line">        Dqm_reg1 = Dqm;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read or Write with Auto Precharge Counter</span></span><br><span class="line">        <span class="keyword">if</span> (Auto_precharge[<span class="number">0</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">            Count_precharge[<span class="number">0</span>] = Count_precharge[<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> (Auto_precharge[<span class="number">1</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">            Count_precharge[<span class="number">1</span>] = Count_precharge[<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> (Auto_precharge[<span class="number">2</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">            Count_precharge[<span class="number">2</span>] = Count_precharge[<span class="number">2</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> (Auto_precharge[<span class="number">3</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">            Count_precharge[<span class="number">3</span>] = Count_precharge[<span class="number">3</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// tMRD Counter</span></span><br><span class="line">        MRD_chk = MRD_chk + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// tWR Counter for Write</span></span><br><span class="line">        WR_counter[<span class="number">0</span>] = WR_counter[<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">        WR_counter[<span class="number">1</span>] = WR_counter[<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        WR_counter[<span class="number">2</span>] = WR_counter[<span class="number">2</span>] + <span class="number">1</span>;</span><br><span class="line">        WR_counter[<span class="number">3</span>] = WR_counter[<span class="number">3</span>] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Auto Refresh</span></span><br><span class="line">        <span class="keyword">if</span> (Aref_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t AREF : Auto Refresh"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="comment">// Auto Refresh to Auto Refresh</span></span><br><span class="line">            <span class="keyword">if</span> ((<span class="built_in">$time</span> - RC_chk &lt; tRC)&amp;&amp;Debug) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRC violation during Auto Refresh"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Precharge to Auto Refresh</span></span><br><span class="line">            <span class="keyword">if</span> ((<span class="built_in">$time</span> - RP_chk0 &lt; tRP || <span class="built_in">$time</span> - RP_chk1 &lt; tRP || <span class="built_in">$time</span> - RP_chk2 &lt; tRP || <span class="built_in">$time</span> - RP_chk3 &lt; tRP)&amp;&amp;Debug) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRP violation during Auto Refresh"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Precharge to Refresh</span></span><br><span class="line">            <span class="keyword">if</span> (Pc_b0 == <span class="number">1'b0</span> || Pc_b1 == <span class="number">1'b0</span> || Pc_b2 == <span class="number">1'b0</span> || Pc_b3 == <span class="number">1'b0</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: All banks must be Precharge before Auto Refresh"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Record Current tRC time</span></span><br><span class="line">            RC_chk = <span class="built_in">$time</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Load Mode Register</span></span><br><span class="line">        <span class="keyword">if</span> (Mode_reg_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">// Decode CAS Latency, Burst Length, Burst Type, and Write Burst Mode</span></span><br><span class="line">            <span class="keyword">if</span> (Pc_b0 == <span class="number">1'b1</span> &amp;&amp; Pc_b1 == <span class="number">1'b1</span> &amp;&amp; Pc_b2 == <span class="number">1'b1</span> &amp;&amp; Pc_b3 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                Mode_reg = Addr;</span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="keyword">begin</span></span><br><span class="line">                    <span class="built_in">$display</span> (<span class="string">"at time %t LMR  : Load Mode Register"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                    <span class="comment">// CAS Latency</span></span><br><span class="line">                    <span class="keyword">if</span> (Addr[<span class="number">6</span> : <span class="number">4</span>] == <span class="number">3'b010</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            CAS Latency      = 2"</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (Addr[<span class="number">6</span> : <span class="number">4</span>] == <span class="number">3'b011</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            CAS Latency      = 3"</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            CAS Latency      = Reserved"</span>);</span><br><span class="line">                    <span class="comment">// Burst Length</span></span><br><span class="line">                    <span class="keyword">if</span> (Addr[<span class="number">2</span> : <span class="number">0</span>] == <span class="number">3'b000</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Burst Length     = 1"</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (Addr[<span class="number">2</span> : <span class="number">0</span>] == <span class="number">3'b001</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Burst Length     = 2"</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (Addr[<span class="number">2</span> : <span class="number">0</span>] == <span class="number">3'b010</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Burst Length     = 4"</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (Addr[<span class="number">2</span> : <span class="number">0</span>] == <span class="number">3'b011</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Burst Length     = 8"</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (Addr[<span class="number">3</span> : <span class="number">0</span>] == <span class="number">4'b0111</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Burst Length     = Full"</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Burst Length     = Reserved"</span>);</span><br><span class="line">                    <span class="comment">// Burst Type</span></span><br><span class="line">                    <span class="keyword">if</span> (Addr[<span class="number">3</span>] == <span class="number">1'b0</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Burst Type       = Sequential"</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (Addr[<span class="number">3</span>] == <span class="number">1'b1</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Burst Type       = Interleaved"</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Burst Type       = Reserved"</span>);</span><br><span class="line">                    <span class="comment">// Write Burst Mode</span></span><br><span class="line">                    <span class="keyword">if</span> (Addr[<span class="number">9</span>] == <span class="number">1'b0</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Write Burst Mode = Programmed Burst Length"</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (Addr[<span class="number">9</span>] == <span class="number">1'b1</span>)</span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Write Burst Mode = Single Location Access"</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"                            Write Burst Mode = Reserved"</span>);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: all banks must be Precharge before Load Mode Register"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// REF to LMR</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">$time</span> - RC_chk &lt; tRC) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRC violation during Load Mode Register"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// LMR to LMR</span></span><br><span class="line">            <span class="keyword">if</span> (MRD_chk &lt; tMRD) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tMRD violation during Load Mode Register"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            MRD_chk = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Active Block (Latch Bank Address and Row Address)</span></span><br><span class="line">        <span class="keyword">if</span> (Active_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (Ba == <span class="number">2'b00</span> &amp;&amp; Pc_b0 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                &#123;Act_b0, Pc_b0&#125; = <span class="number">2'b10</span>;</span><br><span class="line">                B0_row_addr = Addr [addr_bits - <span class="number">1</span> : <span class="number">0</span>];</span><br><span class="line">                RCD_chk0 = <span class="built_in">$time</span>;</span><br><span class="line">                RAS_chk0 = <span class="built_in">$time</span>;</span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t ACT  : Bank = 0 Row = %d"</span>, <span class="built_in">$time</span>, Addr);</span><br><span class="line">                <span class="comment">// Precharge to Activate Bank 0</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">$time</span> - RP_chk0 &lt; tRP) <span class="keyword">begin</span></span><br><span class="line">                    <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRP violation during Activate bank 0"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Ba == <span class="number">2'b01</span> &amp;&amp; Pc_b1 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                &#123;Act_b1, Pc_b1&#125; = <span class="number">2'b10</span>;</span><br><span class="line">                B1_row_addr = Addr [addr_bits - <span class="number">1</span> : <span class="number">0</span>];</span><br><span class="line">                RCD_chk1 = <span class="built_in">$time</span>;</span><br><span class="line">                RAS_chk1 = <span class="built_in">$time</span>;</span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t ACT  : Bank = 1 Row = %d"</span>, <span class="built_in">$time</span>, Addr);</span><br><span class="line">                <span class="comment">// Precharge to Activate Bank 1</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">$time</span> - RP_chk1 &lt; tRP) <span class="keyword">begin</span></span><br><span class="line">                    <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRP violation during Activate bank 1"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Ba == <span class="number">2'b10</span> &amp;&amp; Pc_b2 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                &#123;Act_b2, Pc_b2&#125; = <span class="number">2'b10</span>;</span><br><span class="line">                B2_row_addr = Addr [addr_bits - <span class="number">1</span> : <span class="number">0</span>];</span><br><span class="line">                RCD_chk2 = <span class="built_in">$time</span>;</span><br><span class="line">                RAS_chk2 = <span class="built_in">$time</span>;</span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t ACT  : Bank = 2 Row = %d"</span>, <span class="built_in">$time</span>, Addr);</span><br><span class="line">                <span class="comment">// Precharge to Activate Bank 2</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">$time</span> - RP_chk2 &lt; tRP) <span class="keyword">begin</span></span><br><span class="line">                    <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRP violation during Activate bank 2"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Ba == <span class="number">2'b11</span> &amp;&amp; Pc_b3 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                &#123;Act_b3, Pc_b3&#125; = <span class="number">2'b10</span>;</span><br><span class="line">                B3_row_addr = Addr [addr_bits - <span class="number">1</span> : <span class="number">0</span>];</span><br><span class="line">                RCD_chk3 = <span class="built_in">$time</span>;</span><br><span class="line">                RAS_chk3 = <span class="built_in">$time</span>;</span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t ACT  : Bank = 3 Row = %d"</span>, <span class="built_in">$time</span>, Addr);</span><br><span class="line">                <span class="comment">// Precharge to Activate Bank 3</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">$time</span> - RP_chk3 &lt; tRP) <span class="keyword">begin</span></span><br><span class="line">                    <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRP violation during Activate bank 3"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Ba == <span class="number">2'b00</span> &amp;&amp; Pc_b0 == <span class="number">1'b0</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: Bank 0 is not Precharged."</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Ba == <span class="number">2'b01</span> &amp;&amp; Pc_b1 == <span class="number">1'b0</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: Bank 1 is not Precharged."</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Ba == <span class="number">2'b10</span> &amp;&amp; Pc_b2 == <span class="number">1'b0</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: Bank 2 is not Precharged."</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Ba == <span class="number">2'b11</span> &amp;&amp; Pc_b3 == <span class="number">1'b0</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: Bank 3 is not Precharged."</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Active Bank A to Active Bank B</span></span><br><span class="line">            <span class="keyword">if</span> ((Previous_bank != Ba) &amp;&amp; (<span class="built_in">$time</span> - RRD_chk &lt; tRRD)) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRRD violation during Activate bank = %d"</span>, <span class="built_in">$time</span>, Ba);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Load Mode Register to Active</span></span><br><span class="line">            <span class="keyword">if</span> (MRD_chk &lt; tMRD ) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tMRD violation during Activate bank = %d"</span>, <span class="built_in">$time</span>, Ba);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Auto Refresh to Activate</span></span><br><span class="line">            <span class="keyword">if</span> ((<span class="built_in">$time</span> - RC_chk &lt; tRC)&amp;&amp;Debug) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRC violation during Activate bank = %d"</span>, <span class="built_in">$time</span>, Ba);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Record variables for checking violation</span></span><br><span class="line">            RRD_chk = <span class="built_in">$time</span>;</span><br><span class="line">            Previous_bank = Ba;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Precharge Block</span></span><br><span class="line">        <span class="keyword">if</span> (Prech_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (Addr[<span class="number">10</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                &#123;Pc_b0, Pc_b1, Pc_b2, Pc_b3&#125; = <span class="number">4'b1111</span>;</span><br><span class="line">                &#123;Act_b0, Act_b1, Act_b2, Act_b3&#125; = <span class="number">4'b0000</span>;</span><br><span class="line">                RP_chk0 = <span class="built_in">$time</span>;</span><br><span class="line">                RP_chk1 = <span class="built_in">$time</span>;</span><br><span class="line">                RP_chk2 = <span class="built_in">$time</span>;</span><br><span class="line">                RP_chk3 = <span class="built_in">$time</span>;</span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t PRE  : Bank = ALL"</span>,<span class="built_in">$time</span>);</span><br><span class="line">                <span class="comment">// Activate to Precharge all banks</span></span><br><span class="line">                <span class="keyword">if</span> ((<span class="built_in">$time</span> - RAS_chk0 &lt; tRAS) || (<span class="built_in">$time</span> - RAS_chk1 &lt; tRAS) ||</span><br><span class="line">                    (<span class="built_in">$time</span> - RAS_chk2 &lt; tRAS) || (<span class="built_in">$time</span> - RAS_chk3 &lt; tRAS)) <span class="keyword">begin</span></span><br><span class="line">                    <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRAS violation during Precharge all bank"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="comment">// tWR violation check for write</span></span><br><span class="line">                <span class="keyword">if</span> ((<span class="built_in">$time</span> - WR_chk[<span class="number">0</span>] &lt; tWRp) || (<span class="built_in">$time</span> - WR_chk[<span class="number">1</span>] &lt; tWRp) ||</span><br><span class="line">                    (<span class="built_in">$time</span> - WR_chk[<span class="number">2</span>] &lt; tWRp) || (<span class="built_in">$time</span> - WR_chk[<span class="number">3</span>] &lt; tWRp)) <span class="keyword">begin</span></span><br><span class="line">                    <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tWR violation during Precharge all bank"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Addr[<span class="number">10</span>] == <span class="number">1'b0</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Ba == <span class="number">2'b00</span>) <span class="keyword">begin</span></span><br><span class="line">                    &#123;Pc_b0, Act_b0&#125; = <span class="number">2'b10</span>;</span><br><span class="line">                    RP_chk0 = <span class="built_in">$time</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t PRE  : Bank = 0"</span>,<span class="built_in">$time</span>);</span><br><span class="line">                    <span class="comment">// Activate to Precharge Bank 0</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">$time</span> - RAS_chk0 &lt; tRAS) <span class="keyword">begin</span></span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRAS violation during Precharge bank 0"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Ba == <span class="number">2'b01</span>) <span class="keyword">begin</span></span><br><span class="line">                    &#123;Pc_b1, Act_b1&#125; = <span class="number">2'b10</span>;</span><br><span class="line">                    RP_chk1 = <span class="built_in">$time</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t PRE  : Bank = 1"</span>,<span class="built_in">$time</span>);</span><br><span class="line">                    <span class="comment">// Activate to Precharge Bank 1</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">$time</span> - RAS_chk1 &lt; tRAS) <span class="keyword">begin</span></span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRAS violation during Precharge bank 1"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Ba == <span class="number">2'b10</span>) <span class="keyword">begin</span></span><br><span class="line">                    &#123;Pc_b2, Act_b2&#125; = <span class="number">2'b10</span>;</span><br><span class="line">                    RP_chk2 = <span class="built_in">$time</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t PRE  : Bank = 2"</span>,<span class="built_in">$time</span>);</span><br><span class="line">                    <span class="comment">// Activate to Precharge Bank 2</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">$time</span> - RAS_chk2 &lt; tRAS) <span class="keyword">begin</span></span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRAS violation during Precharge bank 2"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Ba == <span class="number">2'b11</span>) <span class="keyword">begin</span></span><br><span class="line">                    &#123;Pc_b3, Act_b3&#125; = <span class="number">2'b10</span>;</span><br><span class="line">                    RP_chk3 = <span class="built_in">$time</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t PRE  : Bank = 3"</span>,<span class="built_in">$time</span>);</span><br><span class="line">                    <span class="comment">// Activate to Precharge Bank 3</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">$time</span> - RAS_chk3 &lt; tRAS) <span class="keyword">begin</span></span><br><span class="line">                        <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tRAS violation during Precharge bank 3"</span>, <span class="built_in">$time</span>);</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="comment">// tWR violation check for write</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">$time</span> - WR_chk[Ba] &lt; tWRp) <span class="keyword">begin</span></span><br><span class="line">                    <span class="built_in">$display</span> (<span class="string">"at time %t ERROR: tWR violation during Precharge bank %d"</span>, <span class="built_in">$time</span>, Ba);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Terminate a Write Immediately (if same bank or all banks)</span></span><br><span class="line">            <span class="keyword">if</span> (Data_in_enable == <span class="number">1'b1</span> &amp;&amp; (Bank == Ba || Addr[<span class="number">10</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">                Data_in_enable = <span class="number">1'b0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Precharge Command Pipeline for Read</span></span><br><span class="line">            <span class="keyword">if</span> (Cas_latency_3 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                Command[<span class="number">2</span>] = <span class="meta">`PRECH;</span></span><br><span class="line">                Bank_precharge[<span class="number">2</span>] = Ba;</span><br><span class="line">                A10_precharge[<span class="number">2</span>] = Addr[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Cas_latency_2 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                Command[<span class="number">1</span>] = <span class="meta">`PRECH;</span></span><br><span class="line">                Bank_precharge[<span class="number">1</span>] = Ba;</span><br><span class="line">                A10_precharge[<span class="number">1</span>] = Addr[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Burst terminate</span></span><br><span class="line">        <span class="keyword">if</span> (Burst_term == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">// Terminate a Write Immediately</span></span><br><span class="line">            <span class="keyword">if</span> (Data_in_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                Data_in_enable = <span class="number">1'b0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Terminate a Read Depend on CAS Latency</span></span><br><span class="line">            <span class="keyword">if</span> (Cas_latency_3 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                Command[<span class="number">2</span>] = <span class="meta">`BST;</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Cas_latency_2 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                Command[<span class="number">1</span>] = <span class="meta">`BST;</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t BST  : Burst Terminate"</span>,<span class="built_in">$time</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Read, Write, Column Latch</span></span><br><span class="line">        <span class="keyword">if</span> (Read_enable == <span class="number">1'b1</span> || Write_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">// Check to see if bank is open (ACT)</span></span><br><span class="line">            <span class="keyword">if</span> ((Ba == <span class="number">2'b00</span> &amp;&amp; Pc_b0 == <span class="number">1'b1</span>) || (Ba == <span class="number">2'b01</span> &amp;&amp; Pc_b1 == <span class="number">1'b1</span>) ||</span><br><span class="line">                (Ba == <span class="number">2'b10</span> &amp;&amp; Pc_b2 == <span class="number">1'b1</span>) || (Ba == <span class="number">2'b11</span> &amp;&amp; Pc_b3 == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">                <span class="built_in">$display</span>(<span class="string">"at time %t ERROR: Cannot Read or Write - Bank %d is not Activated"</span>, <span class="built_in">$time</span>, Ba);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Activate to Read or Write</span></span><br><span class="line">            <span class="keyword">if</span> ((Ba == <span class="number">2'b00</span>) &amp;&amp; (<span class="built_in">$time</span> - RCD_chk0 &lt; tRCD))</span><br><span class="line">                <span class="built_in">$display</span>(<span class="string">"at time %t ERROR: tRCD violation during Read or Write to Bank 0"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">if</span> ((Ba == <span class="number">2'b01</span>) &amp;&amp; (<span class="built_in">$time</span> - RCD_chk1 &lt; tRCD))</span><br><span class="line">                <span class="built_in">$display</span>(<span class="string">"at time %t ERROR: tRCD violation during Read or Write to Bank 1"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">if</span> ((Ba == <span class="number">2'b10</span>) &amp;&amp; (<span class="built_in">$time</span> - RCD_chk2 &lt; tRCD))</span><br><span class="line">                <span class="built_in">$display</span>(<span class="string">"at time %t ERROR: tRCD violation during Read or Write to Bank 2"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">if</span> ((Ba == <span class="number">2'b11</span>) &amp;&amp; (<span class="built_in">$time</span> - RCD_chk3 &lt; tRCD))</span><br><span class="line">                <span class="built_in">$display</span>(<span class="string">"at time %t ERROR: tRCD violation during Read or Write to Bank 3"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="comment">// Read Command</span></span><br><span class="line">            <span class="keyword">if</span> (Read_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="comment">// CAS Latency pipeline</span></span><br><span class="line">                <span class="keyword">if</span> (Cas_latency_3 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                    <span class="keyword">if</span> (Addr[<span class="number">10</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                        Command[<span class="number">2</span>] = <span class="meta">`READ_A;</span></span><br><span class="line">                    <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                        Command[<span class="number">2</span>] = <span class="meta">`READ;</span></span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    Col_addr[<span class="number">2</span>] = Addr;</span><br><span class="line">                    Bank_addr[<span class="number">2</span>] = Ba;</span><br><span class="line">                <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Cas_latency_2 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                    <span class="keyword">if</span> (Addr[<span class="number">10</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                        Command[<span class="number">1</span>] = <span class="meta">`READ_A;</span></span><br><span class="line">                    <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                        Command[<span class="number">1</span>] = <span class="meta">`READ;</span></span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    Col_addr[<span class="number">1</span>] = Addr;</span><br><span class="line">                    Bank_addr[<span class="number">1</span>] = Ba;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Read interrupt Write (terminate Write immediately)</span></span><br><span class="line">                <span class="keyword">if</span> (Data_in_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                    Data_in_enable = <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Write Command</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Write_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Addr[<span class="number">10</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                    Command[<span class="number">0</span>] = <span class="meta">`WRITE_A;</span></span><br><span class="line">                <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                    Command[<span class="number">0</span>] = <span class="meta">`WRITE;</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                Col_addr[<span class="number">0</span>] = Addr;</span><br><span class="line">                Bank_addr[<span class="number">0</span>] = Ba;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Write interrupt Write (terminate Write immediately)</span></span><br><span class="line">                <span class="keyword">if</span> (Data_in_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                    Data_in_enable = <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Write interrupt Read (terminate Read immediately)</span></span><br><span class="line">                <span class="keyword">if</span> (Data_out_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                    Data_out_enable = <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Interrupting a Write with Autoprecharge</span></span><br><span class="line">            <span class="keyword">if</span> (Auto_precharge[Bank] == <span class="number">1'b1</span> &amp;&amp; Write_precharge[Bank] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                RW_interrupt_write[Bank] = <span class="number">1'b1</span>;</span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t NOTE : Read/Write Bank %d interrupt Write Bank %d with Autoprecharge"</span>, <span class="built_in">$time</span>, Ba, Bank);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Interrupting a Read with Autoprecharge</span></span><br><span class="line">            <span class="keyword">if</span> (Auto_precharge[Bank] == <span class="number">1'b1</span> &amp;&amp; Read_precharge[Bank] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                RW_interrupt_read[Bank] = <span class="number">1'b1</span>;</span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t NOTE : Read/Write Bank %d interrupt Read Bank %d with Autoprecharge"</span>, <span class="built_in">$time</span>, Ba, Bank);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Read or Write with Auto Precharge</span></span><br><span class="line">            <span class="keyword">if</span> (Addr[<span class="number">10</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                Auto_precharge[Ba] = <span class="number">1'b1</span>;</span><br><span class="line">                Count_precharge[Ba] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (Read_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                    Read_precharge[Ba] = <span class="number">1'b1</span>;</span><br><span class="line">                <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Write_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                    Write_precharge[Ba] = <span class="number">1'b1</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Read with Auto Precharge Calculation</span></span><br><span class="line">        <span class="comment">//      The device start internal precharge:</span></span><br><span class="line">        <span class="comment">//          1.  CAS Latency - 1 cycles before last burst</span></span><br><span class="line">        <span class="comment">//      and 2.  Meet minimum tRAS requirement</span></span><br><span class="line">        <span class="comment">//       or 3.  Interrupt by a Read or Write (with or without AutoPrecharge)</span></span><br><span class="line">        <span class="keyword">if</span> ((Auto_precharge[<span class="number">0</span>] == <span class="number">1'b1</span>) &amp;&amp; (Read_precharge[<span class="number">0</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (((<span class="built_in">$time</span> - RAS_chk0 &gt;= tRAS) &amp;&amp;                                                      <span class="comment">// Case 2</span></span><br><span class="line">                ((Burst_length_1 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">0</span>] &gt;= <span class="number">1</span>) ||                             <span class="comment">// Case 1</span></span><br><span class="line">                 (Burst_length_2 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">0</span>] &gt;= <span class="number">2</span>) ||</span><br><span class="line">                 (Burst_length_4 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">0</span>] &gt;= <span class="number">4</span>) ||</span><br><span class="line">                 (Burst_length_8 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">0</span>] &gt;= <span class="number">8</span>))) ||</span><br><span class="line">                 (RW_interrupt_read[<span class="number">0</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span>                                              <span class="comment">// Case 3</span></span><br><span class="line">                    Pc_b0 = <span class="number">1'b1</span>;</span><br><span class="line">                    Act_b0 = <span class="number">1'b0</span>;</span><br><span class="line">                    RP_chk0 = <span class="built_in">$time</span>;</span><br><span class="line">                    Auto_precharge[<span class="number">0</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    Read_precharge[<span class="number">0</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    RW_interrupt_read[<span class="number">0</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t NOTE : Start Internal Auto Precharge for Bank 0"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> ((Auto_precharge[<span class="number">1</span>] == <span class="number">1'b1</span>) &amp;&amp; (Read_precharge[<span class="number">1</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (((<span class="built_in">$time</span> - RAS_chk1 &gt;= tRAS) &amp;&amp;</span><br><span class="line">                ((Burst_length_1 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">1</span>] &gt;= <span class="number">1</span>) || </span><br><span class="line">                 (Burst_length_2 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">1</span>] &gt;= <span class="number">2</span>) ||</span><br><span class="line">                 (Burst_length_4 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">1</span>] &gt;= <span class="number">4</span>) ||</span><br><span class="line">                 (Burst_length_8 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">1</span>] &gt;= <span class="number">8</span>))) ||</span><br><span class="line">                 (RW_interrupt_read[<span class="number">1</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">                    Pc_b1 = <span class="number">1'b1</span>;</span><br><span class="line">                    Act_b1 = <span class="number">1'b0</span>;</span><br><span class="line">                    RP_chk1 = <span class="built_in">$time</span>;</span><br><span class="line">                    Auto_precharge[<span class="number">1</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    Read_precharge[<span class="number">1</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    RW_interrupt_read[<span class="number">1</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t NOTE : Start Internal Auto Precharge for Bank 1"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> ((Auto_precharge[<span class="number">2</span>] == <span class="number">1'b1</span>) &amp;&amp; (Read_precharge[<span class="number">2</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (((<span class="built_in">$time</span> - RAS_chk2 &gt;= tRAS) &amp;&amp;</span><br><span class="line">                ((Burst_length_1 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">2</span>] &gt;= <span class="number">1</span>) || </span><br><span class="line">                 (Burst_length_2 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">2</span>] &gt;= <span class="number">2</span>) ||</span><br><span class="line">                 (Burst_length_4 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">2</span>] &gt;= <span class="number">4</span>) ||</span><br><span class="line">                 (Burst_length_8 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">2</span>] &gt;= <span class="number">8</span>))) ||</span><br><span class="line">                 (RW_interrupt_read[<span class="number">2</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">                    Pc_b2 = <span class="number">1'b1</span>;</span><br><span class="line">                    Act_b2 = <span class="number">1'b0</span>;</span><br><span class="line">                    RP_chk2 = <span class="built_in">$time</span>;</span><br><span class="line">                    Auto_precharge[<span class="number">2</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    Read_precharge[<span class="number">2</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    RW_interrupt_read[<span class="number">2</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t NOTE : Start Internal Auto Precharge for Bank 2"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> ((Auto_precharge[<span class="number">3</span>] == <span class="number">1'b1</span>) &amp;&amp; (Read_precharge[<span class="number">3</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (((<span class="built_in">$time</span> - RAS_chk3 &gt;= tRAS) &amp;&amp;</span><br><span class="line">                ((Burst_length_1 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">3</span>] &gt;= <span class="number">1</span>) || </span><br><span class="line">                 (Burst_length_2 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">3</span>] &gt;= <span class="number">2</span>) ||</span><br><span class="line">                 (Burst_length_4 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">3</span>] &gt;= <span class="number">4</span>) ||</span><br><span class="line">                 (Burst_length_8 == <span class="number">1'b1</span> &amp;&amp; Count_precharge[<span class="number">3</span>] &gt;= <span class="number">8</span>))) ||</span><br><span class="line">                 (RW_interrupt_read[<span class="number">3</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">                    Pc_b3 = <span class="number">1'b1</span>;</span><br><span class="line">                    Act_b3 = <span class="number">1'b0</span>;</span><br><span class="line">                    RP_chk3 = <span class="built_in">$time</span>;</span><br><span class="line">                    Auto_precharge[<span class="number">3</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    Read_precharge[<span class="number">3</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    RW_interrupt_read[<span class="number">3</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t NOTE : Start Internal Auto Precharge for Bank 3"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Internal Precharge or Bst</span></span><br><span class="line">        <span class="keyword">if</span> (Command[<span class="number">0</span>] == <span class="meta">`PRECH) begin                         // Precharge terminate a read with same bank or all banks</span></span><br><span class="line">            <span class="keyword">if</span> (Bank_precharge[<span class="number">0</span>] == Bank || A10_precharge[<span class="number">0</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Data_out_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                    Data_out_enable = <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Command[<span class="number">0</span>] == <span class="meta">`BST) begin                  // BST terminate a read to current bank</span></span><br><span class="line">            <span class="keyword">if</span> (Data_out_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                Data_out_enable = <span class="number">1'b0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Data_out_enable == <span class="number">1'b0</span>) <span class="keyword">begin</span></span><br><span class="line">            Dq_reg &lt;= #tOH &#123;data_bits&#123;<span class="number">1'bz</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Detect Read or Write command</span></span><br><span class="line">        <span class="keyword">if</span> (Command[<span class="number">0</span>] == <span class="meta">`READ || Command[0] == `READ_A) begin</span></span><br><span class="line">            Bank = Bank_addr[<span class="number">0</span>];</span><br><span class="line">            Col = Col_addr[<span class="number">0</span>];</span><br><span class="line">            Col_brst = Col_addr[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (Bank_addr[<span class="number">0</span>] == <span class="number">2'b00</span>) <span class="keyword">begin</span></span><br><span class="line">                Row = B0_row_addr;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Bank_addr[<span class="number">0</span>] == <span class="number">2'b01</span>) <span class="keyword">begin</span></span><br><span class="line">                Row = B1_row_addr;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Bank_addr[<span class="number">0</span>] == <span class="number">2'b10</span>) <span class="keyword">begin</span></span><br><span class="line">                Row = B2_row_addr;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Bank_addr[<span class="number">0</span>] == <span class="number">2'b11</span>) <span class="keyword">begin</span></span><br><span class="line">                Row = B3_row_addr;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            Burst_counter = <span class="number">0</span>;</span><br><span class="line">            Data_in_enable = <span class="number">1'b0</span>;</span><br><span class="line">            Data_out_enable = <span class="number">1'b1</span>;</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Command[<span class="number">0</span>] == <span class="meta">`WRITE || Command[0] == `WRITE_A) begin</span></span><br><span class="line">            Bank = Bank_addr[<span class="number">0</span>];</span><br><span class="line">            Col = Col_addr[<span class="number">0</span>];</span><br><span class="line">            Col_brst = Col_addr[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (Bank_addr[<span class="number">0</span>] == <span class="number">2'b00</span>) <span class="keyword">begin</span></span><br><span class="line">                Row = B0_row_addr;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Bank_addr[<span class="number">0</span>] == <span class="number">2'b01</span>) <span class="keyword">begin</span></span><br><span class="line">                Row = B1_row_addr;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Bank_addr[<span class="number">0</span>] == <span class="number">2'b10</span>) <span class="keyword">begin</span></span><br><span class="line">                Row = B2_row_addr;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Bank_addr[<span class="number">0</span>] == <span class="number">2'b11</span>) <span class="keyword">begin</span></span><br><span class="line">                Row = B3_row_addr;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            Burst_counter = <span class="number">0</span>;</span><br><span class="line">            Data_in_enable = <span class="number">1'b1</span>;</span><br><span class="line">            Data_out_enable = <span class="number">1'b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// DQ buffer (Driver/Receiver)</span></span><br><span class="line">        <span class="keyword">if</span> (Data_in_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span>                                   <span class="comment">// Writing Data to Memory</span></span><br><span class="line">            <span class="comment">// Array buffer</span></span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b00</span>) Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>] = Bank0 [&#123;Row, Col&#125;];</span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b01</span>) Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>] = Bank1 [&#123;Row, Col&#125;];</span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b10</span>) Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>] = Bank2 [&#123;Row, Col&#125;];</span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b11</span>) Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>] = Bank3 [&#123;Row, Col&#125;];</span><br><span class="line">            <span class="comment">// Dqm operation</span></span><br><span class="line">            <span class="keyword">if</span> (Dqm[<span class="number">0</span>] == <span class="number">1'b0</span>) Dq_dqm [ <span class="number">7</span> : <span class="number">0</span>] = Dq [ <span class="number">7</span> : <span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (Dqm[<span class="number">1</span>] == <span class="number">1'b0</span>) Dq_dqm [<span class="number">15</span> : <span class="number">8</span>] = Dq [<span class="number">15</span> : <span class="number">8</span>];</span><br><span class="line">            <span class="comment">//if (Dqm[2] == 1'b0) Dq_dqm [23 : 16] = Dq [23 : 16];</span></span><br><span class="line">           <span class="comment">// if (Dqm[3] == 1'b0) Dq_dqm [31 : 24] = Dq [31 : 24];</span></span><br><span class="line">            <span class="comment">// Write to memory</span></span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b00</span>) Bank0 [&#123;Row, Col&#125;] = Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b01</span>) Bank1 [&#123;Row, Col&#125;] = Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b10</span>) Bank2 [&#123;Row, Col&#125;] = Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b11</span>) Bank3 [&#123;Row, Col&#125;] = Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b11</span> &amp;&amp; Row==<span class="number">10'h3</span> &amp;&amp; Col[<span class="number">7</span>:<span class="number">4</span>]==<span class="number">4'h4</span>)</span><br><span class="line">                <span class="built_in">$display</span>(<span class="string">"at time %t WRITE: Bank = %d Row = %d, Col = %d, Data = Hi-Z due to DQM"</span>, <span class="built_in">$time</span>, Bank, Row, Col);</span><br><span class="line">            <span class="comment">//$fdisplay(test_file,"bank:%h    row:%h    col:%h    write:%h",Bank,Row,Col,Dq_dqm);</span></span><br><span class="line">            <span class="comment">// Output result</span></span><br><span class="line">            <span class="keyword">if</span> (Dqm == <span class="number">4'b1111</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span>(<span class="string">"at time %t WRITE: Bank = %d Row = %d, Col = %d, Data = Hi-Z due to DQM"</span>, <span class="built_in">$time</span>, Bank, Row, Col);</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span>(<span class="string">"at time %t WRITE: Bank = %d Row = %d, Col = %d, Data = %d, Dqm = %b"</span>, <span class="built_in">$time</span>, Bank, Row, Col, Dq_dqm, Dqm);</span><br><span class="line">                <span class="comment">// Record tWR time and reset counter</span></span><br><span class="line">                WR_chk [Bank] = <span class="built_in">$time</span>;</span><br><span class="line">                WR_counter [Bank] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Advance burst counter subroutine</span></span><br><span class="line">            #tHZ Burst;</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Data_out_enable == <span class="number">1'b1</span>) <span class="keyword">begin</span>                         <span class="comment">// Reading Data from Memory</span></span><br><span class="line">            <span class="comment">//$display("%h    ,    %h,    %h",Bank0,Row,Col);</span></span><br><span class="line">            <span class="comment">// Array buffer</span></span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b00</span>) Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>] = Bank0 [&#123;Row, Col&#125;];</span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b01</span>) Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>] = Bank1 [&#123;Row, Col&#125;];</span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b10</span>) Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>] = Bank2 [&#123;Row, Col&#125;];</span><br><span class="line">            <span class="keyword">if</span> (Bank == <span class="number">2'b11</span>) Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>] = Bank3 [&#123;Row, Col&#125;];</span><br><span class="line">                </span><br><span class="line">            <span class="comment">// Dqm operation</span></span><br><span class="line">            <span class="keyword">if</span> (Dqm_reg0[<span class="number">0</span>] == <span class="number">1'b1</span>) Dq_dqm [ <span class="number">7</span> : <span class="number">0</span>] = <span class="number">8'bz</span>;</span><br><span class="line">            <span class="keyword">if</span> (Dqm_reg0[<span class="number">1</span>] == <span class="number">1'b1</span>) Dq_dqm [<span class="number">15</span> : <span class="number">8</span>] = <span class="number">8'bz</span>;</span><br><span class="line">            <span class="keyword">if</span> (Dqm_reg0[<span class="number">2</span>] == <span class="number">1'b1</span>) Dq_dqm [<span class="number">23</span> : <span class="number">16</span>] = <span class="number">8'bz</span>;</span><br><span class="line">            <span class="keyword">if</span> (Dqm_reg0[<span class="number">3</span>] == <span class="number">1'b1</span>) Dq_dqm [<span class="number">31</span> : <span class="number">24</span>] = <span class="number">8'bz</span>;</span><br><span class="line">            <span class="comment">// Display result</span></span><br><span class="line">            Dq_reg [data_bits - <span class="number">1</span>  : <span class="number">0</span>] = #tAC Dq_dqm [data_bits - <span class="number">1</span>  : <span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (Dqm_reg0 == <span class="number">4'b1111</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span>(<span class="string">"at time %t READ : Bank = %d Row = %d, Col = %d, Data = Hi-Z due to DQM"</span>, <span class="built_in">$time</span>, Bank, Row, Col);</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Debug) <span class="built_in">$display</span>(<span class="string">"at time %t READ : Bank = %d Row = %d, Col = %d, Data = %d, Dqm = %b"</span>, <span class="built_in">$time</span>, Bank, Row, Col, Dq_reg, Dqm_reg0);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">// Advance burst counter subroutine</span></span><br><span class="line">            Burst;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Write with Auto Precharge Calculation</span></span><br><span class="line">    <span class="comment">//      The device start internal precharge:</span></span><br><span class="line">    <span class="comment">//          1.  tWR Clock after last burst</span></span><br><span class="line">    <span class="comment">//      and 2.  Meet minimum tRAS requirement</span></span><br><span class="line">    <span class="comment">//       or 3.  Interrupt by a Read or Write (with or without AutoPrecharge)</span></span><br><span class="line">    <span class="keyword">always</span> @ (WR_counter[<span class="number">0</span>]) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> ((Auto_precharge[<span class="number">0</span>] == <span class="number">1'b1</span>) &amp;&amp; (Write_precharge[<span class="number">0</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (((<span class="built_in">$time</span> - RAS_chk0 &gt;= tRAS) &amp;&amp;                                                          <span class="comment">// Case 2</span></span><br><span class="line">               (((Burst_length_1 == <span class="number">1'b1</span> || Write_burst_mode == <span class="number">1'b1</span>) &amp;&amp; Count_precharge [<span class="number">0</span>] &gt;= <span class="number">1</span>) ||   <span class="comment">// Case 1</span></span><br><span class="line">                 (Burst_length_2 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">0</span>] &gt;= <span class="number">2</span>) ||</span><br><span class="line">                 (Burst_length_4 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">0</span>] &gt;= <span class="number">4</span>) ||</span><br><span class="line">                 (Burst_length_8 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">0</span>] &gt;= <span class="number">8</span>))) ||</span><br><span class="line">                 (RW_interrupt_write[<span class="number">0</span>] == <span class="number">1'b1</span> &amp;&amp; WR_counter[<span class="number">0</span>] &gt;= <span class="number">2</span>)) <span class="keyword">begin</span>                           <span class="comment">// Case 3 (stop count when interrupt)</span></span><br><span class="line">                    Auto_precharge[<span class="number">0</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    Write_precharge[<span class="number">0</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    RW_interrupt_write[<span class="number">0</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    #tWRa;                          <span class="comment">// Wait for tWR</span></span><br><span class="line">                    Pc_b0 = <span class="number">1'b1</span>;</span><br><span class="line">                    Act_b0 = <span class="number">1'b0</span>;</span><br><span class="line">                    RP_chk0 = <span class="built_in">$time</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t NOTE : Start Internal Auto Precharge for Bank 0"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">always</span> @ (WR_counter[<span class="number">1</span>]) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> ((Auto_precharge[<span class="number">1</span>] == <span class="number">1'b1</span>) &amp;&amp; (Write_precharge[<span class="number">1</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (((<span class="built_in">$time</span> - RAS_chk1 &gt;= tRAS) &amp;&amp;</span><br><span class="line">               (((Burst_length_1 == <span class="number">1'b1</span> || Write_burst_mode == <span class="number">1'b1</span>) &amp;&amp; Count_precharge [<span class="number">1</span>] &gt;= <span class="number">1</span>) || </span><br><span class="line">                 (Burst_length_2 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">1</span>] &gt;= <span class="number">2</span>) ||</span><br><span class="line">                 (Burst_length_4 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">1</span>] &gt;= <span class="number">4</span>) ||</span><br><span class="line">                 (Burst_length_8 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">1</span>] &gt;= <span class="number">8</span>))) ||</span><br><span class="line">                 (RW_interrupt_write[<span class="number">1</span>] == <span class="number">1'b1</span> &amp;&amp; WR_counter[<span class="number">1</span>] &gt;= <span class="number">2</span>)) <span class="keyword">begin</span></span><br><span class="line">                    Auto_precharge[<span class="number">1</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    Write_precharge[<span class="number">1</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    RW_interrupt_write[<span class="number">1</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    #tWRa;                          <span class="comment">// Wait for tWR</span></span><br><span class="line">                    Pc_b1 = <span class="number">1'b1</span>;</span><br><span class="line">                    Act_b1 = <span class="number">1'b0</span>;</span><br><span class="line">                    RP_chk1 = <span class="built_in">$time</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t NOTE : Start Internal Auto Precharge for Bank 1"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">always</span> @ (WR_counter[<span class="number">2</span>]) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> ((Auto_precharge[<span class="number">2</span>] == <span class="number">1'b1</span>) &amp;&amp; (Write_precharge[<span class="number">2</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (((<span class="built_in">$time</span> - RAS_chk2 &gt;= tRAS) &amp;&amp;</span><br><span class="line">               (((Burst_length_1 == <span class="number">1'b1</span> || Write_burst_mode == <span class="number">1'b1</span>) &amp;&amp; Count_precharge [<span class="number">2</span>] &gt;= <span class="number">1</span>) || </span><br><span class="line">                 (Burst_length_2 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">2</span>] &gt;= <span class="number">2</span>) ||</span><br><span class="line">                 (Burst_length_4 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">2</span>] &gt;= <span class="number">4</span>) ||</span><br><span class="line">                 (Burst_length_8 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">2</span>] &gt;= <span class="number">8</span>))) ||</span><br><span class="line">                 (RW_interrupt_write[<span class="number">2</span>] == <span class="number">1'b1</span> &amp;&amp; WR_counter[<span class="number">2</span>] &gt;= <span class="number">2</span>)) <span class="keyword">begin</span></span><br><span class="line">                    Auto_precharge[<span class="number">2</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    Write_precharge[<span class="number">2</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    RW_interrupt_write[<span class="number">2</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    #tWRa;                          <span class="comment">// Wait for tWR</span></span><br><span class="line">                    Pc_b2 = <span class="number">1'b1</span>;</span><br><span class="line">                    Act_b2 = <span class="number">1'b0</span>;</span><br><span class="line">                    RP_chk2 = <span class="built_in">$time</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t NOTE : Start Internal Auto Precharge for Bank 2"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">always</span> @ (WR_counter[<span class="number">3</span>]) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> ((Auto_precharge[<span class="number">3</span>] == <span class="number">1'b1</span>) &amp;&amp; (Write_precharge[<span class="number">3</span>] == <span class="number">1'b1</span>)) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (((<span class="built_in">$time</span> - RAS_chk3 &gt;= tRAS) &amp;&amp;</span><br><span class="line">               (((Burst_length_1 == <span class="number">1'b1</span> || Write_burst_mode == <span class="number">1'b1</span>) &amp;&amp; Count_precharge [<span class="number">3</span>] &gt;= <span class="number">1</span>) || </span><br><span class="line">                 (Burst_length_2 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">3</span>] &gt;= <span class="number">2</span>) ||</span><br><span class="line">                 (Burst_length_4 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">3</span>] &gt;= <span class="number">4</span>) ||</span><br><span class="line">                 (Burst_length_8 == <span class="number">1'b1</span> &amp;&amp; Count_precharge [<span class="number">3</span>] &gt;= <span class="number">8</span>))) ||</span><br><span class="line">                 (RW_interrupt_write[<span class="number">3</span>] == <span class="number">1'b1</span> &amp;&amp; WR_counter[<span class="number">3</span>] &gt;= <span class="number">2</span>)) <span class="keyword">begin</span></span><br><span class="line">                    Auto_precharge[<span class="number">3</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    Write_precharge[<span class="number">3</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    RW_interrupt_write[<span class="number">3</span>] = <span class="number">1'b0</span>;</span><br><span class="line">                    #tWRa;                          <span class="comment">// Wait for tWR</span></span><br><span class="line">                    Pc_b3 = <span class="number">1'b1</span>;</span><br><span class="line">                    Act_b3 = <span class="number">1'b0</span>;</span><br><span class="line">                    RP_chk3 = <span class="built_in">$time</span>;</span><br><span class="line">                    <span class="keyword">if</span> (Debug) <span class="built_in">$display</span> (<span class="string">"at time %t NOTE : Start Internal Auto Precharge for Bank 3"</span>, <span class="built_in">$time</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">task</span> Burst;</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">// Advance Burst Counter</span></span><br><span class="line">            Burst_counter = Burst_counter + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Burst Type</span></span><br><span class="line">            <span class="keyword">if</span> (Mode_reg[<span class="number">3</span>] == <span class="number">1'b0</span>) <span class="keyword">begin</span>                                  <span class="comment">// Sequential Burst</span></span><br><span class="line">                Col_temp = Col + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Mode_reg[<span class="number">3</span>] == <span class="number">1'b1</span>) <span class="keyword">begin</span>                         <span class="comment">// Interleaved Burst</span></span><br><span class="line">                Col_temp[<span class="number">2</span>] =  Burst_counter[<span class="number">2</span>] ^  Col_brst[<span class="number">2</span>];</span><br><span class="line">                Col_temp[<span class="number">1</span>] =  Burst_counter[<span class="number">1</span>] ^  Col_brst[<span class="number">1</span>];</span><br><span class="line">                Col_temp[<span class="number">0</span>] =  Burst_counter[<span class="number">0</span>] ^  Col_brst[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Burst Length</span></span><br><span class="line">            <span class="keyword">if</span> (Burst_length_2) <span class="keyword">begin</span>                                       <span class="comment">// Burst Length = 2</span></span><br><span class="line">                Col [<span class="number">0</span>] = Col_temp [<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Burst_length_4) <span class="keyword">begin</span>                              <span class="comment">// Burst Length = 4</span></span><br><span class="line">                Col [<span class="number">1</span> : <span class="number">0</span>] = Col_temp [<span class="number">1</span> : <span class="number">0</span>];</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Burst_length_8) <span class="keyword">begin</span>                              <span class="comment">// Burst Length = 8</span></span><br><span class="line">                Col [<span class="number">2</span> : <span class="number">0</span>] = Col_temp [<span class="number">2</span> : <span class="number">0</span>];</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span>                                                  <span class="comment">// Burst Length = FULL</span></span><br><span class="line">                Col = Col_temp;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Burst Read Single Write            </span></span><br><span class="line">            <span class="keyword">if</span> (Write_burst_mode == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                Data_in_enable = <span class="number">1'b0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Data Counter</span></span><br><span class="line">            <span class="keyword">if</span> (Burst_length_1 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Burst_counter &gt;= <span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">                    Data_in_enable = <span class="number">1'b0</span>;</span><br><span class="line">                    Data_out_enable = <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Burst_length_2 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Burst_counter &gt;= <span class="number">2</span>) <span class="keyword">begin</span></span><br><span class="line">                    Data_in_enable = <span class="number">1'b0</span>;</span><br><span class="line">                    Data_out_enable = <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Burst_length_4 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Burst_counter &gt;= <span class="number">4</span>) <span class="keyword">begin</span></span><br><span class="line">                    Data_in_enable = <span class="number">1'b0</span>;</span><br><span class="line">                    Data_out_enable = <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (Burst_length_8 == <span class="number">1'b1</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (Burst_counter &gt;= <span class="number">8</span>) <span class="keyword">begin</span></span><br><span class="line">                    Data_in_enable = <span class="number">1'b0</span>;</span><br><span class="line">                    Data_out_enable = <span class="number">1'b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">endtask</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//**********************将SDRAM内的数据直接输出到外部文件*******************************//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*    </span></span><br><span class="line"><span class="comment">   integer    sdram_data,ind;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    always@(sdram_r)</span></span><br><span class="line"><span class="comment">    begin</span></span><br><span class="line"><span class="comment">           sdram_data=$fopen("sdram_data.txt");</span></span><br><span class="line"><span class="comment">           $display("Sdram dampout begin ",sdram_data);</span></span><br><span class="line"><span class="comment">//           $fdisplay(sdram_data,"Bank0：");</span></span><br><span class="line"><span class="comment">           for(ind=0;ind&lt;=mem_sizes;ind=ind+1)</span></span><br><span class="line"><span class="comment">                    $fdisplay(sdram_data,"%h    %b",ind,Bank0[ind]);</span></span><br><span class="line"><span class="comment">//           $fdisplay(sdram_data,"Bank1：");</span></span><br><span class="line"><span class="comment">           for(ind=0;ind&lt;=mem_sizes;ind=ind+1)</span></span><br><span class="line"><span class="comment">                    $fdisplay(sdram_data,"%h    %b",ind,Bank1[ind]);</span></span><br><span class="line"><span class="comment">//           $fdisplay(sdram_data,"Bank2：");</span></span><br><span class="line"><span class="comment">           for(ind=0;ind&lt;=mem_sizes;ind=ind+1)</span></span><br><span class="line"><span class="comment">                    $fdisplay(sdram_data,"%h    %b",ind,Bank2[ind]);</span></span><br><span class="line"><span class="comment">//               $fdisplay(sdram_data,"Bank3：");</span></span><br><span class="line"><span class="comment">           for(ind=0;ind&lt;=mem_sizes;ind=ind+1)</span></span><br><span class="line"><span class="comment">                    $fdisplay(sdram_data,"%h    %b",ind,Bank3[ind]);</span></span><br><span class="line"><span class="comment">                                      </span></span><br><span class="line"><span class="comment">          $fclose("sdram_data.txt");        </span></span><br><span class="line"><span class="comment">      //-&gt;compare;</span></span><br><span class="line"><span class="comment">      end        </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">integer</span>    sdram_data,sdram_mem;</span><br><span class="line">    <span class="keyword">reg</span>    [<span class="number">24</span>:<span class="number">0</span>]    aa,cc;</span><br><span class="line">    <span class="keyword">reg</span>    [<span class="number">24</span>:<span class="number">0</span>]    bb,ee;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always</span>@(sdram_r)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">           <span class="built_in">$display</span>(<span class="string">"Sdram dampout begin "</span>,<span class="built_in">$realtime</span>);</span><br><span class="line">           sdram_data=<span class="built_in">$fopen</span>(<span class="string">"sdram_data.txt"</span>);</span><br><span class="line">           <span class="keyword">for</span>(aa=<span class="number">0</span>;aa&lt;<span class="number">4</span>*(mem_sizes+<span class="number">1</span>);aa=aa+<span class="number">1</span>)</span><br><span class="line">               <span class="keyword">begin</span></span><br><span class="line">               bb=aa[<span class="number">18</span>:<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(aa&lt;=mem_sizes)</span><br><span class="line">                <span class="built_in">$fdisplay</span>(sdram_data,<span class="string">"%0d    %0h"</span>,aa,Bank0[bb]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(aa&lt;=<span class="number">2</span>*mem_sizes+<span class="number">1</span>)</span><br><span class="line">                        <span class="built_in">$fdisplay</span>(sdram_data,<span class="string">"%0d    %0h"</span>,aa,Bank1[bb]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(aa&lt;=<span class="number">3</span>*mem_sizes+<span class="number">2</span>)</span><br><span class="line">                <span class="built_in">$fdisplay</span>(sdram_data,<span class="string">"%0d    %0h"</span>,aa,Bank2[bb]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">$fdisplay</span>(sdram_data,<span class="string">"%0d    %0h"</span>,aa,Bank3[bb]);</span><br><span class="line">              <span class="keyword">end</span>                        </span><br><span class="line">          <span class="built_in">$fclose</span>(<span class="string">"sdram_data.txt"</span>); </span><br><span class="line">          </span><br><span class="line">          sdram_mem=<span class="built_in">$fopen</span>(<span class="string">"sdram_mem.txt"</span>);</span><br><span class="line">          <span class="keyword">for</span>(cc=<span class="number">0</span>;cc&lt;<span class="number">4</span>*(mem_sizes+<span class="number">1</span>);cc=cc+<span class="number">1</span>)</span><br><span class="line">              <span class="keyword">begin</span></span><br><span class="line">               ee=cc[<span class="number">18</span>:<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(cc&lt;=mem_sizes)</span><br><span class="line">                <span class="built_in">$fdisplay</span>(sdram_mem,<span class="string">"%0h"</span>,Bank0[ee]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cc&lt;=<span class="number">2</span>*mem_sizes+<span class="number">1</span>)</span><br><span class="line">                        <span class="built_in">$fdisplay</span>(sdram_mem,<span class="string">"%0h"</span>,Bank1[ee]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cc&lt;=<span class="number">3</span>*mem_sizes+<span class="number">2</span>)</span><br><span class="line">                <span class="built_in">$fdisplay</span>(sdram_mem,<span class="string">"%0h"</span>,Bank2[ee]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">$fdisplay</span>(sdram_mem,<span class="string">"%0h"</span>,Bank3[ee]);</span><br><span class="line">              <span class="keyword">end</span>                        </span><br><span class="line">          <span class="built_in">$fclose</span>(<span class="string">"sdram_mem.txt"</span>);        </span><br><span class="line">     </span><br><span class="line">      <span class="keyword">end</span>        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    // Timing Parameters for -75 (PC133) and CAS Latency = 2</span></span><br><span class="line"><span class="comment">//    specify</span></span><br><span class="line"><span class="comment">//        specparam</span></span><br><span class="line"><span class="comment">////                    tAH  =  0.8,                                        // Addr, Ba Hold Time</span></span><br><span class="line"><span class="comment">////                    tAS  =  1.5,                                        // Addr, Ba Setup Time</span></span><br><span class="line"><span class="comment">////                    tCH  =  2.5,                                        // Clock High-Level Width</span></span><br><span class="line"><span class="comment">////                    tCL  =  2.5,                                        // Clock Low-Level Width</span></span><br><span class="line"><span class="comment">//////                    tCK  = 10.0,                                       // Clock Cycle Time  100mhz</span></span><br><span class="line"><span class="comment">//////                    tCK  = 7.5,                        // Clock Cycle Time  133mhz</span></span><br><span class="line"><span class="comment">////                    tCK  =  7,                                // Clock Cycle Time  143mhz</span></span><br><span class="line"><span class="comment">////                    tDH  =  0.8,                                        // Data-in Hold Time</span></span><br><span class="line"><span class="comment">////                    tDS  =  1.5,                                        // Data-in Setup Time</span></span><br><span class="line"><span class="comment">////                    tCKH =  0.8,                                        // CKE Hold  Time</span></span><br><span class="line"><span class="comment">////                    tCKS =  1.5,                                        // CKE Setup Time</span></span><br><span class="line"><span class="comment">////                    tCMH =  0.8,                                        // CS#, RAS#, CAS#, WE#, DQM# Hold  Time</span></span><br><span class="line"><span class="comment">////                    tCMS =  1.5;                                        // CS#, RAS#, CAS#, WE#, DQM# Setup Time</span></span><br><span class="line"><span class="comment">//                    tAH  =  1,                                        // Addr, Ba Hold Time</span></span><br><span class="line"><span class="comment">//                    tAS  =  1.5,                                        // Addr, Ba Setup Time</span></span><br><span class="line"><span class="comment">//                    tCH  =  1,                                        // Clock High-Level Width</span></span><br><span class="line"><span class="comment">//                    tCL  =  3,                                        // Clock Low-Level Width</span></span><br><span class="line"><span class="comment">////                    tCK  = 10.0,                                       // Clock Cycle Time  100mhz</span></span><br><span class="line"><span class="comment">////                    tCK  = 7.5,                        // Clock Cycle Time  133mhz</span></span><br><span class="line"><span class="comment">//                    tCK  =  7,                                // Clock Cycle Time  143mhz</span></span><br><span class="line"><span class="comment">//                    tDH  =  1,                                        // Data-in Hold Time</span></span><br><span class="line"><span class="comment">//                    tDS  =  2,                                        // Data-in Setup Time</span></span><br><span class="line"><span class="comment">//                    tCKH =  1,                                        // CKE Hold  Time</span></span><br><span class="line"><span class="comment">//                    tCKS =  2,                                        // CKE Setup Time</span></span><br><span class="line"><span class="comment">//                    tCMH =  0.8,                                        // CS#, RAS#, CAS#, WE#, DQM# Hold  Time</span></span><br><span class="line"><span class="comment">//                    tCMS =  1.5;                                        // CS#, RAS#, CAS#, WE#, DQM# Setup Time</span></span><br><span class="line"><span class="comment">//        $width    (posedge Clk,           tCH);</span></span><br><span class="line"><span class="comment">//        $width    (negedge Clk,           tCL);</span></span><br><span class="line"><span class="comment">//        $period   (negedge Clk,           tCK);</span></span><br><span class="line"><span class="comment">//        $period   (posedge Clk,           tCK);</span></span><br><span class="line"><span class="comment">//        $setuphold(posedge Clk,    Cke,   tCKS, tCKH);</span></span><br><span class="line"><span class="comment">//        $setuphold(posedge Clk,    Cs_n,  tCMS, tCMH);</span></span><br><span class="line"><span class="comment">//        $setuphold(posedge Clk,    Cas_n, tCMS, tCMH);</span></span><br><span class="line"><span class="comment">//        $setuphold(posedge Clk,    Ras_n, tCMS, tCMH);</span></span><br><span class="line"><span class="comment">//        $setuphold(posedge Clk,    We_n,  tCMS, tCMH);</span></span><br><span class="line"><span class="comment">//        $setuphold(posedge Clk,    Addr,  tAS,  tAH);</span></span><br><span class="line"><span class="comment">//        $setuphold(posedge Clk,    Ba,    tAS,  tAH);</span></span><br><span class="line"><span class="comment">//        $setuphold(posedge Clk,    Dqm,   tCMS, tCMH);</span></span><br><span class="line"><span class="comment">//        $setuphold(posedge Dq_chk, Dq,    tDS,  tDH);</span></span><br><span class="line"><span class="comment">//    endspecify</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div></div><br></font></p><h3 id="仿真结果"><a href="#仿真结果" class="headerlink" title="仿真结果"></a>仿真结果</h3><p>我们可以看到基于 sdram_model.v 运行了 201us 个周期后，modelsim 上打印信息显示我们初始化的操作是正确的。<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/sdram%E4%BB%BF%E7%9C%9F%E6%95%B0%E6%8D%AE.jpg" alt=""></p><p>仿真波形如图所示：<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/sdram/sdram%E4%BB%BF%E7%9C%9F%E6%B3%A2%E5%BD%A2.jpg" alt=""></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>我们依芯片手册成功实现了 sdram 的上电初始化，接下来我们将继续进行后续的操作，我们将尽快更新~</p><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><p>SDRAM 仿真模型文件：<a href="https://pan.baidu.com/s/1hIPdYfLONydeHYugL0hKig" target="_blank" rel="noopener">点击下载，提取码:yihx</a></p><p><strong>By Ricky</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上次挖的坑现在来填，在我们把 SDRAM 控制器接进 AHB 总线之前，我们先来设计一个 SDRAM 控制器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/hexo_img.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/categories/IC-Design/"/>
    
      <category term="SDRAM" scheme="https://blog.strongwong.top/categories/IC-Design/SDRAM/"/>
    
    
      <category term="IC Design" scheme="https://blog.strongwong.top/tags/IC-Design/"/>
    
      <category term="SDRAM" scheme="https://blog.strongwong.top/tags/SDRAM/"/>
    
  </entry>
  
  <entry>
    <title>从计数器开始，看数字 IC 设计</title>
    <link href="https://blog.strongwong.top//posts/%E4%BB%8E%E8%AE%A1%E6%95%B0%E5%99%A8%E5%BC%80%E5%A7%8B%EF%BC%8C%E7%9C%8B%E6%95%B0%E5%AD%97-IC-%E8%AE%BE%E8%AE%A1.html"/>
    <id>https://blog.strongwong.top//posts/从计数器开始，看数字-IC-设计.html</id>
    <published>2018-11-24T02:41:29.000Z</published>
    <updated>2019-11-21T14:06:56.819Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计数器设计"><a href="#计数器设计" class="headerlink" title="计数器设计"></a>计数器设计</h2><p>之前有实验室的学长去参加海思、中芯国际、瑞芯微、…… 数字 IC 前端方向的面试，几乎都问到了同一系列问题——设计一个计数器及相关问题。这里很多朋友就会觉得很有意思了，为什么一个简单的计数器能有这么多东西，那我们就『简单』的东西简单看。</p><a id="more"></a><h2 id="0x00-请你设计一个-10-进制的异步复位无限循环计数器（0-9）"><a href="#0x00-请你设计一个-10-进制的异步复位无限循环计数器（0-9）" class="headerlink" title="0x00 请你设计一个 10 进制的异步复位无限循环计数器（0-9）"></a>0x00 请你设计一个 10 进制的异步复位无限循环计数器（0-9）</h2><p>首先，第一个问题，<strong>请你设计一个 10 进制的异步复位无限循环计数器（0-9）</strong>，你会怎么做？</p><p>相信到这很多朋友就开始洋洋洒洒地写道：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> counter10(</span><br><span class="line">                <span class="keyword">input</span> clk,</span><br><span class="line">                <span class="keyword">input</span> rst_n,</span><br><span class="line">                <span class="keyword">output</span> <span class="keyword">wire</span> cnt_flag</span><br><span class="line">                );</span><br><span class="line"><span class="keyword">reg</span>[<span class="number">3</span>:<span class="number">0</span>] cnt_reg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>( ~rst_n) <span class="keyword">begin</span></span><br><span class="line">        cnt_reg &lt;= <span class="number">4'b0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(cnt_reg == <span class="number">4'd9</span>)</span><br><span class="line">            cnt_reg &lt;= <span class="number">4'b0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cnt_reg &lt;= cnt_reg + <span class="number">4'b1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> cnt_flag = (cnt_reg == <span class="number">4'd9</span>) ? <span class="number">1'b1</span> : <span class="number">1'b0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="0x01-请画出对应的电路图"><a href="#0x01-请画出对应的电路图" class="headerlink" title="0x01 请画出对应的电路图"></a>0x01 请画出对应的电路图</h2><p>Bravo! 没有任何问题！接下来开始有分水岭了，<strong>请画出对应的电路图</strong> ，有的朋友可能会抓脑袋了：</p><p>这里给一点提示，看你能想起什么，确定状态 —— 确定激励方程 —— 逻辑图 —— 自启动检查 —— 状态表。这是什么？数字电路基础，为什么？我们这是数字集成电路设计啊！最终还是要回归到数字电路上来啊！</p><p>好，那我们先用 D 触发器来做（不经过编码优化，只是还原最简单的设计步骤），回忆一下最初我们大一大二时怎么弄的。</p><h3 id="状态表："><a href="#状态表：" class="headerlink" title="状态表："></a>状态表：</h3><table><thead><tr><th align="center">计数顺序</th><th align="center">现状态</th><th align="center">次状态</th></tr></thead><tbody><tr><td align="center">-</td><td align="center">Q3 Q2 Q1 Q0</td><td align="center">D3 D2 D1 D0</td></tr><tr><td align="center">0</td><td align="center">0 0 0 0</td><td align="center">0 0 0 1</td></tr><tr><td align="center">1</td><td align="center">0 0 0 1</td><td align="center">0 0 1 0</td></tr><tr><td align="center">2</td><td align="center">0 0 1 0</td><td align="center">0 0 1 1</td></tr><tr><td align="center">3</td><td align="center">0 0 1 1</td><td align="center">0 1 0 0</td></tr><tr><td align="center">4</td><td align="center">0 1 0 0</td><td align="center">0 1 0 1</td></tr><tr><td align="center">5</td><td align="center">0 1 0 1</td><td align="center">0 1 1 0</td></tr><tr><td align="center">6</td><td align="center">0 1 1 0</td><td align="center">0 1 1 1</td></tr><tr><td align="center">7</td><td align="center">0 1 1 1</td><td align="center">1 0 0 0</td></tr><tr><td align="center">8</td><td align="center">1 0 0 0</td><td align="center">1 0 0 1</td></tr><tr><td align="center">9</td><td align="center">1 0 0 1</td><td align="center">0 0 0 0</td></tr></tbody></table><h3 id="激励方程："><a href="#激励方程：" class="headerlink" title="激励方程："></a>激励方程：</h3><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E5%8D%A1%E8%AF%BA%E5%9B%BE.png" alt=""></p><h3 id="逻辑图："><a href="#逻辑图：" class="headerlink" title="逻辑图："></a>逻辑图：</h3><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E5%8D%81%E8%BF%9B%E5%88%B6D%E8%A7%A6%E5%8F%91%E5%99%A8.png" alt=""></p><p>…… 剩下的估计大家都能回忆起来了</p><p>以上就是我们之前数字电路设计流程，我们回过头来看我们的硬件描述过程，有 if 判断值，那少不了比较器，有 <code>+</code> 运算，自然也有一个加法器 …… 当然我们真正的设计应该是先想好了有比较器和其他逻辑电路才有对应的硬件描述，但我们不妨来看一下我们设计的电路，不正是如下图所示：<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/%E5%8D%81%E8%BF%9B%E5%88%B6.png" alt=""></p><h2 id="0x02-上图中的关键路径是哪一条？"><a href="#0x02-上图中的关键路径是哪一条？" class="headerlink" title="0x02 上图中的关键路径是哪一条？"></a>0x02 上图中的关键路径是哪一条？</h2><p>Ok~ 解决了电路图，下一个问题又来了，<strong>上图中的关键路径是哪一条？</strong></p><p>要知道关键路径就需要时序分析啦，这里为接下来的另一个数字 IC 的小专栏———时序分析与约束挖下第一坑。</p><p>关键路径应该是：Q &gt; + &gt; MUX &gt; D (具体分析将在后面填坑，大家也可以先想想为什么不是 Q &gt; CMP &gt; MUX &gt; D)</p><h2 id="0x03-上面图中-CMP-9-即原描述中-cnt-reg-4’d9-的电路是什么？"><a href="#0x03-上面图中-CMP-9-即原描述中-cnt-reg-4’d9-的电路是什么？" class="headerlink" title="0x03 上面图中 CMP = 9 即原描述中 cnt_reg == 4’d9 的电路是什么？"></a>0x03 上面图中 CMP = 9 即原描述中 cnt_reg == 4’d9 的电路是什么？</h2><p>接下来的问题，<strong>上面图中 CMP = 9 即原描述中 cnt_reg == 4’d9 的电路是什么？</strong><br>其实答案就在我们的触发器版原理图对应的组合电路中，精简后如下图所示：<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/CMP.png" alt=""></p><h2 id="0x04-cnt-reg-4’d9-和-cnt-reg-gt-8-有什么区别？"><a href="#0x04-cnt-reg-4’d9-和-cnt-reg-gt-8-有什么区别？" class="headerlink" title="0x04 cnt_reg == 4’d9 和 cnt_reg &gt; 8 有什么区别？"></a>0x04 cnt_reg == 4’d9 和 cnt_reg &gt; 8 有什么区别？</h2><p>功能上确实是一样的，但是如果是一个把 Verilog 当编程玩的朋友对于接下来的东就蛮有意义的了，cnt_reg == 4’d9 实现的电路如上图所示，是一个相对简单的组合逻辑电路。如果是 cnt_reg &gt; 8，对于我们 4 位数据来说可能的范围为 9~15，则综合工具会把所有的情况都列出，cnt_reg == 9,10,11 …… 这样在无形中就浪费了资源。若位宽更大则会被综合为cnt_reg - 8 &gt; 0，由此便会引入一个加法器 ……</p><h2 id="0x05-加法器对应的电路是什么？如何验证这个计数器？……"><a href="#0x05-加法器对应的电路是什么？如何验证这个计数器？……" class="headerlink" title="0x05 加法器对应的电路是什么？如何验证这个计数器？……"></a>0x05 加法器对应的电路是什么？如何验证这个计数器？……</h2><p>一系列的问题，我们可以发现并非那么简单的。要知道直到现在优化加法器的文章依然不时可以出现在 sci 检索期刊中，这另外说明为什么上一问引入加法器后带来的浪费用省略号来表示，为什么关键路径是到 + 而不是比较器 ……</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>引用《手把手教你设计 CPU——RISC-V 处理器篇》作者胡振波老师的一段话，当年第一次 Verilog 课时我的授课老师董乾博士也强调过类似的话。</p><blockquote><p>先定义电路微架构而后编写代码。<br>谨记 Verilog 只是一种硬件描述语言，IC 设计的本质是对于电路的设计，虽然现在Verilog Coding 采用 RTL 级别的抽象描述，但是必须清楚所描述的代码能够映射出的电路结构，其面积和时序的影响都了然于胸，只有如此才能够成为一名优秀的 IC 设计工程师。<br>不要纠结 Verilog 的语法，而应立足实战。<br>Verilog 的设计语法子集非常精简简单，很快就可以上手入门。入门之后最好的学习方法是进行设计实战（实战是最好的老师），而不是进一步纠结 Verilog 的语法（不要浪费脑力试图记住大多数高级的 Verilog 语法，而是在需要使用的时候查阅即可）。</p></blockquote><p><strong>By Ricky</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;计数器设计&quot;&gt;&lt;a href=&quot;#计数器设计&quot; class=&quot;headerlink&quot; title=&quot;计数器设计&quot;&gt;&lt;/a&gt;计数器设计&lt;/h2&gt;&lt;p&gt;之前有实验室的学长去参加海思、中芯国际、瑞芯微、…… 数字 IC 前端方向的面试，几乎都问到了同一系列问题——设计一个计数器及相关问题。这里很多朋友就会觉得很有意思了，为什么一个简单的计数器能有这么多东西，那我们就『简单』的东西简单看。&lt;/p&gt;
    
    </summary>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/categories/IC-Design/"/>
    
      <category term="其他" scheme="https://blog.strongwong.top/categories/IC-Design/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="IC Design" scheme="https://blog.strongwong.top/tags/IC-Design/"/>
    
      <category term="计数器" scheme="https://blog.strongwong.top/tags/%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    
      <category term="数字前端" scheme="https://blog.strongwong.top/tags/%E6%95%B0%E5%AD%97%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>使用 Docker + GitLab 构建自用的代码管理服务</title>
    <link href="https://blog.strongwong.top//posts/%E4%BD%BF%E7%94%A8-Docker-GitLab-%E6%9E%84%E5%BB%BA%E8%87%AA%E7%94%A8%E7%9A%84%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E6%9C%8D%E5%8A%A1.html"/>
    <id>https://blog.strongwong.top//posts/使用-Docker-GitLab-构建自用的代码管理服务.html</id>
    <published>2018-11-13T07:16:45.000Z</published>
    <updated>2019-11-21T14:06:56.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><ul><li>一台 Ubuntu 系统的电脑作为服务器（我这里是一台 Ubuntu Xenial 16.04 的电脑），其他版本和系统也可以，只要 Docker CE 支持即可，详情请访问 <a href="https://www.docker.com" target="_blank" rel="noopener">Docker 官网</a>。</li><li>GitLab CE 要求内存 2G 以上</li></ul><h2 id="Docker-安装及配置"><a href="#Docker-安装及配置" class="headerlink" title="Docker 安装及配置"></a>Docker 安装及配置</h2><h3 id="Docker-是什么"><a href="#Docker-是什么" class="headerlink" title="Docker 是什么"></a>Docker 是什么</h3><p>Docker 使用 Google 公司推出的 Go 语言进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于 <a href="https://en.wikipedia.org/wiki/Operating-system-level_virtualization" target="_blank" rel="noopener">操作系统层面的虚拟化技术</a>。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</p><a id="more"></a><p>Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。</p><p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p><p>它是目前最流行的 Linux 容器解决方案！</p><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><p>旧版本的 Docker 称为 <code>docker</code> 或者 <code>docker-engine</code>，使用以下命令卸载旧版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker \</span><br><span class="line">               docker-engine \</span><br><span class="line">               docker.io</span><br></pre></td></tr></table></figure><h3 id="使用-APT-安装"><a href="#使用-APT-安装" class="headerlink" title="使用 APT 安装"></a>使用 APT 安装</h3><p>由于 <code>apt</code> 源使用 HTTPS 以确保软件下载过程中不被篡改。因此，我们首先需要添加使用 HTTPS 传输的软件包以及 CA 证书。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure><p>鉴于国内网络的问题，建议使用国内源，官方源在注释中查看。<br>为了确认所下载软件包的合法性，需要添加软件源的 <code>GPG</code> 密钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 官方源</span></span><br><span class="line"><span class="comment"># $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span></span><br></pre></td></tr></table></figure><p>然后，向 <code>source.list</code> 中添加 Docker 软件源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository \</span><br><span class="line">    <span class="string">"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \</span></span><br><span class="line"><span class="string">    <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">    stable"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 官方源</span></span><br><span class="line"><span class="comment"># $ sudo add-apt-repository \</span></span><br><span class="line"><span class="comment">#    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="comment">#    $(lsb_release -cs) \</span></span><br><span class="line"><span class="comment">#    stable"</span></span><br></pre></td></tr></table></figure><h3 id="安装-Docker-CE"><a href="#安装-Docker-CE" class="headerlink" title="安装 Docker CE"></a>安装 Docker CE</h3><p>更新 apt 软件包缓存，并安装 <code>docker-ce</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><h3 id="启动-Docker-CE"><a href="#启动-Docker-CE" class="headerlink" title="启动 Docker CE"></a>启动 Docker CE</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="建立-Docker-用户组"><a href="#建立-Docker-用户组" class="headerlink" title="建立 Docker 用户组"></a>建立 Docker 用户组</h3><p>默认情况下，<code>docker</code> 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 <code>root</code> 用户和 <code>docker</code> 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 <code>root</code> 用户。因此，更好地做法是将需要使用 <code>docker</code> 的用户加入 <code>docker</code> 用户组。</p><p>建立 <code>docker</code> 用户组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd docker      <span class="comment">#新建 docker 用户组</span></span><br><span class="line"></span><br><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span>     <span class="comment">#将当前用户加入 docker 组</span></span><br></pre></td></tr></table></figure><p>退出当前终端并重新登录，进行如下测试。</p><h3 id="测试-Docker-是否正确安装"><a href="#测试-Docker-是否正确安装" class="headerlink" title="测试 Docker 是否正确安装"></a>测试 Docker 是否正确安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ docker run hello-world</span><br><span class="line"></span><br><span class="line">Unable to find image <span class="string">'hello-world:latest'</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">d1725b59e92d: Pull complete</span><br><span class="line">Digest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">"hello-world"</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure><p>若能正常输出以上信息，则说明安装成功。</p><h3 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h3><p>因为国内网络的原因，后续拉取 Docker 镜像会十分缓慢，建议安装好 Docker 后配置一下国内镜像加速。<br>Ubuntu 16.04 的配置方法如下（参考：<a href="https://www.docker-cn.com" target="_blank" rel="noopener">Docker 中国</a>）：<br>修改 <code>/etc/docker/daemon.json</code> 文件并写入如下内容（如果文件不存在请新建该文件）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">      <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，一定要保证该文件符合 json 规范，否则 Docker 将不能启动。</p></blockquote><p>之后重新启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>到此为止，Docker 就配置好了，接下来安装 GitLab CE 就十分简单了。</p><h2 id="GitLab-安装及配置"><a href="#GitLab-安装及配置" class="headerlink" title="GitLab 安装及配置"></a>GitLab 安装及配置</h2><h3 id="GitLab-是什么"><a href="#GitLab-是什么" class="headerlink" title="GitLab 是什么"></a>GitLab 是什么</h3><p>GitLab 是一个类似与 GitHub 的开源源码托管服务，它提供了一个基于 Git 的全功能软件开发平台，可以通过 Web 界面访问公有或私有的项目，还具备很多与软件开发协作相关的其他功能。利用 GitLab 提供的这些功能，可以实践一些项目管理和协作流程。这套流程借鉴于很多成功的开源项目，非常适合在小型团队里使用。</p><h3 id="拉取-GitLab-镜像"><a href="#拉取-GitLab-镜像" class="headerlink" title="拉取 GitLab 镜像"></a>拉取 GitLab 镜像</h3><p>安装最新版 GitLab 镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><h3 id="启动-GitLab"><a href="#启动-GitLab" class="headerlink" title="启动 GitLab"></a>启动 GitLab</h3><p>使用 Docker 命令运行容器，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d \</span><br><span class="line">    --hostname gitlab.asicfans.com \</span><br><span class="line">    -p 8443:443 -p 8080:80 -p 2222:22 \</span><br><span class="line">    --name gitlab \</span><br><span class="line">    --restart always \</span><br><span class="line">    -v /srv/gitlab/config:/etc/gitlab \</span><br><span class="line">    -v /srv/gitlab/logs:/var/<span class="built_in">log</span>/gitlab \</span><br><span class="line">    -v /srv/gitlab/data:/var/opt/gitlab \</span><br><span class="line">    gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><blockquote><p>注意修改 hostname 为自己的域名或者 ip 地址。<br><code>-v</code> 命令表示将原有的挂载目录重新映射到自己的目录，这三个参数将 GitLab 的配置、数据和日志持久化到文件系统上，这样就可以保证后面升级 GitLab 时数据不会丢失。<br><code>-p</code> 命令表示将原有的端口映射一下，避免常用端口被占用。我这里使用的都是安全端口。如果大家的环境没有限制或不冲突可以使用与容器同端口，如：-p 443:443 -p 80:80 -p 22:22<br>上面的命令太长，也可以写成 shell 脚本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ cat &lt;&lt;EOF &gt; start.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">HOST_NAME=gitlab.asicfans.com</span><br><span class="line">docker stop gitlab</span><br><span class="line">docker rm gitlab</span><br><span class="line">sudo docker run -d \\</span><br><span class="line">    --hostname \<span class="variable">$&#123;HOST_NAME&#125;</span> \\</span><br><span class="line">    -p 8443:443 -p 8080:80 -p 2222:22 \\</span><br><span class="line">    --name gitlab \\</span><br><span class="line">    --restart always \\</span><br><span class="line">    -v /srv/gitlab/config:/etc/gitlab \\</span><br><span class="line">    -v /srv/gitlab/logs:/var/<span class="built_in">log</span>/gitlab \\</span><br><span class="line">    -v /srv/gitlab/data:/var/opt/gitlab \\</span><br><span class="line">    gitlab/gitlab-ce:latest</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><blockquote><p>脚本编辑好之后运行脚本就可以了，就再也不用输入这么长的命令了！</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sh start.sh</span><br></pre></td></tr></table></figure><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>修改 /etc/hosts 文件，使在本地端可以使用域名访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 gitlab.asicfans.com</span><br></pre></td></tr></table></figure><p>这样就可以使用 <code>http://gitlab.asicfans.com:8080</code> 域名在本地从浏览器访问 GitLab 了（GitLab 初次启动会比较慢，等待大约一分钟）。</p><h3 id="试用-GitLab"><a href="#试用-GitLab" class="headerlink" title="试用 GitLab"></a>试用 GitLab</h3><p>首先根据提示输入管理员密码，这个密码是管理员用户的密码。对应的用户名是 root，用于以管理员身份登录 GitLab。</p><p><img src="https://img.mukewang.com/5a73280a0001efc904500304.png" alt=""></p><p>设置好密码后去注册一个普通账号</p><p><img src="https://img.mukewang.com/5a7327360001cdff03400477.png" alt=""></p><p>注册成功后会跳到首页，这样就可以创建一个项目了</p><p><img src="https://img.mukewang.com/5a7327620001bc7f05460400.png" alt=""></p><p>项目建好了，我们加一个 ssh key，以后本地 pull/push 就简单啦!</p><p><img src="https://img.mukewang.com/5a73277b0001982f07080200.png" alt=""></p><p>首先去到添加 ssh key 的页面</p><p><img src="https://img.mukewang.com/5a73278e0001303620200994.png" alt=""></p><p>然后拿到我们的 ssh key 贴到框框里就行了<br>获取 ssh key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先看看是不是已经有了，如果有内容就直接 copy 贴过去就行啦</span></span><br><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果上一步没有这个文件 我们就创建一个，运行下面命令（邮箱改成自己的），一路回车就好了</span></span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span><br><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>点开我们刚创建的项目，复制项目 ssh 的地址。<br>添加个文件，测试一下（我的项目叫 test）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> ssh://git@gitlab.asicfans.com:2222/wangqq/test.git</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> <span class="built_in">test</span> &amp;&amp; <span class="built_in">echo</span> <span class="built_in">test</span> &gt; README.md  <span class="comment"># 添加文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#push 上去</span></span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"test"</span></span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><p>这样我们就可以在 GitLab 上看到我们刚才提交的结果了。到这 GitLab 的本地端使用就已经没问题了，但是要想不在家，或者在其他地方也可以访问，那我们就需要进行一下，内网穿透！</p><h2 id="frp-配置"><a href="#frp-配置" class="headerlink" title="frp 配置"></a>frp 配置</h2><p>配置 frp 你需要有一个有公网 ip 的云服务器和自己的域名，然后在云服务器和本地端分别下载安装 frp 并进行配置。</p><p>下载与系统对应的 frp 文件，frp 支持多种系统架构，详情请访问 <a href="https://github.com/fatedier/frp/" target="_blank" rel="noopener"><strong>frp</strong></a> 查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ uname -a      <span class="comment"># 首先使用 uname 命令查看一下你的系统</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我这里是 Ubuntu x86_x64 所以下载 Linux_amd64 的软件包</span></span><br><span class="line">$ wget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压安装包</span></span><br><span class="line">$ tar -zxvf frp_0.21.0_linux_amd64.tar.gz</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> frp_0.21.0_linux_amd64</span><br></pre></td></tr></table></figure><p>然后分别配置服务器端的 <code>frps.ini</code> 文件和本地端的 <code>frpc.ini</code> 文件。</p><ul><li><p>1.修改 frps.ini 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line">[common]    </span><br><span class="line">bind_port = 7000        <span class="comment"># 穿透使用的端口</span></span><br><span class="line">vhost_http_post = 80    <span class="comment"># 从外网访问的端口</span></span><br><span class="line">subdomain_host = asicfans.com   <span class="comment"># 主域名</span></span><br><span class="line">token = xxxx            <span class="comment"># 服务器与本地的校验信息，校验信息错误无法穿透，自行设置</span></span><br></pre></td></tr></table></figure></li><li><p>2.启动 frps</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./frps -c ./frps.ini</span><br></pre></td></tr></table></figure></li><li><p>3.修改 frpc.ini 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line">[common]</span><br><span class="line">server_addr = x.x.x.x   <span class="comment"># 你的服务器 ip 地址</span></span><br><span class="line">server_port = 7000      <span class="comment"># 开放的穿透端口</span></span><br><span class="line">token = xxxx            <span class="comment"># 需要与服务器端一致</span></span><br><span class="line"></span><br><span class="line">[gitlab]</span><br><span class="line"><span class="built_in">type</span> = http</span><br><span class="line">local_port = 8080</span><br><span class="line">subdomain = gitlab</span><br></pre></td></tr></table></figure></li><li><p>4.启动 frpc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure></li><li><p>5.将 gitlab.asicfans.com 的域名 A 记录解析到 ip <code>x.x.x.x</code>， 如果服务器已经有了对应的域名，也可以将 CNAME 记录解析到服务器原先的域名。</p></li><li><p>6.通过浏览器访问 <a href="http://gitlab.asicfans.com" target="_blank" rel="noopener">http://gitlab.asicfans.com</a> 即可访问到处于内网的 gitlab 服务了。<br>这样就不用使用 ssh key 的方式 clone/pull/push 代码仓库了，就可以直接使用 http 的方式进行操作了！ 十分方便！</p></li></ul><p>自此，我们就可以让自己和小伙伴们一起愉快的在 GitLab 上玩耍啦！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;h3 id=&quot;系统要求&quot;&gt;&lt;a href=&quot;#系统要求&quot; class=&quot;headerlink&quot; title=&quot;系统要求&quot;&gt;&lt;/a&gt;系统要求&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一台 Ubuntu 系统的电脑作为服务器（我这里是一台 Ubuntu Xenial 16.04 的电脑），其他版本和系统也可以，只要 Docker CE 支持即可，详情请访问 &lt;a href=&quot;https://www.docker.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker 官网&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;GitLab CE 要求内存 2G 以上&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Docker-安装及配置&quot;&gt;&lt;a href=&quot;#Docker-安装及配置&quot; class=&quot;headerlink&quot; title=&quot;Docker 安装及配置&quot;&gt;&lt;/a&gt;Docker 安装及配置&lt;/h2&gt;&lt;h3 id=&quot;Docker-是什么&quot;&gt;&lt;a href=&quot;#Docker-是什么&quot; class=&quot;headerlink&quot; title=&quot;Docker 是什么&quot;&gt;&lt;/a&gt;Docker 是什么&lt;/h3&gt;&lt;p&gt;Docker 使用 Google 公司推出的 Go 语言进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于 &lt;a href=&quot;https://en.wikipedia.org/wiki/Operating-system-level_virtualization&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;操作系统层面的虚拟化技术&lt;/a&gt;。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="https://blog.strongwong.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Docker" scheme="https://blog.strongwong.top/tags/Docker/"/>
    
      <category term="GitLab" scheme="https://blog.strongwong.top/tags/GitLab/"/>
    
      <category term="frp" scheme="https://blog.strongwong.top/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>提升数字 IC 设计效率从 Vim 开始</title>
    <link href="https://blog.strongwong.top//posts/%E6%8F%90%E5%8D%87%E6%95%B0%E5%AD%97-IC-%E8%AE%BE%E8%AE%A1%E6%95%88%E7%8E%87%E4%BB%8E-Vim-%E5%BC%80%E5%A7%8B.html"/>
    <id>https://blog.strongwong.top//posts/提升数字-IC-设计效率从-Vim-开始.html</id>
    <published>2018-11-12T08:10:29.000Z</published>
    <updated>2019-11-21T14:06:56.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p>这篇文章主要分享给在 Windows 下进行数字 IC 开发的盆友们，如果早已 linux，请大神自行忽略，另外建议在 Windows 下的盆友早日脚踏两只船。<br>相信大家都有过为了追一个信号而不断地缩放 RTL 图的经历，有没有一种办法能一键式一条龙服务呢？有！用 Vim！</p><p>Vim，一种类似于 notepad 的文本编辑器，其拥有你喜欢的一切功能（护眼模式，关键词高亮 …… 废话没有这些还叫代码文本编辑器），其针对 Verilog 的项目维护是真的善良，黑暗中的阳光。</p><a id="more"></a><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/top_vim.jpg" alt=""></p><p>但这阳光大多数情况下照亮于 Linux 或者 Unix 系统下，那我们试试怎么让光照进 Windows。<br><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/cmd_vim.jpg" alt=""></p><h2 id="安装-Cygwin"><a href="#安装-Cygwin" class="headerlink" title="安装 Cygwin"></a>安装 Cygwin</h2><blockquote><p>Cygwin 是一个在 Windows 平台上运行的 Unix 模拟环境，是 Cygnus solutions 公司开发的自由软件（该公司开发了很多好东西，著名的还有 eCos，不过现已被 Redhat 收购）。它对于学习 Unix/Linux 操作环境，或者从 Unix 到 Windows 的应用程序移植，或者进行某些特殊的开发工作，尤其是使用 gnu 工具集在 Windows 上进行嵌入式系统开发，非常有用。随着嵌入式系统开发在国内日渐流行，越来越多的开发者对 Cygwin 产生了兴趣。</p></blockquote><p>下载好 Cygwin 后选择好安装路径，然后选择镜像网址，建议选择国内的镜像地址速度会快一些。可以使用网易的镜像地址：<code>http://mirrors.163.com</code> ,在 URL 栏自行输入镜像地址点击 <code>add</code> 添加后使用。</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/cygwin_setup.jpg" alt=""></p><p>然后就进入选择安装包，初次进入建议都选择，高手可以有需要的时候可以再进来这个安装页面选择安装。<br>安装完成之后，把 Cygwin 添加到右键菜单，打开便是当前的路径下，这才是 Windows 该有的体验不是吗？而完成这一切只需简单地修改一下注册表。（以下步骤参考网络资源）：</p><blockquote><ul><li>使用<code>Win + R</code>打开运行窗口, 输入 regedit, 回车, 启动注册表编辑程序，找到 HKEY_CLASSES_ROOT\Directory\Background\shell 表项;</li><li>右键点击<code>shell</code>，选择<code>新建</code>-&gt;<code>项</code>，命名为<code>Cygwin</code>，或者其他，你右键时看到的就是<code>Cygwin</code>,或者是你自定义的名称;</li><li>右键点击刚才创建的<code>Cygwin</code>，选择<code>新建</code>-&gt;<code>项</code>,命名为<code>command</code>，表示点击该菜单项时要执行的命令;</li><li>双击<code>command</code>下<code>(默认)</code>数据项，在<code>数值数据(V)</code>下输入如下内容：<br><code>&quot;D:\Coding\Cygwin\bin\mintty.exe&quot;-i/Cygwin-Terminal.ico /bin/env _T=%V /bin/bash -l&quot;</code><br>（你的 Cygwin 安装路径）</li></ul></blockquote><p>这样就可以直接在对应的文件夹通过右击菜单打开命令行窗口。<br>Cygwin 配置好后，接下来我们继续配置一下 Vim 。</p><h2 id="Vim-配置"><a href="#Vim-配置" class="headerlink" title="Vim 配置"></a>Vim 配置</h2><ol><li><p>让<code>bash</code>命令行支持中文输入，打开 Cygwin 终端，在终端中输入如下命令 <code>vim ~/.inputrc</code>，打开inputrc 文件，将下面几行的注释去掉（去掉#），保存并退出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> meta-flag on</span><br><span class="line"><span class="built_in">set</span> convert-meta off</span><br><span class="line"><span class="built_in">set</span> input-meta on</span><br><span class="line"><span class="built_in">set</span> output-meta on</span><br></pre></td></tr></table></figure></li><li><p>让 <code>ls</code> 命令支持中文显示，在终端中输入命令 <code>vim ~/.bashrc</code> ，打开 <code>bashrc</code> 文件修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ls=<span class="string">'ls -hF –-show-control-chars –-color=tty'</span></span><br></pre></td></tr></table></figure></li><li><p>配置一个个人喜好的 Vim，打开 Cygwin 终端，输入<code>vim ~/.vimrc</code>，编辑如下设置</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> fenc=utf-<span class="number">8</span> <span class="comment">"设定默认解码 </span></span><br><span class="line"><span class="keyword">set</span> fencs=utf-<span class="number">8</span>,usc-bom,gb18030,gbk,gb2312,cp936,euc-jp</span><br><span class="line"><span class="keyword">set</span> nocp <span class="comment">"或者 set nocompatible 用于关闭 VI 的兼容模式 </span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span> <span class="comment">"显示行号 </span></span><br><span class="line"><span class="keyword">set</span> ai <span class="comment">"或者 set autoindent vim 使用自动对齐，也就是把当前行的对齐格式应用到下一行 </span></span><br><span class="line"><span class="keyword">set</span> si <span class="comment">"或者 set smartindent 依据上面的对齐格式，智能的选择对齐方式</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span> <span class="comment">"设置 tab 键为4个空格</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">sw</span>=<span class="number">4</span> <span class="comment">"或者 set shiftwidth 设置当行之间交错时使用4个空格</span></span><br><span class="line"><span class="keyword">set</span> ruler <span class="comment">"设置在编辑过程中,于右下角显示光标位置的状态行 </span></span><br><span class="line"><span class="keyword">set</span> incsearch <span class="comment">"设置增量搜索,这样的查询比较smart </span></span><br><span class="line"><span class="keyword">set</span> showmatch <span class="comment">"高亮显示匹配的括号 </span></span><br><span class="line"><span class="keyword">set</span> matchtime=<span class="number">5</span> <span class="comment">"匹配括号高亮时间(单位为 1/10 s) </span></span><br><span class="line"><span class="keyword">set</span> ignorecase <span class="comment">"在搜索的时候忽略大小写 </span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span> <span class="comment">"高亮语法</span></span><br></pre></td></tr></table></figure></li></ol><p>成功后界面如下图所示</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/vim_v.jpg" alt=""></p><h2 id="使用-Vim-提升开发效率"><a href="#使用-Vim-提升开发效率" class="headerlink" title="使用 Vim 提升开发效率"></a>使用 Vim 提升开发效率</h2><p>首先，你需要进入项目工程的顶层目录，假设你整个项目最顶层的目录名叫 Vimtest，那么你就先进入这个目录，然后调用 ctags 工具生成整个工程目录的标签列表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> Vimtest  <span class="comment"># youproject name</span></span><br><span class="line">$ ctags -R *</span><br></pre></td></tr></table></figure><p>顺利的话，你将会看到在 Vimtest 下新创建了一个叫 tags 的文件，在这个文件里将会以“<code>定义名称 文件位置：行数</code>”的格式将你所有项目中的模块，信号，参数定义全部列出，而此处参数<code>-R</code>的含义是递归执行，也就是从顶层目录向下自动遍历全部子目录进行文件检索和定义收录。在默认配置下，ctags 可以自动识别<code>.v</code>和<code>.vhdl</code>后缀文件的语法，如果你同时希望收录测试平台中的<code>.sv</code>文件的话，可能你需要额外增加一个 System Verilog 的语法说明文件。<br>有了这个标签列表之后应该如何使用呢？总不能每次都打开这个 tags 文件然后挨个查询吧？当然不是，接下来我们需要把这个 tags 文件和 Vim 结合起来。首先我们需要再次打开<code>.vimrc</code> 文件<br>打开 cygwin 终端，输入 <code>vim ~/.vimrc</code>， 打开文件后输入一下内容:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set tags=tags;</span><br><span class="line"><span class="keyword">set</span> autochdir</span><br><span class="line"><span class="keyword">nnoremap</span> t :<span class="keyword">tag</span></span><br></pre></td></tr></table></figure><p>第一行命令的含义是指定标签列表名称为 tags，命令最末的<code>;</code>号不可省略，其含义是告知 Vim 首先在当前目录下寻找 tags 文件，如果找不到则自动向更上一级目录查找，现在你明白为什么我们一开始要把 tags 文件生成在项目的顶层目录了吧。第二行命令不是必须的，其含义是每次打开新的文件时，自动将终端切换到该文件的所在目录下。</p><p>下面就是见证奇迹的时刻了。你可以进入项目目录下的任何一个子目录，然后 vim top.v（我的工程顶层文件名，你可以叫别的名字）。如果你的<code>vimrc</code>配置跟我上文写的一模一样，那么你就按一下<code>t</code>，如果你的<code>vimrc</code>里没有<code>nnoremap t:tag</code>这一句的话，请手工输入<code>:tag</code>（此处有空格）。然后接着输入任何项目中存在的模块名称，信号名称或者参数名称。比如项目中有一个模块名叫<code>uart</code>，那么完整的命令应该是<code>:tag uart</code>。注意，如果你并不记得模块的完整名称也没关系，随时按下 tab 键都可以自动补全，即使你连开头都不记得了，还可以用<code>/keyword</code>的办法进行搜索。输入完毕后按下回车，如果 Vim 在标签列表中只找到唯一匹配定义的话，就会立刻跳转到对应文件的对应行；如果找到的匹配结果不止一个，就会把所有结果列出来让你用数字序号选择跳转目标。</p><p><img src="https://mytu-1252671182.cos.ap-shanghai.myqcloud.com/hexo/vim_tag.jpg" alt=""></p><p>很多老手看到这里可能觉得不够过瘾，就只是这样而已，我也早就会了，只不过嫌太麻烦而已，还不是要不停输入模块名称吗，能快到哪里去？呵呵，最会偷懒的我怎么可能只是做到这样的程度而已呢？<br>大家觉得，平时在修改代码设计的时候，最需要进行频繁文件跳转的是什么时候？是不是当你找到了一个关键的寄存器，想顺着信号的传播路径一直跟踪下去的时候？当你跟着这个信号来到一个模块例化面前，是不是恨不能立刻跟着信号钻进这个模块的代码里去？其实，这非常简单。</p><p>根据我们前面的介绍，你肯定已经想到了，可以通过<code>:tag module_name</code>跳转到这个模块的设计文件，但是这样太麻烦了，万一模块名字老长还带有大小写，写一遍就得费老半天功夫。有一个相对简单的办法，把光标移动到模块名称上，按下<code>ctrl+]</code>，你会发现自己立刻飞到了该模块的设计文件中！但是！！等等！！我刚才要跟踪的信号是什么名字来着？忘记了对不对？这个方法还是不够方便。<br>有没有更简单的办法？这个办法最好能从我们决定要进入这个模块的那一刻起，只用一个按键操作就能立刻进入这个模块的设计文件，同时光标最好还能直接定位到我们要追踪的信号位置，这个信号的名字最好还能被高亮显示！当！然！没！问！题！</p><p>在 vimrc 文件中加入</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">nnoremap</span> []</span><br></pre></td></tr></table></figure><p>重新打开任何 Vim 文件，假装自己跟踪到了某个模块例化的某个信号上，类似<code>.clk</code>，通常你跟踪到这里的时候，光标应该是放在 clk上面，这时你在键盘上快速按下<code>[</code>和<code>]</code>这两个键，发生了什么？？！！！我是谁？？！我在哪里？！！！恭喜你！成功进入了该模块！！！并且光标飞到了之前 clk 所连接的 module 上！！好了我们可以和过去为了追信号而需要不断 zoom in zoom out 的 RTL 图说再见了~</p><p><strong>By Ricky</strong></p><p>参考源:<br><a href="https://www.jianshu.com/p/fac45920628d" target="_blank" rel="noopener">https://www.jianshu.com/p/fac45920628d</a><br><a href="https://blog.csdn.net/samxx8/article/details/38777189" target="_blank" rel="noopener">https://blog.csdn.net/samxx8/article/details/38777189</a><br><a href="https://blog.csdn.net/hao508506/article/details/52440220" target="_blank" rel="noopener">https://blog.csdn.net/hao508506/article/details/52440220</a><br><a href="http://kellen.wang/zh/useful-skills-of-vim-while-coding-verilog/" target="_blank" rel="noopener">http://kellen.wang/zh/useful-skills-of-vim-while-coding-verilog/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vim&quot;&gt;&lt;a href=&quot;#Vim&quot; class=&quot;headerlink&quot; title=&quot;Vim&quot;&gt;&lt;/a&gt;Vim&lt;/h2&gt;&lt;p&gt;这篇文章主要分享给在 Windows 下进行数字 IC 开发的盆友们，如果早已 linux，请大神自行忽略，另外建议在 Windows 下的盆友早日脚踏两只船。&lt;br&gt;相信大家都有过为了追一个信号而不断地缩放 RTL 图的经历，有没有一种办法能一键式一条龙服务呢？有！用 Vim！&lt;/p&gt;
&lt;p&gt;Vim，一种类似于 notepad 的文本编辑器，其拥有你喜欢的一切功能（护眼模式，关键词高亮 …… 废话没有这些还叫代码文本编辑器），其针对 Verilog 的项目维护是真的善良，黑暗中的阳光。&lt;/p&gt;
    
    </summary>
    
      <category term="IC Design" scheme="https://blog.strongwong.top/categories/IC-Design/"/>
    
      <category term="其他" scheme="https://blog.strongwong.top/categories/IC-Design/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="IC Design" scheme="https://blog.strongwong.top/tags/IC-Design/"/>
    
      <category term="Vim" scheme="https://blog.strongwong.top/tags/Vim/"/>
    
  </entry>
  
</feed>
